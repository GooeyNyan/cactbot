/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 446:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// For consistency with Responses, Conditions
// are also functions.

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  targetIsYou() {
    return (data, matches) => data.me === matches?.target;
  },
  targetIsNotYou() {
    return (data, matches) => data.me !== matches?.target;
  },
  caresAboutAOE() {
    return data => data.role === 'tank' || data.role === 'healer' || data.CanAddle() || data.job === 'BLU';
  },
  caresAboutMagical() {
    return data => data.role === 'tank' || data.role === 'healer' || data.CanAddle() || data.job === 'BLU';
  },
  caresAboutPhysical() {
    return data => data.role === 'tank' || data.role === 'healer' || data.CanFeint() || data.job === 'BLU';
  }
});

/***/ }),

/***/ 873:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY

const data = {
  'Companions': 12,
  'CustomDeliveries': 25,
  'DeepDungeons': 21,
  'DisciplesOfTheHand': 17,
  'DisciplesOfTheLand': 16,
  'Dungeons': 2,
  'DutyRoulette': 1,
  'Eureka': 26,
  'Fates': 8,
  'GoldSaucer': 19,
  'GrandCompany': 11,
  'Guildhests': 3,
  'Levequests': 10,
  'MaskedCarnivale': 27,
  'OverallCompletion': 14,
  'PlayerCommendation': 15,
  'Pvp': 6,
  'QuestBattles': 7,
  'Raids': 5,
  'RetainerVentures': 18,
  'TreasureHunt': 9,
  'Trials': 4,
  'TribalQuests': 13,
  'UltimateRaids': 28,
  'VCDungeonFinder': 30,
  'WondrousTails': 24
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);

/***/ }),

/***/ 619:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Go": () => (/* binding */ langToLocale),
/* harmony export */   "RT": () => (/* binding */ langMap),
/* harmony export */   "jd": () => (/* binding */ isLang),
/* harmony export */   "lC": () => (/* binding */ browserLanguagesToLang)
/* harmony export */ });
/* unused harmony export languages */
const languages = ['en', 'de', 'fr', 'ja', 'cn', 'ko'];
const langMap = {
  en: {
    en: 'English',
    de: 'German',
    fr: 'French',
    ja: 'Japanese',
    cn: 'Chinese',
    ko: 'Korean'
  },
  de: {
    en: 'Englisch',
    de: 'Deutsch',
    fr: 'Französisch',
    ja: 'Japanisch',
    cn: 'Chinesisch',
    ko: 'Koreanisch'
  },
  fr: {
    en: 'Anglais',
    de: 'Allemand',
    fr: 'Français',
    ja: 'Japonais',
    cn: 'Chinois',
    ko: 'Coréen'
  },
  ja: {
    en: '英語',
    de: 'ドイツ語',
    fr: 'フランス語',
    ja: '日本語',
    cn: '中国語',
    ko: '韓国語'
  },
  cn: {
    en: '英文',
    de: '德文',
    fr: '法文',
    ja: '日文',
    cn: '中文',
    ko: '韩文'
  },
  ko: {
    en: '영어',
    de: '독일어',
    fr: '프랑스어',
    ja: '일본어',
    cn: '중국어',
    ko: '한국어'
  }
};
const isLang = lang => {
  const langStrs = languages;
  if (lang === undefined) return false;
  return langStrs.includes(lang);
};
const langToLocale = lang => {
  return {
    en: 'en',
    de: 'de',
    fr: 'fr',
    ja: 'ja',
    cn: 'zh-CN',
    ko: 'ko'
  }[lang];
};
const browserLanguagesToLang = languages => {
  const lang = [...navigator.languages, 'en'].map(l => l.slice(0, 2))
  // Remap `zh` to `cn` to match cactbot languages
  .map(l => l === 'zh' ? 'cn' : l).filter(l => languages.includes(l))[0];
  return isLang(lang) ? lang : 'en';
};

/***/ }),

/***/ 21:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "W": () => (/* binding */ logDefinitionsVersions),
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// TODO: Maybe bring in a helper library that can compile-time extract these keys instead?
const combatantMemoryKeys = ['CurrentWorldID', 'WorldID', 'WorldName', 'BNpcID', 'BNpcNameID', 'PartyType', 'ID', 'OwnerID', 'WeaponId', 'Type', 'Job', 'Level', 'Name', 'CurrentHP', 'MaxHP', 'CurrentMP', 'MaxMP', 'PosX', 'PosY', 'PosZ', 'Heading', 'MonsterType', 'Status', 'ModelStatus', 'AggressionStatus', 'TargetID', 'IsTargetable', 'Radius', 'Distance', 'EffectiveDistance', 'NPCTargetID', 'CurrentGP', 'MaxGP', 'CurrentCP', 'MaxCP', 'PCTargetID', 'IsCasting1', 'IsCasting2', 'CastBuffID', 'CastTargetID', 'CastDurationCurrent', 'CastDurationMax', 'TransformationId'];
const latestLogDefinitions = {
  GameLog: {
    type: '00',
    name: 'GameLog',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'ChatLog',
    fields: {
      type: 0,
      timestamp: 1,
      code: 2,
      name: 3,
      line: 4
    },
    subFields: {
      code: {
        '0039': {
          name: 'message',
          canAnonymize: true
        },
        '0038': {
          name: 'echo',
          canAnonymize: true
        },
        '0044': {
          name: 'dialog',
          canAnonymize: true
        },
        '0839': {
          name: 'message',
          canAnonymize: true
        }
      }
    },
    firstOptionalField: undefined
  },
  ChangeZone: {
    type: '01',
    name: 'ChangeZone',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Territory',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3
    },
    lastInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  ChangedPlayer: {
    type: '02',
    name: 'ChangedPlayer',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'ChangePrimaryPlayer',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3
    },
    playerIds: {
      2: 3
    },
    lastInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  AddedCombatant: {
    type: '03',
    name: 'AddedCombatant',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'AddCombatant',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      job: 4,
      level: 5,
      ownerId: 6,
      worldId: 7,
      world: 8,
      npcNameId: 9,
      npcBaseId: 10,
      currentHp: 11,
      hp: 12,
      currentMp: 13,
      mp: 14,
      // maxTp: 15,
      // tp: 16,
      x: 17,
      y: 18,
      z: 19,
      heading: 20
    },
    playerIds: {
      2: 3,
      6: null
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  RemovedCombatant: {
    type: '04',
    name: 'RemovedCombatant',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'RemoveCombatant',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      job: 4,
      level: 5,
      owner: 6,
      world: 8,
      npcNameId: 9,
      npcBaseId: 10,
      hp: 12,
      x: 17,
      y: 18,
      z: 19,
      heading: 20
    },
    playerIds: {
      2: 3,
      6: null
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  PartyList: {
    type: '11',
    name: 'PartyList',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'PartyList',
    fields: {
      type: 0,
      timestamp: 1,
      partyCount: 2,
      id0: 3,
      id1: 4,
      id2: 5,
      id3: 6,
      id4: 7,
      id5: 8,
      id6: 9,
      id7: 10,
      id8: 11,
      id9: 12,
      id10: 13,
      id11: 14,
      id12: 15,
      id13: 16,
      id14: 17,
      id15: 18,
      id16: 19,
      id17: 20,
      id18: 21,
      id19: 22,
      id20: 23,
      id21: 24,
      id22: 25,
      id23: 26
    },
    playerIds: {
      3: null,
      4: null,
      5: null,
      6: null,
      7: null,
      8: null,
      9: null,
      10: null,
      11: null,
      12: null,
      13: null,
      14: null,
      15: null,
      16: null,
      17: null,
      18: null,
      19: null,
      20: null,
      21: null,
      22: null,
      23: null,
      24: null,
      25: null,
      26: null
    },
    firstOptionalField: 3,
    canAnonymize: true,
    lastInclude: true
  },
  PlayerStats: {
    type: '12',
    name: 'PlayerStats',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'PlayerStats',
    fields: {
      type: 0,
      timestamp: 1,
      job: 2,
      strength: 3,
      dexterity: 4,
      vitality: 5,
      intelligence: 6,
      mind: 7,
      piety: 8,
      attackPower: 9,
      directHit: 10,
      criticalHit: 11,
      attackMagicPotency: 12,
      healMagicPotency: 13,
      determination: 14,
      skillSpeed: 15,
      spellSpeed: 16,
      tenacity: 18,
      localContentId: 19
    },
    canAnonymize: true,
    lastInclude: true,
    firstOptionalField: undefined
  },
  StartsUsing: {
    type: '20',
    name: 'StartsUsing',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'StartsCasting',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      castTime: 8,
      x: 9,
      y: 10,
      z: 11,
      heading: 12
    },
    possibleRsvFields: [5],
    blankFields: [6],
    playerIds: {
      2: 3,
      6: 7
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Ability: {
    type: '21',
    name: 'Ability',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'ActionEffect',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      flags: 8,
      damage: 9,
      targetCurrentHp: 24,
      targetMaxHp: 25,
      targetCurrentMp: 26,
      targetMaxMp: 27,
      // targetCurrentTp: 28,
      // targetMaxTp: 29,
      targetX: 30,
      targetY: 31,
      targetZ: 32,
      targetHeading: 33,
      currentHp: 34,
      maxHp: 35,
      currentMp: 36,
      maxMp: 37,
      // currentTp: 38;
      // maxTp: 39;
      x: 40,
      y: 41,
      z: 42,
      heading: 43,
      sequence: 44,
      targetIndex: 45,
      targetCount: 46
    },
    possibleRsvFields: [5],
    playerIds: {
      2: 3,
      6: 7
    },
    blankFields: [6],
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkAOEAbility: {
    type: '22',
    name: 'NetworkAOEAbility',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'AOEActionEffect',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      flags: 8,
      damage: 9,
      targetCurrentHp: 24,
      targetMaxHp: 25,
      targetCurrentMp: 26,
      targetMaxMp: 27,
      // targetCurrentTp: 28,
      // targetMaxTp: 29,
      targetX: 30,
      targetY: 31,
      targetZ: 32,
      targetHeading: 33,
      currentHp: 34,
      maxHp: 35,
      currentMp: 36,
      maxMp: 37,
      // currentTp: 38;
      // maxTp: 39;
      x: 40,
      y: 41,
      z: 42,
      heading: 43,
      sequence: 44,
      targetIndex: 45,
      targetCount: 46
    },
    possibleRsvFields: [5],
    playerIds: {
      2: 3,
      6: 7
    },
    blankFields: [6],
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkCancelAbility: {
    type: '23',
    name: 'NetworkCancelAbility',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'CancelAction',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      name: 5,
      reason: 6
    },
    possibleRsvFields: [5],
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkDoT: {
    type: '24',
    name: 'NetworkDoT',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'DoTHoT',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      which: 4,
      effectId: 5,
      damage: 6,
      currentHp: 7,
      maxHp: 8,
      currentMp: 9,
      maxMp: 10,
      // currentTp: 11,
      // maxTp: 12,
      x: 13,
      y: 14,
      z: 15,
      heading: 16,
      sourceId: 17,
      source: 18,
      // An id number lookup into the AttackType table
      damageType: 19,
      sourceCurrentHp: 20,
      sourceMaxHp: 21,
      sourceCurrentMp: 22,
      sourceMaxMp: 23,
      // sourceCurrentTp: 24,
      // sourceMaxTp: 25,
      sourceX: 26,
      sourceY: 27,
      sourceZ: 28,
      sourceHeading: 29
    },
    playerIds: {
      2: 3,
      17: 18
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  WasDefeated: {
    type: '25',
    name: 'WasDefeated',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Death',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      sourceId: 4,
      source: 5
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  GainsEffect: {
    type: '26',
    name: 'GainsEffect',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'StatusAdd',
    fields: {
      type: 0,
      timestamp: 1,
      effectId: 2,
      effect: 3,
      duration: 4,
      sourceId: 5,
      source: 6,
      targetId: 7,
      target: 8,
      count: 9,
      targetMaxHp: 10,
      sourceMaxHp: 11
    },
    possibleRsvFields: [3],
    playerIds: {
      5: 6,
      7: 8
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  HeadMarker: {
    type: '27',
    name: 'HeadMarker',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'TargetIcon',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      id: 6
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkRaidMarker: {
    type: '28',
    name: 'NetworkRaidMarker',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'WaymarkMarker',
    fields: {
      type: 0,
      timestamp: 1,
      operation: 2,
      waymark: 3,
      id: 4,
      name: 5,
      x: 6,
      y: 7,
      z: 8
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkTargetMarker: {
    type: '29',
    name: 'NetworkTargetMarker',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'SignMarker',
    fields: {
      type: 0,
      timestamp: 1,
      operation: 2,
      // Add, Update, Delete
      waymark: 3,
      id: 4,
      name: 5,
      targetId: 6,
      targetName: 7
    },
    playerIds: {
      4: null,
      5: null
    },
    firstOptionalField: undefined
  },
  LosesEffect: {
    type: '30',
    name: 'LosesEffect',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'StatusRemove',
    fields: {
      type: 0,
      timestamp: 1,
      effectId: 2,
      effect: 3,
      sourceId: 5,
      source: 6,
      targetId: 7,
      target: 8,
      count: 9
    },
    possibleRsvFields: [3],
    playerIds: {
      5: 6,
      7: 8
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkGauge: {
    type: '31',
    name: 'NetworkGauge',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Gauge',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      data0: 3,
      data1: 4,
      data2: 5,
      data3: 6
    },
    playerIds: {
      2: null
    },
    // Sometimes this last field looks like a player id.
    // For safety, anonymize all of the gauge data.
    firstUnknownField: 3,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkWorld: {
    type: '32',
    name: 'NetworkWorld',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'World',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true,
    firstOptionalField: undefined
  },
  ActorControl: {
    type: '33',
    name: 'ActorControl',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Director',
    fields: {
      type: 0,
      timestamp: 1,
      instance: 2,
      command: 3,
      data0: 4,
      data1: 5,
      data2: 6,
      data3: 7
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NameToggle: {
    type: '34',
    name: 'NameToggle',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'NameToggle',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      targetId: 4,
      targetName: 5,
      toggle: 6
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Tether: {
    type: '35',
    name: 'Tether',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Tether',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      targetId: 4,
      target: 5,
      id: 8
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstUnknownField: 9,
    firstOptionalField: undefined
  },
  LimitBreak: {
    type: '36',
    name: 'LimitBreak',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'LimitBreak',
    fields: {
      type: 0,
      timestamp: 1,
      valueHex: 2,
      bars: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkEffectResult: {
    type: '37',
    name: 'NetworkEffectResult',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'EffectResult',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      sequenceId: 4,
      currentHp: 5,
      maxHp: 6,
      currentMp: 7,
      maxMp: 8,
      // currentTp: 9,
      // maxTp: 10,
      x: 11,
      y: 12,
      z: 13,
      heading: 14
    },
    playerIds: {
      2: 3
    },
    firstUnknownField: 22,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  StatusEffect: {
    type: '38',
    name: 'StatusEffect',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'StatusList',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      jobLevelData: 4,
      hp: 5,
      maxHp: 6,
      mp: 7,
      maxMp: 8,
      x: 11,
      y: 12,
      z: 13,
      heading: 14,
      data0: 15,
      data1: 16,
      data2: 17,
      data3: 18,
      data4: 19,
      data5: 20
      // Variable number of triplets here, but at least one.
    },

    playerIds: {
      2: 3
    },
    firstUnknownField: 18,
    canAnonymize: true,
    firstOptionalField: 18
  },
  NetworkUpdateHP: {
    type: '39',
    name: 'NetworkUpdateHP',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'UpdateHp',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      currentHp: 4,
      maxHp: 5,
      currentMp: 6,
      maxMp: 7,
      // currentTp: 8,
      // maxTp: 9,
      x: 10,
      y: 11,
      z: 12,
      heading: 13
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Map: {
    type: '40',
    name: 'Map',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'ChangeMap',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      regionName: 3,
      placeName: 4,
      placeNameSub: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined,
    lastInclude: true
  },
  SystemLogMessage: {
    type: '41',
    name: 'SystemLogMessage',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'SystemLogMessage',
    fields: {
      type: 0,
      timestamp: 1,
      instance: 2,
      id: 3,
      param0: 4,
      param1: 5,
      param2: 6
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  StatusList3: {
    type: '42',
    name: 'StatusList3',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'StatusList3',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3
      // triplets of fields from here (effectId, data, playerId)?
    },

    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: 4,
    firstUnknownField: 4
  },
  ParserInfo: {
    type: '249',
    name: 'ParserInfo',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Settings',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  ProcessInfo: {
    type: '250',
    name: 'ProcessInfo',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Process',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Debug: {
    type: '251',
    name: 'Debug',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Debug',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: false,
    firstOptionalField: undefined
  },
  PacketDump: {
    type: '252',
    name: 'PacketDump',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'PacketDump',
    fields: {
      type: 0,
      timestamp: 1
    },
    canAnonymize: false,
    firstOptionalField: undefined
  },
  Version: {
    type: '253',
    name: 'Version',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Version',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Error: {
    type: '254',
    name: 'Error',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Error',
    fields: {
      type: 0,
      timestamp: 1
    },
    canAnonymize: false,
    firstOptionalField: undefined
  },
  None: {
    type: '[0-9]+',
    name: 'None',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'None',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true,
    firstOptionalField: undefined
  },
  // OverlayPlugin log lines
  LineRegistration: {
    type: '256',
    name: 'LineRegistration',
    source: 'OverlayPlugin',
    messageType: '256',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      source: 3,
      version: 4
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  MapEffect: {
    type: '257',
    name: 'MapEffect',
    source: 'OverlayPlugin',
    messageType: '257',
    fields: {
      type: 0,
      timestamp: 1,
      instance: 2,
      flags: 3,
      // values for the location field seem to vary between instances
      // (e.g. a location of '08' in P5S does not appear to be the same location in P5S as in P6S)
      // but this field does appear to consistently contain position info for the effect rendering
      location: 4,
      data0: 5,
      data1: 6
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  FateDirector: {
    type: '258',
    name: 'FateDirector',
    source: 'OverlayPlugin',
    messageType: '258',
    // fateId and progress are in hex.
    fields: {
      type: 0,
      timestamp: 1,
      category: 2,
      // padding0: 3,
      fateId: 4,
      progress: 5
      // param3: 6,
      // param4: 7,
      // param5: 8,
      // param6: 9,
      // padding1: 10,
    },

    canAnonymize: true,
    firstOptionalField: undefined
  },
  CEDirector: {
    type: '259',
    name: 'CEDirector',
    source: 'OverlayPlugin',
    messageType: '259',
    // all fields are in hex
    fields: {
      type: 0,
      timestamp: 1,
      popTime: 2,
      timeRemaining: 3,
      // unknown0: 4,
      ceKey: 5,
      numPlayers: 6,
      status: 7,
      // unknown1: 8,
      progress: 9
      // unknown2: 10,
      // unknown3: 11,
      // unknown4: 12,
    },

    canAnonymize: true,
    firstOptionalField: undefined
  },
  InCombat: {
    type: '260',
    name: 'InCombat',
    source: 'OverlayPlugin',
    messageType: '260',
    fields: {
      type: 0,
      timestamp: 1,
      inACTCombat: 2,
      inGameCombat: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  CombatantMemory: {
    type: '261',
    name: 'CombatantMemory',
    source: 'OverlayPlugin',
    messageType: '261',
    fields: {
      type: 0,
      timestamp: 1,
      change: 2,
      id: 3
      // from here, pairs of field name/values
    },

    canAnonymize: true,
    firstOptionalField: 5,
    // TODO: fix this data structure and anonymizer to be able to handle repeatingFields.
    // At the very least, Name and PCTargetID need to be anonymized as well.
    firstUnknownField: 4,
    playerIds: {
      3: null
    },
    repeatingFields: {
      startingIndex: 4,
      label: 'pair',
      names: ['key', 'value'],
      sortKeys: true,
      primaryKey: 'key',
      possibleKeys: combatantMemoryKeys
    }
  },
  RSVData: {
    type: '262',
    name: 'RSVData',
    source: 'OverlayPlugin',
    messageType: '262',
    fields: {
      type: 0,
      timestamp: 1,
      locale: 2,
      // unknown0: 3,
      key: 4,
      value: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  }
};
const logDefinitionsVersions = {
  'latest': latestLogDefinitions
};

// Verify that this has the right type, but export `as const`.
const assertLogDefinitions = logDefinitionsVersions;
console.assert(assertLogDefinitions);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logDefinitionsVersions['latest']);

/***/ }),

/***/ 622:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BW": () => (/* binding */ buildNetRegexForTrigger),
/* harmony export */   "ZP": () => (/* binding */ NetRegexes),
/* harmony export */   "_1": () => (/* binding */ keysThatRequireTranslation),
/* harmony export */   "k3": () => (/* binding */ gameLogCodes),
/* harmony export */   "sL": () => (/* binding */ commonNetRegex)
/* harmony export */ });
/* unused harmony export buildRegex */
/* harmony import */ var _netlog_defs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/* harmony import */ var _not_reached__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62);
/* harmony import */ var _regexes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(402);



const separator = '\\|';
const matchDefault = '[^|]*';

// If NetRegexes.setFlagTranslationsNeeded is set to true, then any
// regex created that requires a translation will begin with this string
// and match the magicStringRegex.  This is maybe a bit goofy, but is
// a pretty straightforward way to mark regexes for translations.
// If issue #1306 is ever resolved, we can remove this.
const magicTranslationString = `^^`;
const magicStringRegex = /^\^\^/;

// can't simply export this, see https://github.com/quisquous/cactbot/pull/4957#discussion_r1002590589
const keysThatRequireTranslationAsConst = ['ability', 'name', 'source', 'target', 'line'];
const keysThatRequireTranslation = keysThatRequireTranslationAsConst;
const gameLogCodes = {
  echo: '0038',
  dialog: '0044',
  message: '0839'
};
const defaultParams = (type, version, include) => {
  const logType = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type];
  if (include === undefined) {
    include = Object.keys(logType.fields);
    if ('repeatingFields' in logType) {
      include.push(logType.repeatingFields.label);
    }
  }
  const params = {};
  const firstOptionalField = logType.firstOptionalField;
  for (const [prop, index] of Object.entries(logType.fields)) {
    if (!include.includes(prop)) continue;
    const param = {
      field: prop,
      optional: firstOptionalField !== undefined && index >= firstOptionalField
    };
    if (prop === 'type') param.value = logType.type;
    params[index] = param;
  }
  if ('repeatingFields' in logType && include.includes(logType.repeatingFields.label)) {
    params[logType.repeatingFields.startingIndex] = {
      field: logType.repeatingFields.label,
      optional: firstOptionalField !== undefined && logType.repeatingFields.startingIndex >= firstOptionalField,
      repeating: true,
      repeatingKeys: [...logType.repeatingFields.names],
      sortKeys: logType.repeatingFields.sortKeys,
      primaryKey: logType.repeatingFields.primaryKey,
      possibleKeys: [...logType.repeatingFields.possibleKeys]
    };
  }
  return params;
};
const isRepeatingField = (repeating, value) => {
  if (repeating !== true) return false;
  // Allow excluding the field to match for extraction
  if (value === undefined) return true;
  if (!Array.isArray(value)) return false;
  for (const e of value) {
    if (typeof e !== 'object') return false;
  }
  return true;
};
const parseHelper = (params, funcName, fields) => {
  params = params ?? {};
  const validFields = [];
  for (const index in fields) {
    const field = fields[index];
    if (field) validFields.push(field.field);
  }
  _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].validateParams */ .Z.validateParams(params, funcName, ['capture', ...validFields]);

  // Find the last key we care about, so we can shorten the regex if needed.
  const capture = _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].trueIfUndefined */ .Z.trueIfUndefined(params.capture);
  const fieldKeys = Object.keys(fields).sort((a, b) => parseInt(a) - parseInt(b));
  let maxKeyStr;
  if (capture) {
    const keys = [];
    for (const key in fields) keys.push(key);
    let tmpKey = keys.pop();
    if (tmpKey === undefined) {
      maxKeyStr = fieldKeys[fieldKeys.length - 1] ?? '0';
    } else {
      while (fields[tmpKey]?.optional && !((fields[tmpKey]?.field ?? '') in params)) tmpKey = keys.pop();
      maxKeyStr = tmpKey ?? '0';
    }
  } else {
    maxKeyStr = '0';
    for (const key in fields) {
      const value = fields[key] ?? {};
      if (typeof value !== 'object') continue;
      const fieldName = fields[key]?.field;
      if (fieldName !== undefined && fieldName in params) maxKeyStr = key;
    }
  }
  const maxKey = parseInt(maxKeyStr);

  // For testing, it's useful to know if this is a regex that requires
  // translation.  We test this by seeing if there are any specified
  // fields, and if so, inserting a magic string that we can detect.
  // This lets us differentiate between "regex that should be translated"
  // e.g. a regex with `target` specified, and "regex that shouldn't"
  // e.g. a gains effect with just effectId specified.
  const transParams = Object.keys(params).filter(k => keysThatRequireTranslation.includes(k));
  const needsTranslations = NetRegexes.flagTranslationsNeeded && transParams.length > 0;

  // Build the regex from the fields.
  let str = needsTranslations ? magicTranslationString : '^';
  let lastKey = -1;
  for (const keyStr in fields) {
    const key = parseInt(keyStr);
    // Fill in blanks.
    const missingFields = key - lastKey - 1;
    if (missingFields === 1) str += '\\y{NetField}';else if (missingFields > 1) str += `\\y{NetField}{${missingFields}}`;
    lastKey = key;
    const value = fields[keyStr];
    if (typeof value !== 'object') throw new Error(`${funcName}: invalid value: ${JSON.stringify(value)}`);
    const fieldName = value.field;
    const defaultFieldValue = value.value?.toString() ?? matchDefault;
    const fieldValue = params[fieldName];
    if (isRepeatingField(fields[keyStr]?.repeating, fieldValue)) {
      let repeatingArray = fieldValue;
      const sortKeys = fields[keyStr]?.sortKeys;
      const primaryKey = fields[keyStr]?.primaryKey;
      const possibleKeys = fields[keyStr]?.possibleKeys;

      // primaryKey is required if this is a repeating field per typedef in netlog_defs.ts
      // Same with possibleKeys
      if (primaryKey === undefined || possibleKeys === undefined) throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .$();

      // Allow sorting if needed
      if (sortKeys) {
        // Also sort our valid keys list
        possibleKeys.sort((left, right) => left.toLowerCase().localeCompare(right.toLowerCase()));
        if (repeatingArray !== undefined) {
          repeatingArray = [...repeatingArray].sort((left, right) => {
            // We check the validity of left/right because they're user-supplied
            if (typeof left !== 'object' || left[primaryKey] === undefined) {
              console.warn('Invalid argument passed to trigger:', left);
              return 0;
            }
            const leftValue = left[primaryKey];
            if (typeof leftValue !== 'string' || !possibleKeys?.includes(leftValue)) {
              console.warn('Invalid argument passed to trigger:', left);
              return 0;
            }
            if (typeof right !== 'object' || right[primaryKey] === undefined) {
              console.warn('Invalid argument passed to trigger:', right);
              return 0;
            }
            const rightValue = right[primaryKey];
            if (typeof rightValue !== 'string' || !possibleKeys?.includes(rightValue)) {
              console.warn('Invalid argument passed to trigger:', right);
              return 0;
            }
            return leftValue.toLowerCase().localeCompare(rightValue.toLowerCase());
          });
        }
      }
      const anonReps = repeatingArray;
      // Loop over our possible keys
      // Build a regex that can match any possible key with required values substituted in
      possibleKeys.forEach(possibleKey => {
        const rep = anonReps?.find(rep => primaryKey in rep && rep[primaryKey] === possibleKey);
        let fieldRegex = '';
        // Rather than looping over the keys defined on the object,
        // loop over the base type def's keys. This enforces the correct order.
        fields[keyStr]?.repeatingKeys?.forEach(key => {
          let val = rep?.[key];
          if (rep === undefined || !(key in rep)) {
            // If we don't have a value for this key
            // insert a placeholder, unless it's the primary key
            if (key === primaryKey) val = possibleKey;else val = matchDefault;
          }
          if (typeof val !== 'string') {
            if (!Array.isArray(val)) val = matchDefault;else if (val.length < 1) val = matchDefault;else if (val.some(v => typeof v !== 'string')) val = matchDefault;
          }
          fieldRegex += _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].maybeCapture */ .Z.maybeCapture(key === primaryKey ? false : capture,
          // All capturing groups are `fieldName` + `possibleKey`, e.g. `pairIsCasting1`
          fieldName + possibleKey, val, defaultFieldValue) + separator;
        });
        if (fieldRegex.length > 0) {
          str += `(?:${fieldRegex})${rep !== undefined ? '' : '?'}`;
        }
      });
    } else if (fields[keyStr]?.repeating) {
      // If this is a repeating field but the actual value is empty or otherwise invalid,
      // don't process further. We can't use `continue` in the above block because that
      // would skip the early-out break at the end of the loop.
    } else {
      if (fieldName !== undefined) {
        str += _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].maybeCapture */ .Z.maybeCapture(
        // more accurate type instead of `as` cast
        // maybe this function needs a refactoring
        capture, fieldName, fieldValue, defaultFieldValue) + separator;
      } else {
        str += defaultFieldValue + separator;
      }
    }

    // Stop if we're not capturing and don't care about future fields.
    if (key >= maxKey) break;
  }
  return _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].parse */ .Z.parse(str);
};
const buildRegex = (type, params) => {
  return parseHelper(params, type, defaultParams(type, NetRegexes.logVersion));
};
class NetRegexes {
  static logVersion = 'latest';
  static flagTranslationsNeeded = false;
  static setFlagTranslationsNeeded(value) {
    NetRegexes.flagTranslationsNeeded = value;
  }
  static doesNetRegexNeedTranslation(regex) {
    // Need to `setFlagTranslationsNeeded` before calling this function.
    console.assert(NetRegexes.flagTranslationsNeeded);
    const str = typeof regex === 'string' ? regex : regex.source;
    return !!magicStringRegex.exec(str);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-20-0x14-networkstartscasting
   */
  static startsUsing(params) {
    return buildRegex('StartsUsing', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   */
  static ability(params) {
    return parseHelper(params, 'Ability', {
      ...defaultParams('Ability', NetRegexes.logVersion),
      // Override type
      0: {
        field: 'type',
        value: '2[12]',
        optional: false
      }
    });
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   *
   * @deprecated Use `ability` instead
   */
  static abilityFull(params) {
    return this.ability(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-27-0x1b-networktargeticon-head-marker
   */
  static headMarker(params) {
    return buildRegex('HeadMarker', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */
  static addedCombatant(params) {
    return parseHelper(params, 'AddedCombatant', defaultParams('AddedCombatant', NetRegexes.logVersion));
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   * @deprecated Use `addedCombatant` instead
   */
  static addedCombatantFull(params) {
    return NetRegexes.addedCombatant(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-04-0x04-removecombatant
   */
  static removingCombatant(params) {
    return buildRegex('RemovedCombatant', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-26-0x1a-networkbuff
   */
  static gainsEffect(params) {
    return buildRegex('GainsEffect', params);
  }

  /**
   * Prefer gainsEffect over this function unless you really need extra data.
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-38-0x26-networkstatuseffects
   */
  static statusEffectExplicit(params) {
    return buildRegex('StatusEffect', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-30-0x1e-networkbuffremove
   */
  static losesEffect(params) {
    return buildRegex('LosesEffect', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-35-0x23-networktether
   */
  static tether(params) {
    return buildRegex('Tether', params);
  }

  /**
   * 'target' was defeated by 'source'
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-25-0x19-networkdeath
   */
  static wasDefeated(params) {
    return buildRegex('WasDefeated', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-24-0x18-networkdot
   */
  static networkDoT(params) {
    return buildRegex('NetworkDoT', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static echo(params) {
    if (typeof params === 'undefined') params = {};
    _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].validateParams */ .Z.validateParams(params, 'Echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    return NetRegexes.gameLog({
      ...params,
      code: gameLogCodes.echo
    });
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static dialog(params) {
    if (typeof params === 'undefined') params = {};
    _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].validateParams */ .Z.validateParams(params, 'Dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    return NetRegexes.gameLog({
      ...params,
      code: gameLogCodes.dialog
    });
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static message(params) {
    if (typeof params === 'undefined') params = {};
    _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].validateParams */ .Z.validateParams(params, 'Message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    return NetRegexes.gameLog({
      ...params,
      code: gameLogCodes.message
    });
  }

  /**
   * fields: code, name, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static gameLog(params) {
    return buildRegex('GameLog', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static gameNameLog(params) {
    // Backwards compatability.
    return NetRegexes.gameLog(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-12-0x0c-playerstats
   */
  static statChange(params) {
    return buildRegex('PlayerStats', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-01-0x01-changezone
   */
  static changeZone(params) {
    return buildRegex('ChangeZone', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-33-0x21-network6d-actor-control
   */
  static network6d(params) {
    return buildRegex('ActorControl', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-34-0x22-networknametoggle
   */
  static nameToggle(params) {
    return buildRegex('NameToggle', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-40-0x28-map
   */
  static map(params) {
    return buildRegex('Map', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-41-0x29-systemlogmessage
   */
  static systemLogMessage(params) {
    return buildRegex('SystemLogMessage', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-257-0x101-mapeffect
   */
  static mapEffect(params) {
    return buildRegex('MapEffect', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-258-0x102-fatedirector
   */
  static fateDirector(params) {
    return buildRegex('FateDirector', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-259-0x103-cedirector
   */
  static ceDirector(params) {
    return buildRegex('CEDirector', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-261-0x105-combatantmemory
   */
  static combatantMemory(params) {
    return buildRegex('CombatantMemory', params);
  }
}
const commonNetRegex = {
  // TODO(6.2): remove 40000010 after everybody is on 6.2.
  // TODO: or maybe keep around for playing old log files??
  wipe: NetRegexes.network6d({
    command: ['40000010', '4000000F']
  }),
  cactbotWipeEcho: NetRegexes.echo({
    line: 'cactbot wipe.*?'
  }),
  userWipeEcho: NetRegexes.echo({
    line: 'end'
  })
};
const buildNetRegexForTrigger = (type, params) => {
  if (type === 'Ability')
    // ts can't narrow T to `Ability` here, need casting.
    return NetRegexes.ability(params);
  return buildRegex(type, params);
};

/***/ }),

/***/ 62:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ UnreachableCode)
/* harmony export */ });
// Helper Error for TypeScript situations where the programmer thinks they
// know better than TypeScript that some situation will never occur.

// The intention here is that the programmer does not expect a particular
// bit of code to happen, and so has not written careful error handling.
// If it does occur, at least there will be an error and we can figure out why.
// This is preferable to casting or disabling TypeScript altogether in order to
// avoid syntax errors.

// One common example is a regex, where if the regex matches then all of the
// (non-optional) regex groups will also be valid, but TypeScript doesn't know.
class UnreachableCode extends Error {
  constructor() {
    super('This code shouldn\'t be reached');
  }
}

/***/ }),

/***/ 81:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Output strings for now require a field for every language, so this is a
// helper function to generate one for literal numbers.
const numberToOutputString = function (n) {
  const str = n.toString();
  return {
    en: str,
    de: str,
    fr: str,
    ja: str,
    cn: str,
    ko: str
  };
};

// General guidelines:
// * property names should closely match English text
// * use OnPlayer suffix for things with `${player}`
// * use OnTarget suffix for things with `${name}`
// * any other parameters (of which there are none, currently) should use consistent suffixes.
// * the value of each property should be a single object with localized keys
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  aoe: {
    en: 'aoe',
    de: 'AoE',
    fr: 'AoE',
    ja: '全体攻撃',
    cn: 'AoE',
    ko: '전체 공격'
  },
  bigAoe: {
    en: 'big aoe!',
    de: 'Große AoE!',
    fr: 'Grosse AoE !',
    ja: '強力な全体攻撃',
    cn: '大AoE伤害！',
    ko: '강한 전체 공격!'
  },
  bleedAoe: {
    en: 'AoE + Bleed',
    de: 'AoE + Blutung',
    fr: 'AoE + Saignement',
    ja: '全体攻撃 + DoT',
    cn: 'AOE + 流血',
    ko: '전체 공격 + 도트'
  },
  tankBuster: {
    en: 'Tank Buster',
    de: 'Tank buster',
    fr: 'Tank buster',
    ja: 'タンク強攻撃',
    cn: '坦克死刑',
    ko: '탱버'
  },
  miniBuster: {
    en: 'Mini Buster',
    de: 'Kleiner Tankbuster',
    fr: 'Mini Buster',
    ja: 'タンク攻撃',
    cn: '小死刑',
    ko: '약한 탱버'
  },
  tankBusterOnPlayer: {
    en: 'Tank Buster on ${player}',
    de: 'Tank buster auf ${player}',
    fr: 'Tank buster sur ${player}',
    ja: '${player}に強攻撃',
    cn: '死刑 点 ${player}',
    ko: '"${player}" 탱버'
  },
  tankBusterOnYou: {
    en: 'Tank Buster on YOU',
    de: 'Tank buster auf DIR',
    fr: 'Tank buster sur VOUS',
    ja: '自分に強攻撃',
    cn: '死刑点名',
    ko: '탱버 대상자'
  },
  // when there are multiple tankbusters going out
  tankBusters: {
    en: 'Tank Busters',
    de: 'Tank busters',
    fr: 'Tank busters',
    ja: 'タンク強攻撃',
    cn: '坦克死刑',
    ko: '탱버'
  },
  tankCleave: {
    en: 'Tank cleave',
    de: 'Tank Cleave',
    fr: 'Tank cleave',
    ja: 'タンク範囲攻撃',
    cn: '顺劈',
    ko: '광역 탱버'
  },
  tankBusterCleaves: {
    en: 'Tank Buster Cleaves',
    de: 'Tankbuster Cleaves',
    fr: 'Tankbuster cleaves',
    ja: 'MT・ST同時範囲攻撃',
    cn: '双T扇形死刑',
    ko: '동시 광역 탱버'
  },
  tankBusterCleavesOnYou: {
    en: 'Tank Cleaves on YOU',
    de: 'Tank Cleaves auf DIR',
    fr: 'Tank cleaves sur VOUS',
    ja: 'MT・ST同時範囲攻撃(自分対象)',
    cn: '坦克顺劈点名',
    ko: '광역 탱버 대상자'
  },
  avoidTankCleave: {
    en: 'Avoid tank cleave',
    de: 'Tank Cleave ausweichen',
    fr: 'Évitez le tank cleave',
    ja: 'タンク範囲攻撃を避ける',
    cn: '远离顺劈',
    ko: '광역 탱버 피하기'
  },
  avoidTankCleaves: {
    en: 'Avoid Tank Cleaves',
    de: 'Tankbuster Cleaves ausweichen',
    fr: 'Évitez les cleaves (tankbusters)',
    ja: '範囲攻撃を避けて',
    cn: '躲避双T扇形死刑',
    ko: '광역 탱버 피하기'
  },
  tankCleaveOnYou: {
    en: 'Tank cleave on YOU',
    de: 'Tank Cleave aud DIR',
    fr: 'Tank cleave sur VOUS',
    ja: '自分に範囲攻撃',
    cn: '顺劈点名',
    ko: '나에게 광역 탱버'
  },
  sharedTankbuster: {
    en: 'Shared Tank Buster',
    de: 'Geteilter Tankbuster',
    fr: 'Partagez le Tank buster',
    ja: 'タンク頭割り',
    cn: '分摊死刑',
    ko: '쉐어 탱버'
  },
  sharedTankbusterOnYou: {
    en: 'Shared Tank Buster on YOU',
    de: 'geteilter Tankbuster auf DIR',
    fr: 'Tank buster à partager sur VOUS',
    ja: '自分にタンク頭割り',
    cn: '分摊死刑点名',
    ko: '쉐어 탱버 대상자'
  },
  sharedTankbusterOnPlayer: {
    en: 'Shared Tank Buster on ${player}',
    de: 'geteilter Tankbuster on ${player}',
    fr: 'Tank buster à partager sur ${player}',
    ja: '${player} にタンク頭割り',
    cn: '分摊死刑点 ${player}',
    ko: '"${player}" 쉐어 탱버'
  },
  tankSwap: {
    en: 'Tank Swap!',
    de: 'Tankwechsel!',
    fr: 'Tank swap !',
    ja: 'タンクスイッチ!',
    cn: '换T！',
    ko: '탱 교대'
  },
  spread: {
    en: 'Spread',
    de: 'Verteilen',
    fr: 'Dispersez-vous',
    ja: '散開',
    cn: '分散',
    ko: '산개'
  },
  stackMarker: {
    // for stack marker situations
    en: 'Stack',
    de: 'Sammeln',
    fr: 'Packez-vous',
    ja: '頭割り',
    cn: '分摊',
    ko: '쉐어뎀'
  },
  getTogether: {
    // for getting together without stack marker
    en: 'Stack',
    de: 'Sammeln',
    fr: 'Packez-vous',
    ja: '集合',
    cn: '集合',
    ko: '모이기'
  },
  healerGroups: {
    en: 'Healer Groups',
    de: 'Heiler-Gruppen',
    fr: 'Groupes sur les heals',
    ja: 'ヒラに頭割り',
    cn: '治疗分摊组',
    ko: '힐러 그룹 쉐어'
  },
  stackOnYou: {
    en: 'Stack on YOU',
    de: 'Auf DIR sammeln',
    fr: 'Package sur VOUS',
    ja: '自分に頭割り',
    cn: '集合点名',
    ko: '쉐어징 대상자'
  },
  stackOnPlayer: {
    en: 'Stack on ${player}',
    de: 'Auf ${player} sammeln',
    fr: 'Packez-vous sur ${player}',
    ja: '${player}に頭割り',
    cn: '靠近 ${player}集合',
    ko: '"${player}" 쉐어징'
  },
  stackMiddle: {
    en: 'Stack in middle',
    de: 'In der Mitte sammeln',
    fr: 'Packez-vous au milieu',
    ja: '中央で頭割り',
    cn: '中间集合',
    ko: '중앙에서 모이기'
  },
  doritoStack: {
    en: 'Dorito Stack',
    de: 'Mit Marker sammeln',
    fr: 'Packez les marques',
    ja: 'マーカー同士で頭割り',
    cn: '点名集合',
    ko: '징끼리 모이기'
  },
  spreadThenStack: {
    en: 'Spread => Stack',
    de: 'Verteilen => Sammeln',
    fr: 'Dispersion => Package',
    ja: '散開 => 頭割り',
    cn: '分散 => 集合',
    ko: '산개 => 집합'
  },
  stackThenSpread: {
    en: 'Stack => Spread',
    de: 'Sammeln => Verteilen',
    fr: 'Package => Dispersion',
    ja: '頭割り => 散開',
    cn: '集合 => 分散',
    ko: '집합 => 산개'
  },
  drawIn: {
    // Opposite of a knockback.
    en: 'Draw In',
    de: 'Einzug',
    fr: 'Attraction',
    ja: '吸込み',
    cn: '吸引',
    ko: '끌어당김'
  },
  knockback: {
    en: 'Knockback',
    de: 'Rückstoß',
    fr: 'Poussée',
    ja: 'ノックバック',
    cn: '击退',
    ko: '넉백'
  },
  knockbackOnYou: {
    en: 'Knockback on YOU',
    de: 'Rückstoß auf DIR',
    fr: 'Poussée sur VOUS',
    ja: '自分にノックバック',
    cn: '击退点名',
    ko: '넉백징 대상자'
  },
  knockbackOnPlayer: {
    en: 'Knockback on ${player}',
    de: 'Rückstoß auf ${player}',
    fr: 'Poussée sur ${player}',
    ja: '${player}にノックバック',
    cn: '击退点名${player}',
    ko: '"${player}" 넉백징'
  },
  lookTowardsBoss: {
    en: 'Look Towards Boss',
    de: 'Anschauen Boss',
    fr: 'Regardez le boss',
    ja: 'ボスを見る',
    cn: '面向Boss',
    ko: '쳐다보기'
  },
  lookAway: {
    en: 'Look Away',
    de: 'Wegschauen',
    fr: 'Regardez ailleurs',
    ja: 'ボスを見ない',
    cn: '背对Boss',
    ko: '뒤돌기'
  },
  lookAwayFromPlayer: {
    en: 'Look Away from ${player}',
    de: 'Schau weg von ${player}',
    fr: 'Ne regardez pas ${player}',
    ja: '${player}を見ない',
    cn: '背对${player}',
    ko: '${player}에게서 뒤돌기'
  },
  lookAwayFromTarget: {
    en: 'Look Away from ${name}',
    de: 'Schau weg von ${name}',
    fr: 'Ne regardez pas ${name}',
    ja: '${name}を見ない',
    cn: '背对${name}',
    ko: '${name}에게서 뒤돌기'
  },
  getBehind: {
    en: 'Get Behind',
    de: 'Hinter ihn',
    fr: 'Passez derrière',
    ja: '背面へ',
    cn: '去背后',
    ko: '보스 뒤로'
  },
  goFrontOrSides: {
    en: 'Go Front / Sides',
    de: 'Gehe nach Vorne/ zu den Seiten',
    fr: 'Allez Devant / Côtés',
    ja: '前／横へ',
    cn: '去前侧方',
    ko: '보스 후방 피하기'
  },
  goFront: {
    en: 'Go Front',
    de: 'Geh nach vorn',
    fr: 'Allez Devant',
    ja: '前へ',
    cn: '去前面',
    ko: '앞으로'
  },
  // getUnder is used when you have to get into the bosses hitbox
  getUnder: {
    en: 'Get Under',
    de: 'Unter ihn',
    fr: 'En dessous',
    ja: 'ボスに貼り付く',
    cn: '去脚下',
    ko: '보스 아래로'
  },
  // in is more like "get close but maybe even melee range is fine"
  in: {
    en: 'In',
    de: 'Rein',
    fr: 'Intérieur',
    ja: '中へ',
    cn: '靠近',
    ko: '안으로'
  },
  // out means get far away
  out: {
    en: 'Out',
    de: 'Raus',
    fr: 'Extérieur',
    ja: '外へ',
    cn: '远离',
    ko: '밖으로'
  },
  outOfMelee: {
    en: 'Out of melee',
    de: 'Raus aus Nahkampf',
    fr: 'Sortez de la mêlée',
    ja: '近接の範囲から離れる',
    cn: '离开近战距离',
    ko: '근접범위 밖으로'
  },
  inThenOut: {
    en: 'In => out',
    de: 'Rein, dann raus',
    fr: 'Intérieur, puis extérieur',
    ja: '中 => 外',
    cn: '先靠近，再远离',
    ko: '안으로 => 밖으로'
  },
  outThenIn: {
    en: 'Out => in',
    de: 'Raus, dann rein',
    fr: 'Extérieur, puis intérieur',
    ja: '外 => 中',
    cn: '先远离，再靠近',
    ko: '밖으로 => 안으로'
  },
  backThenFront: {
    en: 'Back => Front',
    de: 'Nach Hinten, danach nach Vorne',
    fr: 'Derrière puis devant',
    ja: '後ろ => 前',
    cn: '后 => 前',
    ko: '뒤로 => 앞으로'
  },
  frontThenBack: {
    en: 'Front => Back',
    de: 'Nach Vorne, danach nach Hinten',
    fr: 'Devant puis derrière',
    ja: '前 => 後ろ',
    cn: '前 => 后',
    ko: '앞으로 => 뒤로'
  },
  goIntoMiddle: {
    en: 'Get Middle',
    de: 'in die Mitte gehen',
    fr: 'Allez au milieu',
    ja: '中へ',
    cn: '去中间',
    ko: '중앙으로'
  },
  front: {
    en: 'Front',
    de: 'Vorne',
    fr: 'Devant',
    ja: '前',
    cn: '前',
    ko: '앞'
  },
  back: {
    en: 'Back',
    de: 'Hinten',
    fr: 'Derrière',
    ja: '後ろ',
    cn: '后',
    ko: '뒤'
  },
  right: {
    en: 'Right',
    de: 'Rechts',
    fr: 'À droite',
    ja: '右へ',
    cn: '右',
    ko: '오른쪽'
  },
  left: {
    en: 'Left',
    de: 'Links',
    fr: 'À gauche',
    ja: '左へ',
    cn: '左',
    ko: '왼쪽'
  },
  getLeftAndWest: {
    en: '<= Get Left/West',
    de: '<= Nach Links/Westen',
    fr: '<= Allez à Gauche/Ouest',
    ja: '<= 左/西へ',
    cn: '<= 去左/西边',
    ko: '<= 왼쪽으로'
  },
  getRightAndEast: {
    en: 'Get Right/East =>',
    de: 'Nach Rechts/Osten =>',
    fr: 'Allez à Droite/Est =>',
    ja: '右/東へ =>',
    cn: '去右/东边 =>',
    ko: '오른쪽으로 =>'
  },
  leftThenRight: {
    en: 'Left => Right',
    de: 'Links => Rechts',
    fr: 'À gauche => À droite',
    ja: '左 => 右',
    cn: '左 => 右',
    ko: '왼쪽 => 오른쪽'
  },
  rightThenLeft: {
    en: 'Right => Left',
    de: 'Rechts => Links',
    fr: 'À droite => À gauche',
    ja: '右 => 左',
    cn: '右 => 左',
    ko: '오른쪽 => 왼쪽'
  },
  goFrontBack: {
    en: 'Go Front/Back',
    de: 'Geh nach Vorne/Hinten',
    fr: 'Allez Devant/Derrière',
    ja: '縦へ',
    cn: '去前后',
    ko: '앞/뒤로'
  },
  sides: {
    en: 'Sides',
    de: 'Seiten',
    fr: 'Côtés',
    ja: '横へ',
    cn: '去侧面',
    ko: '양옆으로'
  },
  middle: {
    en: 'Middle',
    de: 'Mitte',
    fr: 'Milieu',
    ja: '中へ',
    cn: '中间',
    ko: '중앙'
  },
  clockwise: {
    en: 'Clockwise',
    de: 'Im Uhrzeigersinn',
    fr: 'Sens horaire',
    ja: '時針回り',
    cn: '顺时针',
    ko: '시계방향'
  },
  counterclockwise: {
    en: 'Counter-clock',
    de: 'Gegen den Uhrzeigersinn',
    fr: 'Anti-horaire',
    ja: '反時針回り',
    cn: '逆时针',
    ko: '반시계방향'
  },
  // killAdds is used for adds that will always be available
  killAdds: {
    en: 'Kill adds',
    de: 'Adds besiegen',
    fr: 'Tuez les adds',
    ja: '雑魚から倒して',
    cn: '击杀小怪',
    ko: '쫄 잡기'
  },
  // killExtraAdd is used for adds that appear if a mechanic was not played correctly
  killExtraAdd: {
    en: 'Kill Extra Add',
    de: 'Add besiegen',
    fr: 'Tuez l\'add',
    ja: '雑魚から倒して',
    cn: '击杀小怪',
    ko: '쫄 잡기'
  },
  awayFromFront: {
    en: 'Away From Front',
    de: 'Weg von Vorne',
    fr: 'Éloignez-vous du devant',
    ja: '前方から離れる',
    cn: '远离正面',
    ko: '보스 전방 피하기'
  },
  sleepTarget: {
    en: 'Sleep ${name}',
    de: 'Schlaf auf ${name}',
    fr: 'Sommeil sur ${name}',
    ja: '${name} にスリプル',
    cn: '催眠 ${name}',
    ko: '${name} 슬리플'
  },
  stunTarget: {
    en: 'Stun ${name}',
    de: 'Betäubung auf ${name}',
    fr: 'Étourdissez ${name}',
    ja: '${name} にスタン',
    cn: '眩晕 ${name}',
    ko: '${name}기절'
  },
  interruptTarget: {
    en: 'interrupt ${name}',
    de: 'unterbreche ${name}',
    fr: 'Interrompez ${name}',
    ja: '${name} に沈黙',
    cn: '打断${name}',
    ko: '${name}기술 시전 끊기'
  },
  preyOnYou: {
    en: 'Prey on YOU',
    de: 'Marker auf DIR',
    fr: 'Marquage sur VOUS',
    ja: '自分に捕食',
    cn: '掠食点名',
    ko: '홍옥징 대상자'
  },
  preyOnPlayer: {
    en: 'Prey on ${player}',
    de: 'Marker auf ${player}',
    fr: 'Marquage sur ${player}',
    ja: '${player}に捕食',
    cn: '掠食点名${player}',
    ko: '"${player}" 홍옥징'
  },
  awayFromGroup: {
    en: 'Away from Group',
    de: 'Weg von der Gruppe',
    fr: 'Éloignez-vous du groupe',
    ja: '外へ',
    cn: '远离人群',
    ko: '다른 사람들과 떨어지기'
  },
  awayFromPlayer: {
    en: 'Away from ${player}',
    de: 'Weg von ${player}',
    fr: 'Éloignez-vous de ${player}',
    ja: '${player}から離れる',
    cn: '远离${player}',
    ko: '"${player}"에게서 멀어지기'
  },
  meteorOnYou: {
    en: 'Meteor on YOU',
    de: 'Meteor auf DIR',
    fr: 'Météore sur VOUS',
    ja: '自分にメテオ',
    cn: '陨石点名',
    ko: '나에게 메테오징'
  },
  stopMoving: {
    en: 'Stop Moving!',
    de: 'Bewegung stoppen!',
    fr: 'Ne bougez pas !',
    ja: '移動禁止！',
    cn: '停止移动！',
    ko: '이동 멈추기!'
  },
  stopEverything: {
    en: 'Stop Everything!',
    de: 'Stoppe Alles!',
    fr: 'Arrêtez tout !',
    ja: '行動禁止！',
    cn: '停止行动！',
    ko: '행동 멈추기!'
  },
  moveAway: {
    // move away to dodge aoes
    en: 'Move!',
    de: 'Bewegen!',
    fr: 'Bougez !',
    ja: '避けて！',
    cn: '快躲开！',
    ko: '이동하기!'
  },
  moveAround: {
    // move around (e.g. jumping) to avoid being frozen
    en: 'Move!',
    de: 'Bewegen!',
    fr: 'Bougez !',
    ja: '動く！',
    cn: '快动！',
    ko: '움직이기!'
  },
  breakChains: {
    en: 'Break chains',
    de: 'Kette zerbrechen',
    fr: 'Brisez les chaines',
    ja: '線を切る',
    cn: '切断连线',
    ko: '선 끊기'
  },
  moveChainsTogether: {
    en: 'Move chains together',
    de: 'Ketten zusammen bewegen',
    fr: 'Bougez les chaines ensemble',
    ja: '線同士で一緒に移動',
    cn: '连线一起移动',
    ko: '선 붙어서 같이 움직이기'
  },
  earthshakerOnYou: {
    en: 'Earth Shaker on YOU',
    de: 'Erdstoß auf DIR',
    fr: 'Marque de terre sur VOUS',
    ja: '自分にアースシェイカー',
    cn: '大地摇动点名',
    ko: '어스징 대상자'
  },
  wakeUp: {
    en: 'WAKE UP',
    de: 'AUFWACHEN',
    fr: 'RÉVEILLE-TOI',
    ja: '目を覚まして！',
    cn: '醒醒！动一动！！',
    ko: '일어나세요!'
  },
  closeTethersWithPlayer: {
    en: 'Close Tethers (${player})',
    de: 'Nahe Verbindungen (${player})',
    fr: 'Liens proches avec (${player})',
    ja: '${player}に近づく',
    cn: '靠近连线 (${player})',
    ko: '상대와 가까이 붙기 (${player})'
  },
  farTethersWithPlayer: {
    en: 'Far Tethers (${player})',
    de: 'Entfernte Verbindungen (${player})',
    fr: 'Liens éloignés avec (${player})',
    ja: ' (${player})から離れる',
    cn: '远离连线 (${player})',
    ko: '상대와 떨어지기 (${player})'
  },
  getTowers: {
    en: 'Get Towers',
    de: 'Türme nehmen',
    fr: 'Allez dans les tours',
    ja: '塔を踏む',
    cn: '踩塔',
    ko: '기둥 들어가기'
  },
  unknown: {
    en: '???',
    de: '???',
    fr: '???',
    ja: '???',
    cn: '???',
    ko: '???'
  },
  north: {
    en: 'North',
    de: 'Norden',
    fr: 'Nord',
    ja: '北',
    cn: '上(北)',
    ko: '북쪽'
  },
  south: {
    en: 'South',
    de: 'Süden',
    fr: 'Sud',
    ja: '南',
    cn: '下(南)',
    ko: '남쪽'
  },
  east: {
    en: 'East',
    de: 'Osten',
    fr: 'Est',
    ja: '東',
    cn: '右(东)',
    ko: '동쪽'
  },
  west: {
    en: 'West',
    de: 'Westen',
    fr: 'Ouest',
    ja: '西',
    cn: '左(西)',
    ko: '서쪽'
  },
  northwest: {
    en: 'Northwest',
    de: 'Nordwesten',
    fr: 'Nord-Ouest',
    ja: '北西',
    cn: '左上(西北)',
    ko: '북서쪽'
  },
  northeast: {
    en: 'Northeast',
    de: 'Nordosten',
    fr: 'Nord-Est',
    ja: '北東',
    cn: '右上(东北)',
    ko: '북동쪽'
  },
  southwest: {
    en: 'Southwest',
    de: 'Südwesten',
    fr: 'Sud-Ouest',
    ja: '南西',
    cn: '左下(西南)',
    ko: '남서쪽'
  },
  southeast: {
    en: 'Southeast',
    de: 'Südosten',
    fr: 'Sud-Est',
    ja: '南東',
    cn: '右下(东南)',
    ko: '남동쪽'
  },
  dirN: {
    en: 'N',
    de: 'N',
    fr: 'N',
    ja: '北',
    cn: '上(北)',
    ko: '북'
  },
  dirS: {
    en: 'S',
    de: 'S',
    fr: 'S',
    ja: '南',
    cn: '下(南)',
    ko: '남'
  },
  dirE: {
    en: 'E',
    de: 'O',
    fr: 'E',
    ja: '東',
    cn: '右(东)',
    ko: '동'
  },
  dirW: {
    en: 'W',
    de: 'W',
    fr: 'O',
    ja: '西',
    cn: '左(西)',
    ko: '서'
  },
  dirNW: {
    en: 'NW',
    de: 'NW',
    fr: 'NO',
    ja: '北西',
    cn: '左上(西北)',
    ko: '북서'
  },
  dirNE: {
    en: 'NE',
    de: 'NO',
    fr: 'NE',
    ja: '北東',
    cn: '右上(东北)',
    ko: '북동'
  },
  dirSW: {
    en: 'SW',
    de: 'SW',
    fr: 'SO',
    ja: '南西',
    cn: '左下(西南)',
    ko: '남서'
  },
  dirSE: {
    en: 'SE',
    de: 'SO',
    fr: 'SE',
    ja: '南東',
    cn: '右下(东南)',
    ko: '남동'
  },
  dirNNE: {
    en: 'NNE',
    de: 'NNO',
    fr: 'NNE',
    ja: '北北東(1時)',
    cn: '上偏右(北偏东)',
    ko: '1시'
  },
  dirENE: {
    en: 'ENE',
    de: 'ONO',
    fr: 'ENE',
    ja: '東北東(2時)',
    cn: '右偏上(东偏北)',
    ko: '2시'
  },
  dirESE: {
    en: 'ESE',
    de: 'OSO',
    fr: 'ESE',
    ja: '東南東(4時)',
    cn: '右偏下(东偏南)',
    ko: '4시'
  },
  dirSSE: {
    en: 'SSE',
    de: 'SSO',
    fr: 'SSE',
    ja: '南南東(5時)',
    cn: '下偏右(南偏东)',
    ko: '5시'
  },
  dirSSW: {
    en: 'SSW',
    de: 'SSW',
    fr: 'SSO',
    ja: '南南西(7時)',
    cn: '下偏左(南偏西)',
    ko: '7시'
  },
  dirWSW: {
    en: 'WSW',
    de: 'WSW',
    fr: 'OSO',
    ja: '西南西(8時)',
    cn: '左偏下(西偏南)',
    ko: '8시'
  },
  dirWNW: {
    en: 'WNW',
    de: 'WNW',
    fr: 'ONO',
    ja: '西北西(10時)',
    cn: '左偏上(西偏北)',
    ko: '10시'
  },
  dirNNW: {
    en: 'NNW',
    de: 'NNW',
    fr: 'NNO',
    ja: '北北西(11時)',
    cn: '上偏左(北偏西)',
    ko: '11시'
  },
  tank: {
    en: 'Tank',
    de: 'Tank',
    fr: 'Tank',
    ja: 'タンク',
    cn: '坦克',
    ko: '탱'
  },
  healer: {
    en: 'Healer',
    de: 'Heiler',
    fr: 'Healer',
    ja: 'ヒーラー',
    cn: '治疗',
    ko: '힐'
  },
  dps: {
    en: 'DPS',
    de: 'DPS',
    fr: 'DPS',
    ja: 'DPS',
    cn: 'DPS',
    ko: '딜러'
  },
  // Literal numbers.
  num0: numberToOutputString(0),
  num1: numberToOutputString(1),
  num2: numberToOutputString(2),
  num3: numberToOutputString(3),
  num4: numberToOutputString(4),
  num5: numberToOutputString(5),
  num6: numberToOutputString(6),
  num7: numberToOutputString(7),
  num8: numberToOutputString(8),
  num9: numberToOutputString(9)
});

/***/ }),

/***/ 959:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PS": () => (/* binding */ addOverlayListener),
/* harmony export */   "ae": () => (/* binding */ callOverlayHandler),
/* harmony export */   "cB": () => (/* binding */ setOverlayHandlerOverride)
/* harmony export */ });
/* unused harmony exports dispatchOverlayEvent, removeOverlayListener, init */
// OverlayPlugin API setup

let inited = false;
let wsUrl = null;
let ws = null;
let queue = [];
let rseqCounter = 0;
const responsePromises = {};
const subscribers = {};
const sendMessage = (msg, cb) => {
  if (ws) {
    if (queue) queue.push(msg);else ws.send(JSON.stringify(msg));
  } else {
    if (queue) queue.push([msg, cb]);else window.OverlayPluginApi.callHandler(JSON.stringify(msg), cb);
  }
};
const processEvent = msg => {
  init();
  const subs = subscribers[msg.type];
  subs?.forEach(sub => {
    try {
      sub(msg);
    } catch (e) {
      console.error(e);
    }
  });
};
const dispatchOverlayEvent = processEvent;
const addOverlayListener = (event, cb) => {
  init();
  if (!subscribers[event]) {
    subscribers[event] = [];
    if (!queue) {
      sendMessage({
        call: 'subscribe',
        events: [event]
      });
    }
  }
  subscribers[event]?.push(cb);
};
const removeOverlayListener = (event, cb) => {
  init();
  if (subscribers[event]) {
    const list = subscribers[event];
    const pos = list?.indexOf(cb);
    if (pos !== undefined && pos > -1) list?.splice(pos, 1);
  }
};
const callOverlayHandlerInternal = (_msg
// eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  init();
  const msg = {
    ..._msg,
    rseq: 0
  };
  let p;
  if (ws) {
    msg.rseq = rseqCounter++;
    p = new Promise((resolve, reject) => {
      responsePromises[msg.rseq] = {
        resolve: resolve,
        reject: reject
      };
    });
    sendMessage(msg);
  } else {
    p = new Promise((resolve, reject) => {
      sendMessage(msg, data => {
        if (data === null) {
          resolve(data);
          return;
        }
        const parsed = JSON.parse(data);
        if (parsed['$error']) reject(parsed);else resolve(parsed);
      });
    });
  }
  return p;
};
const callOverlayHandlerOverrideMap = {};
const callOverlayHandler = (_msg
// eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  init();

  // If this `as` is incorrect, then it will not find an override.
  // TODO: we could also replace this with a type guard.
  const type = _msg.call;
  const callFunc = callOverlayHandlerOverrideMap[type] ?? callOverlayHandlerInternal;

  // The `IOverlayHandler` type guarantees that parameters/return type match
  // one of the overlay handlers.  The OverrideMap also only stores functions
  // that match by the discriminating `call` field, and so any overrides
  // should be correct here.
  // eslint-disable-next-line max-len
  // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument
  return callFunc(_msg);
};
const setOverlayHandlerOverride = (type, override) => {
  if (!override) {
    delete callOverlayHandlerOverrideMap[type];
    return;
  }
  callOverlayHandlerOverrideMap[type] = override;
};
const init = () => {
  if (inited) return;
  if (typeof window !== 'undefined') {
    wsUrl = new URLSearchParams(window.location.search).get('OVERLAY_WS');
    if (wsUrl !== null) {
      const connectWs = function (wsUrl) {
        ws = new WebSocket(wsUrl);
        ws.addEventListener('error', e => {
          console.error(e);
        });
        ws.addEventListener('open', () => {
          console.log('Connected!');
          const q = queue ?? [];
          queue = null;
          sendMessage({
            call: 'subscribe',
            events: Object.keys(subscribers)
          });
          for (const msg of q) {
            if (!Array.isArray(msg)) sendMessage(msg);
          }
        });
        ws.addEventListener('message', _msg => {
          try {
            if (typeof _msg.data !== 'string') {
              console.error('Invalid message data received: ', _msg);
              return;
            }
            const msg = JSON.parse(_msg.data);
            const promiseFuncs = msg?.rseq !== undefined ? responsePromises[msg.rseq] : undefined;
            if (msg.rseq !== undefined && promiseFuncs) {
              if (msg['$error']) promiseFuncs.reject(msg);else promiseFuncs.resolve(msg);
              delete responsePromises[msg.rseq];
            } else {
              processEvent(msg);
            }
          } catch (e) {
            console.error('Invalid message received: ', _msg);
            return;
          }
        });
        ws.addEventListener('close', () => {
          queue = null;
          console.log('Trying to reconnect...');
          // Don't spam the server with retries.
          window.setTimeout(() => {
            connectWs(wsUrl);
          }, 300);
        });
      };
      connectWs(wsUrl);
    } else {
      const waitForApi = function () {
        if (!window.OverlayPluginApi?.ready) {
          window.setTimeout(waitForApi, 300);
          return;
        }
        const q = queue ?? [];
        queue = null;
        window.__OverlayCallback = processEvent;
        sendMessage({
          call: 'subscribe',
          events: Object.keys(subscribers)
        });
        for (const item of q) {
          if (Array.isArray(item)) sendMessage(item[0], item[1]);
        }
      };
      waitForApi();
    }

    // Here the OverlayPlugin API is registered to the window object,
    // but this is mainly for backwards compatibility.For cactbot's built-in files,
    // it is recommended to use the various functions exported in resources/overlay_plugin_api.ts.
    window.addOverlayListener = addOverlayListener;
    window.removeOverlayListener = removeOverlayListener;
    window.callOverlayHandler = callOverlayHandler;
    window.dispatchOverlayEvent = dispatchOverlayEvent;
  }
  inited = true;
};

/***/ }),

/***/ 402:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ Regexes)
/* harmony export */ });
/* unused harmony export buildRegex */
/* harmony import */ var _netlog_defs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/* harmony import */ var _not_reached__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62);


const separator = ':';
const matchDefault = '[^:]*';
const matchWithColonsDefault = '(?:[^:]|: )*?';
const fieldsWithPotentialColons = ['effect', 'ability'];
const defaultParams = (type, version, include) => {
  const logType = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type];
  if (include === undefined) {
    include = Object.keys(logType.fields);
    if ('repeatingFields' in logType) {
      include.push(logType.repeatingFields.label);
    }
  }
  const params = {};
  const firstOptionalField = logType.firstOptionalField;
  for (const [prop, index] of Object.entries(logType.fields)) {
    if (!include.includes(prop)) continue;
    const param = {
      field: prop,
      optional: firstOptionalField !== undefined && index >= firstOptionalField
    };
    if (prop === 'type') param.value = logType.type;
    params[index] = param;
  }
  if ('repeatingFields' in logType && include.includes(logType.repeatingFields.label)) {
    params[logType.repeatingFields.startingIndex] = {
      field: logType.repeatingFields.label,
      optional: firstOptionalField !== undefined && logType.repeatingFields.startingIndex >= firstOptionalField,
      repeating: true,
      repeatingKeys: [...logType.repeatingFields.names],
      sortKeys: logType.repeatingFields.sortKeys,
      primaryKey: logType.repeatingFields.primaryKey,
      possibleKeys: [...logType.repeatingFields.possibleKeys]
    };
  }
  return params;
};
const isRepeatingField = (repeating, value) => {
  if (repeating !== true) return false;
  // Allow excluding the field to match for extraction
  if (value === undefined) return true;
  if (!Array.isArray(value)) return false;
  for (const e of value) {
    if (typeof e !== 'object') return false;
  }
  return true;
};
const parseHelper = (params, defKey, fields) => {
  params = params ?? {};
  const validFields = [];
  for (const index in fields) {
    const field = fields[index];
    if (field) validFields.push(field.field);
  }
  Regexes.validateParams(params, defKey, ['capture', ...validFields]);

  // Find the last key we care about, so we can shorten the regex if needed.
  const capture = Regexes.trueIfUndefined(params.capture);
  const fieldKeys = Object.keys(fields).sort((a, b) => parseInt(a) - parseInt(b));
  let maxKeyStr;
  if (capture) {
    const keys = [];
    for (const key in fields) keys.push(key);
    let tmpKey = keys.pop();
    if (tmpKey === undefined) {
      maxKeyStr = fieldKeys[fieldKeys.length - 1] ?? '0';
    } else {
      while (fields[tmpKey]?.optional && !((fields[tmpKey]?.field ?? '') in params)) tmpKey = keys.pop();
      maxKeyStr = tmpKey ?? '0';
    }
  } else {
    maxKeyStr = '0';
    for (const key in fields) {
      const value = fields[key] ?? {};
      if (typeof value !== 'object') continue;
      const fieldName = fields[key]?.field;
      if (fieldName !== undefined && fieldName in params) maxKeyStr = key;
    }
  }
  const maxKey = parseInt(maxKeyStr);

  // Special case for Ability to handle aoe and non-aoe.
  const abilityMessageType = `(?:${_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].Ability.messageType */ .Z.Ability.messageType}|${_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].NetworkAOEAbility.messageType */ .Z.NetworkAOEAbility.messageType})`;
  const abilityHexCode = '(?:15|16)';

  // Build the regex from the fields.
  const prefix = defKey !== 'Ability' ? _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z[defKey].messageType : abilityMessageType;

  // Hex codes are a minimum of two characters.  Abilities are special because
  // they need to support both 0x15 and 0x16.
  const typeAsHex = parseInt(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z[defKey].type).toString(16).toUpperCase();
  const defaultHexCode = typeAsHex.length < 2 ? `00${typeAsHex}`.slice(-2) : typeAsHex;
  const hexCode = defKey !== 'Ability' ? defaultHexCode : abilityHexCode;
  let str = '';
  if (capture) str += `(?<timestamp>\\y{Timestamp}) ${prefix} (?<type>${hexCode})`;else str += `\\y{Timestamp} ${prefix} ${hexCode}`;
  let lastKey = 1;
  for (const keyStr in fields) {
    const parseField = fields[keyStr];
    if (parseField === undefined) continue;
    const fieldName = parseField.field;

    // Regex handles these manually above in the `str` initialization.
    if (fieldName === 'timestamp' || fieldName === 'type') continue;
    const key = parseInt(keyStr);
    // Fill in blanks.
    const missingFields = key - lastKey - 1;
    if (missingFields === 1) str += `${separator}${matchDefault}`;else if (missingFields > 1) str += `(?:${separator}${matchDefault}){${missingFields}}`;
    lastKey = key;
    str += separator;
    if (typeof parseField !== 'object') throw new Error(`${defKey}: invalid value: ${JSON.stringify(parseField)}`);
    const fieldDefault = fieldName !== undefined && fieldsWithPotentialColons.includes(fieldName) ? matchWithColonsDefault : matchDefault;
    const defaultFieldValue = parseField.value?.toString() ?? fieldDefault;
    const fieldValue = params[fieldName];
    if (isRepeatingField(fields[keyStr]?.repeating, fieldValue)) {
      const repeatingFieldsSeparator = '(?:$|:)';
      let repeatingArray = fieldValue;
      const sortKeys = fields[keyStr]?.sortKeys;
      const primaryKey = fields[keyStr]?.primaryKey;
      const possibleKeys = fields[keyStr]?.possibleKeys;

      // primaryKey is required if this is a repeating field per typedef in netlog_defs.ts
      // Same with possibleKeys
      if (primaryKey === undefined || possibleKeys === undefined) throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .$();

      // Allow sorting if needed
      if (sortKeys) {
        // Also sort our valid keys list
        possibleKeys.sort((left, right) => left.toLowerCase().localeCompare(right.toLowerCase()));
        if (repeatingArray !== undefined) {
          repeatingArray = [...repeatingArray].sort((left, right) => {
            // We check the validity of left/right because they're user-supplied
            if (typeof left !== 'object' || left[primaryKey] === undefined) {
              console.warn('Invalid argument passed to trigger:', left);
              return 0;
            }
            const leftValue = left[primaryKey];
            if (typeof leftValue !== 'string' || !possibleKeys?.includes(leftValue)) {
              console.warn('Invalid argument passed to trigger:', left);
              return 0;
            }
            if (typeof right !== 'object' || right[primaryKey] === undefined) {
              console.warn('Invalid argument passed to trigger:', right);
              return 0;
            }
            const rightValue = right[primaryKey];
            if (typeof rightValue !== 'string' || !possibleKeys?.includes(rightValue)) {
              console.warn('Invalid argument passed to trigger:', right);
              return 0;
            }
            return leftValue.toLowerCase().localeCompare(rightValue.toLowerCase());
          });
        }
      }
      const anonReps = repeatingArray;
      // Loop over our possible keys
      // Build a regex that can match any possible key with required values substituted in
      possibleKeys.forEach(possibleKey => {
        const rep = anonReps?.find(rep => primaryKey in rep && rep[primaryKey] === possibleKey);
        let fieldRegex = '';
        // Rather than looping over the keys defined on the object,
        // loop over the base type def's keys. This enforces the correct order.
        fields[keyStr]?.repeatingKeys?.forEach(key => {
          let val = rep?.[key];
          if (rep === undefined || !(key in rep)) {
            // If we don't have a value for this key
            // insert a placeholder, unless it's the primary key
            if (key === primaryKey) val = possibleKey;else val = matchDefault;
          }
          if (typeof val !== 'string') {
            if (!Array.isArray(val)) val = matchDefault;else if (val.length < 1) val = matchDefault;else if (val.some(v => typeof v !== 'string')) val = matchDefault;
          }
          fieldRegex += Regexes.maybeCapture(key === primaryKey ? false : capture,
          // All capturing groups are `fieldName` + `possibleKey`, e.g. `pairIsCasting1`
          fieldName + possibleKey, val, defaultFieldValue) + repeatingFieldsSeparator;
        });
        if (fieldRegex.length > 0) {
          str += `(?:${fieldRegex})${rep !== undefined ? '' : '?'}`;
        }
      });
    } else if (fields[keyStr]?.repeating) {
      // If this is a repeating field but the actual value is empty or otherwise invalid,
      // don't process further. We can't use `continue` in the above block because that
      // would skip the early-out break at the end of the loop.
    } else {
      if (fieldName !== undefined) {
        str += Regexes.maybeCapture(
        // more accurate type instead of `as` cast
        // maybe this function needs a refactoring
        capture, fieldName, fieldValue, defaultFieldValue);
      } else {
        str += fieldValue;
      }
    }

    // Stop if we're not capturing and don't care about future fields.
    if (key >= maxKey) break;
  }
  str += '(?:$|:)';
  return Regexes.parse(str);
};
const buildRegex = (type, params) => {
  return parseHelper(params, type, defaultParams(type, Regexes.logVersion));
};
class Regexes {
  static logVersion = 'latest';

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-20-0x14-networkstartscasting
   */
  static startsUsing(params) {
    return buildRegex('StartsUsing', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   */
  static ability(params) {
    return buildRegex('Ability', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   *
   * @deprecated Use `ability` instead
   */
  static abilityFull(params) {
    return this.ability(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-27-0x1b-networktargeticon-head-marker
   */
  static headMarker(params) {
    return buildRegex('HeadMarker', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */
  static addedCombatant(params) {
    return parseHelper(params, 'AddedCombatant', defaultParams('AddedCombatant', Regexes.logVersion, ['type', 'timestamp', 'id', 'name']));
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */
  static addedCombatantFull(params) {
    return buildRegex('AddedCombatant', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-04-0x04-removecombatant
   */
  static removingCombatant(params) {
    return buildRegex('RemovedCombatant', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-26-0x1a-networkbuff
   */
  static gainsEffect(params) {
    return buildRegex('GainsEffect', params);
  }

  /**
   * Prefer gainsEffect over this function unless you really need extra data.
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-38-0x26-networkstatuseffects
   */
  static statusEffectExplicit(params) {
    return buildRegex('StatusEffect', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-30-0x1e-networkbuffremove
   */
  static losesEffect(params) {
    return buildRegex('LosesEffect', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-35-0x23-networktether
   */
  static tether(params) {
    return buildRegex('Tether', params);
  }

  /**
   * 'target' was defeated by 'source'
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-25-0x19-networkdeath
   */
  static wasDefeated(params) {
    return buildRegex('WasDefeated', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-24-0x18-networkdot
   */
  static networkDoT(params) {
    return buildRegex('NetworkDoT', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static echo(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0038';
    return Regexes.gameLog(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static dialog(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0044';
    return Regexes.gameLog(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static message(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0839';
    return Regexes.gameLog(params);
  }

  /**
   * fields: code, name, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static gameLog(params) {
    return buildRegex('GameLog', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static gameNameLog(params) {
    // Backwards compatability.
    return Regexes.gameLog(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-12-0x0c-playerstats
   */
  static statChange(params) {
    return buildRegex('PlayerStats', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-01-0x01-changezone
   */
  static changeZone(params) {
    return buildRegex('ChangeZone', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-33-0x21-network6d-actor-control
   */
  static network6d(params) {
    return buildRegex('ActorControl', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-34-0x22-networknametoggle
   */
  static nameToggle(params) {
    return buildRegex('NameToggle', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-40-0x28-map
   */
  static map(params) {
    return buildRegex('Map', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-41-0x29-systemlogmessage
   */
  static systemLogMessage(params) {
    return buildRegex('SystemLogMessage', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-257-0x101-mapeffect
   */
  static mapEffect(params) {
    return buildRegex('MapEffect', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-261-0x105-combatantmemory
   */
  static combatantMemory(params) {
    return buildRegex('CombatantMemory', params);
  }

  /**
   * Helper function for building named capture group
   */
  static maybeCapture(capture, name, value, defaultValue) {
    if (value === undefined) value = defaultValue ?? matchDefault;
    value = Regexes.anyOf(value);
    return capture ? Regexes.namedCapture(name, value) : value;
  }
  static optional(str) {
    return `(?:${str})?`;
  }

  // Creates a named regex capture group named |name| for the match |value|.
  static namedCapture(name, value) {
    if (name.includes('>')) console.error(`"${name}" contains ">".`);
    if (name.includes('<')) console.error(`"${name}" contains ">".`);
    return `(?<${name}>${value})`;
  }

  /**
   * Convenience for turning multiple args into a unioned regular expression.
   * anyOf(x, y, z) or anyOf([x, y, z]) do the same thing, and return (?:x|y|z).
   * anyOf(x) or anyOf(x) on its own simplifies to just x.
   * args may be strings or RegExp, although any additional markers to RegExp
   * like /insensitive/i are dropped.
   */
  static anyOf(...args) {
    const anyOfArray = array => {
      const [elem] = array;
      if (elem !== undefined && array.length === 1) return `${elem instanceof RegExp ? elem.source : elem}`;
      return `(?:${array.map(elem => elem instanceof RegExp ? elem.source : elem).join('|')})`;
    };
    let array = [];
    const [firstArg] = args;
    if (args.length === 1) {
      if (typeof firstArg === 'string' || firstArg instanceof RegExp) array = [firstArg];else if (Array.isArray(firstArg)) array = firstArg;else array = [];
    } else {
      // TODO: more accurate type instead of `as` cast
      array = args;
    }
    return anyOfArray(array);
  }
  static parse(regexpString) {
    const kCactbotCategories = {
      Timestamp: '^.{14}',
      NetTimestamp: '.{33}',
      NetField: '(?:[^|]*\\|)',
      LogType: '[0-9A-Fa-f]{2}',
      AbilityCode: '[0-9A-Fa-f]{1,8}',
      ObjectId: '[0-9A-F]{8}',
      // Matches any character name (including empty strings which the FFXIV
      // ACT plugin can generate when unknown).
      Name: '(?:[^\\s:|]+(?: [^\\s:|]+)?|)',
      // Floats can have comma as separator in FFXIV plugin output: https://github.com/ravahn/FFXIV_ACT_Plugin/issues/137
      Float: '-?[0-9]+(?:[.,][0-9]+)?(?:E-?[0-9]+)?'
    };

    // All regexes in cactbot are case insensitive.
    // This avoids headaches as things like `Vice and Vanity` turns into
    // `Vice And Vanity`, especially for French and German.  It appears to
    // have a ~20% regex parsing overhead, but at least they work.
    let modifiers = 'i';
    if (regexpString instanceof RegExp) {
      modifiers += (regexpString.global ? 'g' : '') + (regexpString.multiline ? 'm' : '');
      regexpString = regexpString.source;
    }
    regexpString = regexpString.replace(/\\y\{(.*?)\}/g, (match, group) => {
      return kCactbotCategories[group] || match;
    });
    return new RegExp(regexpString, modifiers);
  }

  // Like Regex.Regexes.parse, but force global flag.
  static parseGlobal(regexpString) {
    const regex = Regexes.parse(regexpString);
    let modifiers = 'gi';
    if (regexpString instanceof RegExp) modifiers += regexpString.multiline ? 'm' : '';
    return new RegExp(regex.source, modifiers);
  }
  static trueIfUndefined(value) {
    if (typeof value === 'undefined') return true;
    return !!value;
  }
  static validateParams(f, funcName, params) {
    if (f === null) return;
    if (typeof f !== 'object') return;
    const keys = Object.keys(f);
    for (const key of keys) {
      if (!params.includes(key)) {
        throw new Error(`${funcName}: invalid parameter '${key}'.  ` + `Valid params: ${JSON.stringify(params)}`);
      }
    }
  }
}

/***/ }),

/***/ 469:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n3": () => (/* binding */ Responses),
/* harmony export */   "ug": () => (/* binding */ triggerOutputFunctions)
/* harmony export */ });
/* unused harmony exports severityList, builtInResponseStr, triggerFunctions, triggerTextOutputFunctions, severityMap */
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81);
// This is meant to be used in a trigger as such:
// {
//   id: 'Some tankbuster',
//   regex: Regexes.startsUsing({source: 'Ye Olde Bosse', id: '666'}),
//   condition: Conditions.caresAboutMagical(data),
//   response: Responses.tankbuster(),
// },
//
// Note: Breaking out the condition like this lets people override it if they
// always (or never) want to know about it, rather than hiding the logic inside
// the tankbuster callback with a "is healer" check.
//
// If data.role is used, it should be only to differentiate between alert levels,
// and not whether a message is sent at all.
//
// Although this is not true of `response: ` fields on triggers in general,
// all responses in this file should either return an object or a single
// function that sets outputStrings and returns an object without doing
// anything with data or matches.  See `responses_test.js`.


const severityList = (/* unused pure expression or super */ null && (['info', 'alert', 'alarm']));
const builtInResponseStr = 'cactbot-builtin-response';

// All valid trigger fields.
const triggerFunctions = (/* unused pure expression or super */ null && (['alarmText', 'alertText', 'condition', 'delaySeconds', 'disabled', 'durationSeconds', 'id', 'type', 'infoText', 'preRun', 'promise', 'response', 'run', 'sound', 'soundVolume', 'suppressSeconds', 'tts', 'outputStrings']));

// Trigger fields that can produce text output.
const triggerTextOutputFunctions = ['alarmText', 'alertText', 'infoText', 'response', 'tts'];

// If a trigger has any of these, then it has a visible/audio effect.
const triggerOutputFunctions = [...triggerTextOutputFunctions, 'sound'];
const severityMap = {
  'info': 'infoText',
  'alert': 'alertText',
  'alarm': 'alarmText'
};
const getText = sev => {
  if (!(sev in severityMap)) throw new Error(`Invalid severity: ${sev}.`);
  return severityMap[sev];
};
const defaultInfoText = sev => {
  if (!sev) return 'infoText';
  return getText(sev);
};
const defaultAlertText = sev => {
  if (!sev) return 'alertText';
  return getText(sev);
};
const defaultAlarmText = sev => {
  if (!sev) return 'alarmText';
  return getText(sev);
};
const getTarget = matches => {
  // Often tankbusters can be casted by the boss on the boss.
  // Consider this as "not having a target".
  if (matches.target === matches.source) return;
  // In hunts, sometimes there are too many people for the target
  // to have a name.  Treat this as "no target".
  if (matches.target === '') return;
  return matches.target;
};
const getSource = matches => {
  return matches?.source;
};

// FIXME: make this work for any number of pairs of params
const combineFuncs = function (text1, func1, text2, func2) {
  const obj = {};
  if (text1 !== text2) {
    obj[text1] = func1;
    obj[text2] = func2;
  } else {
    obj[text1] = (data, matches, output) => {
      return func1(data, matches, output) ?? func2(data, matches, output);
    };
  }
  return obj;
};
const isPlayerId = id => {
  return id !== undefined && !id.startsWith('4');
};

// For responses that unconditionally return static text.
const staticResponse = (field, text) => {
  return (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      text: text
    };
    return {
      [field]: (_data, _matches, output) => output.text?.()
    };
  };
};
const Responses = {
  tankBuster: (targetSev, otherSev) => {
    const outputStrings = {
      noTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBuster */ .Z.tankBuster,
      busterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnYou */ .Z.tankBusterOnYou,
      busterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnPlayer */ .Z.tankBusterOnPlayer
    };
    const targetFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target === undefined) {
        if (data.role !== 'tank' && data.role !== 'healer') return;
        return output.noTarget?.();
      }
      if (target === data.me) return output.busterOnYou?.();
    };
    const otherFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target === undefined) {
        if (data.role === 'tank' || data.role === 'healer') return;
        return output.noTarget?.();
      }
      if (target === data.me) return;
      return output.busterOnTarget?.({
        player: data.ShortName(target)
      });
    };
    const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  tankBusterSwap: (busterSev, swapSev) => {
    const outputStrings = {
      tankSwap: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankSwap */ .Z.tankSwap,
      busterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnYou */ .Z.tankBusterOnYou,
      busterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnPlayer */ .Z.tankBusterOnPlayer
    };

    // Note: busterSev and swapSev can be the same priority.
    const tankSwapFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (data.role === 'tank' && target !== data.me) return output.tankSwap?.();
    };
    const busterFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (data.role === 'tank' && target !== data.me) return;
      if (target === data.me) return output.busterOnYou?.();
      return output.busterOnTarget?.({
        player: data.ShortName(target)
      });
    };
    const combined = combineFuncs(defaultAlarmText(swapSev), tankSwapFunc, defaultAlertText(busterSev), busterFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  tankCleave: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      cleaveOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankCleaveOnYou */ .Z.tankCleaveOnYou,
      cleaveNoTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankCleave */ .Z.tankCleave,
      avoidCleave: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].avoidTankCleave */ .Z.avoidTankCleave
    };
    return {
      [defaultInfoText(sev)]: (data, matches, output) => {
        const target = getTarget(matches);
        if (target === data.me) return output.cleaveOnYou?.();
        if (data.role === 'tank' || data.job === 'BLU') {
          // targetless tank cleave
          // BLU players should always get this generic cleave message.
          // We have no robust way to determine whether they have tank Mimicry on,
          // and it's really annoying for a BLU tank to be told to avoid cleaves when they can't.
          return output.cleaveNoTarget?.();
        }
        return output.avoidCleave?.();
      }
    };
  },
  sharedTankBuster: (targetSev, otherSev) => {
    const outputStrings = {
      sharedTankbusterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sharedTankbusterOnYou */ .Z.sharedTankbusterOnYou,
      sharedTankbusterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sharedTankbusterOnPlayer */ .Z.sharedTankbusterOnPlayer,
      sharedTankbuster: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sharedTankbuster */ .Z.sharedTankbuster,
      avoidCleave: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].avoidTankCleave */ .Z.avoidTankCleave
    };
    const targetFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target === undefined) {
        if (data.role !== 'tank' && data.role !== 'healer') return;
        return output.sharedTankbuster?.();
      }
      if (target === data.me) return output.sharedTankbusterOnYou?.();
      if (data.role === 'tank' || data.role === 'healer') return output.sharedTankbusterOnTarget?.({
        player: data.ShortName(target)
      });
    };
    const otherFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target === undefined) {
        if (data.role === 'tank' || data.role === 'healer') return;
        return output.avoidCleave?.();
      }
      if (target === data.me || data.role === 'tank' || data.role === 'healer') return;
      return output.avoidCleave?.();
    };
    const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  miniBuster: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].miniBuster */ .Z.miniBuster),
  aoe: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].aoe */ .Z.aoe),
  bigAoe: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].bigAoe */ .Z.bigAoe),
  bleedAoe: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].bleedAoe */ .Z.bleedAoe),
  spread: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].spread */ .Z.spread),
  // for stack marker situations.
  stackMarker: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackMarker */ .Z.stackMarker),
  // for getting together without stack marker
  getTogether: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getTogether */ .Z.getTogether),
  stackMarkerOn: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      stackOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackOnYou */ .Z.stackOnYou,
      stackOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackOnPlayer */ .Z.stackOnPlayer
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const target = getTarget(matches);
        if (target === data.me) return output.stackOnYou?.();
        return output.stackOnTarget?.({
          player: data.ShortName(target)
        });
      }
    };
  },
  stackMiddle: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackMiddle */ .Z.stackMiddle),
  doritoStack: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].doritoStack */ .Z.doritoStack),
  spreadThenStack: sev => {
    return staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].spreadThenStack */ .Z.spreadThenStack);
  },
  stackThenSpread: sev => {
    return staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackThenSpread */ .Z.stackThenSpread);
  },
  knockback: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockback */ .Z.knockback),
  knockbackOn: (targetSev, otherSev) => {
    const outputStrings = {
      knockbackOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockbackOnYou */ .Z.knockbackOnYou,
      knockbackOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockbackOnPlayer */ .Z.knockbackOnPlayer
    };
    const targetFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target === data.me) return output.knockbackOnYou?.();
    };
    const otherFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target !== data.me) return output.knockbackOnTarget?.({
        player: data.ShortName(target)
      });
    };
    const combined = combineFuncs(defaultInfoText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  drawIn: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].drawIn */ .Z.drawIn),
  lookTowards: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookTowardsBoss */ .Z.lookTowardsBoss),
  lookAway: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAway */ .Z.lookAway),
  lookAwayFromTarget: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      lookAwayFrom: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAwayFromTarget */ .Z.lookAwayFromTarget
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const target = getTarget(matches);
        if (target === data.me) return;
        const name = isPlayerId(matches?.targetId) ? data.ShortName(target) : target;
        return output.lookAwayFrom?.({
          name: name
        });
      }
    };
  },
  lookAwayFromSource: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      lookAwayFrom: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAwayFromTarget */ .Z.lookAwayFromTarget
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const source = getSource(matches);
        if (source === data.me) return;
        const name = isPlayerId(matches?.sourceId) ? data.ShortName(source) : source;
        return output.lookAwayFrom?.({
          name: name
        });
      }
    };
  },
  getBehind: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getBehind */ .Z.getBehind),
  goFrontOrSides: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goFrontOrSides */ .Z.goFrontOrSides),
  // .getUnder() is used when you have to get into the bosses hitbox
  getUnder: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getUnder */ .Z.getUnder),
  // .getIn() is more like "get close but maybe even melee range is fine"
  getIn: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"]["in"] */ .Z["in"]),
  // .getOut() means get far away
  getOut: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].out */ .Z.out),
  outOfMelee: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].outOfMelee */ .Z.outOfMelee),
  getInThenOut: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].inThenOut */ .Z.inThenOut),
  getOutThenIn: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].outThenIn */ .Z.outThenIn),
  getBackThenFront: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].backThenFront */ .Z.backThenFront),
  getFrontThenBack: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].frontThenBack */ .Z.frontThenBack),
  goFront: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goFront */ .Z.goFront),
  goMiddle: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goIntoMiddle */ .Z.goIntoMiddle),
  goRight: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].right */ .Z.right),
  goLeft: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].left */ .Z.left),
  goWest: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getLeftAndWest */ .Z.getLeftAndWest),
  goEast: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getRightAndEast */ .Z.getRightAndEast),
  goLeftThenRight: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].leftThenRight */ .Z.leftThenRight),
  goRightThenLeft: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].rightThenLeft */ .Z.rightThenLeft),
  goFrontBack: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goFrontBack */ .Z.goFrontBack),
  goSides: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sides */ .Z.sides),
  // .killAdds() is used for adds that will always be available
  killAdds: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].killAdds */ .Z.killAdds),
  // .killExtraAdd() is used for adds that appear if a mechanic was not played correctly
  killExtraAdd: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].killExtraAdd */ .Z.killExtraAdd),
  awayFromFront: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].awayFromFront */ .Z.awayFromFront),
  sleep: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      sleep: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sleepTarget */ .Z.sleepTarget
    };
    return {
      [defaultAlertText(sev)]: (_data, matches, output) => {
        const source = getSource(matches);
        return output.sleep?.({
          name: source
        });
      }
    };
  },
  stunOrInterruptIfPossible: sev => {
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = {
        stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stunTarget */ .Z.stunTarget,
        interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].interruptTarget */ .Z.interruptTarget
      };
      return {
        [defaultAlertText(sev)]: (data, matches, output) => {
          const source = getSource(matches);
          if (data.CanSilence()) return output.interrupt?.({
            name: source
          });else if (data.CanStun()) return output.stun?.({
            name: source
          });
        }
      };
    };
  },
  stun: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stunTarget */ .Z.stunTarget
    };
    return {
      [defaultAlertText(sev)]: (_data, matches, output) => {
        const source = getSource(matches);
        return output.stun?.({
          name: source
        });
      }
    };
  },
  stunIfPossible: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stunTarget */ .Z.stunTarget
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const source = getSource(matches);
        if (data.CanStun()) return output.stun?.({
          name: source
        });
      }
    };
  },
  interrupt: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].interruptTarget */ .Z.interruptTarget
    };
    return {
      [defaultAlertText(sev)]: (_data, matches, output) => {
        const source = getSource(matches);
        return output.interrupt?.({
          name: source
        });
      }
    };
  },
  interruptIfPossible: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].interruptTarget */ .Z.interruptTarget
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const source = getSource(matches);
        if (data.CanSilence()) return output.interrupt?.({
          name: source
        });
      }
    };
  },
  preyOn: (targetSev, otherSev) => {
    const outputStrings = {
      preyOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].preyOnYou */ .Z.preyOnYou,
      preyOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].preyOnPlayer */ .Z.preyOnPlayer
    };
    const targetFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (data.me === target) return output.preyOnYou?.();
    };
    const otherFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target !== data.me) return output.preyOnTarget?.({
        player: data.ShortName(target)
      });
    };
    const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  awayFrom: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      awayFromGroup: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].awayFromGroup */ .Z.awayFromGroup,
      awayFromTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].awayFromPlayer */ .Z.awayFromPlayer
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const target = getTarget(matches);
        if (data.me === target) return output.awayFromGroup?.();
        return output.awayFromTarget?.({
          player: data.ShortName(target)
        });
      }
    };
  },
  meteorOnYou: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].meteorOnYou */ .Z.meteorOnYou),
  stopMoving: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stopMoving */ .Z.stopMoving),
  stopEverything: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stopEverything */ .Z.stopEverything),
  // move away to dodge aoes
  moveAway: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].moveAway */ .Z.moveAway),
  // move around (e.g. jumping) to avoid being frozen
  moveAround: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].moveAround */ .Z.moveAround),
  breakChains: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].breakChains */ .Z.breakChains),
  moveChainsTogether: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].moveChainsTogether */ .Z.moveChainsTogether),
  earthshaker: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      earthshaker: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].earthshakerOnYou */ .Z.earthshakerOnYou
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const target = getTarget(matches);
        if (target !== data.me) return;
        return output.earthshaker?.();
      }
    };
  },
  wakeUp: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].wakeUp */ .Z.wakeUp),
  getTowers: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getTowers */ .Z.getTowers)
};

// Don't give `Responses` a type in its declaration so that it can be treated as more strict
// than `ResponsesMap`, but do assert that its type is correct.  This allows callers to know
// which properties are defined in Responses without having to conditionally check for undefined.
const responseMapTypeAssertion = Responses;
// Suppress unused variable warning.
console.assert(responseMapTypeAssertion);

/***/ }),

/***/ 456:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _languages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(619);
/* harmony import */ var _not_reached__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62);
/* harmony import */ var _overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(959);
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(446);
/* harmony import */ var _content_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(873);
/* harmony import */ var _netregexes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(622);
/* harmony import */ var _regexes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(402);
/* harmony import */ var _responses__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(469);
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(81);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(509);
/* harmony import */ var _zone_id__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(588);
/* harmony import */ var _zone_info__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(902);
// TODO: Fix import/order
/* eslint-disable import/order */





// TODO:
// The convention of "import X as _X; const X = _X;" is currently
// being used as a method to workaround for downstream code
// that is running via eval(). Because importing statements do not
// create a variable of the same name, the eval()'d code does not know
// about the import, and thus throws ReferenceErrors.
// Used by downstream eval

const Conditions = _conditions__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z;

const ContentType = _content_type__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z;

const NetRegexes = _netregexes__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .ZP;

const Regexes = _regexes__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z;

const Responses = _responses__WEBPACK_IMPORTED_MODULE_7__/* .Responses */ .n3;

const Outputs = _outputs__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z;

const Util = _util__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z;
const Directions = _util__WEBPACK_IMPORTED_MODULE_9__/* .Directions */ .N;

const ZoneId = _zone_id__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z;

const ZoneInfo = _zone_info__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z;

// Convince TypeScript and eslint that these are used.  TypeScript doesn't have a great way
// to disable individual rules, so this is safer than disabling all rules.
console.assert(Conditions);
console.assert(ContentType);
console.assert(NetRegexes);
console.assert(Regexes);
console.assert(Responses);
console.assert(Outputs);
console.assert(Util);
console.assert(Directions);
console.assert(ZoneId);
console.assert(ZoneInfo);

// TODO: move all of these to config.js?

class UserConfig {
  optionTemplates = {};
  userFileCallbacks = {};
  savedConfig = {};
  getDefaultBaseOptions() {
    return {
      ParserLanguage: 'en',
      ShortLocale: 'en',
      DisplayLanguage: 'en',
      TextAlertsEnabled: true,
      SoundAlertsEnabled: true,
      SpokenAlertsEnabled: false,
      GroupSpokenAlertsEnabled: false,
      SystemInfo: {
        cactbotVersion: '0.0.0.0',
        overlayPluginVersion: '0.0.0.0',
        ffxivPluginVersion: '0.0.0.0',
        actVersion: '0.0.0.0',
        gameRegion: 'International'
      },
      Debug: false
    };
  }
  evalUserFile(content, options) {
    const Options = options;
    console.assert(Options); // Used by eval.

    // This is the one eval cactbot should ever need, which is for handling user files.
    // Because user files can be located anywhere on disk and there's backwards compat
    // issues, it's unlikely that these will be able to be anything but eval forever.
    //
    /* eslint-disable no-eval */
    eval(content);
    /* eslint-enable no-eval */
  }

  registerOptions(overlayName, optionTemplate, userFileCallback) {
    this.optionTemplates[overlayName] = optionTemplate;
    if (userFileCallback) this.userFileCallbacks[overlayName] = userFileCallback;
  }
  sortUserFiles(keys) {
    // Helper data structure for subdirectories.
    const splitKeyMap = {};
    for (const key of keys) splitKeyMap[key] = key.toUpperCase().split(/[/\\]/);

    // Sort paths as a depth-first case-insensitive alphabetical subdirectory walk, followed by
    // all files sorted case-insensitive alphabetically once a subdir has been processed, e.g.
    //  * a/some.js
    //  * b/subdir1/z/z/z/nested_file.js
    //  * b/subdir1/file.js
    //  * b/subdir2/first.js
    //  * b/subdir2/second.js
    //  * b/some_file.js
    //  * root_file1.js
    //  * root_file2.js
    return keys.sort((keyA, keyB) => {
      const listA = splitKeyMap[keyA];
      const listB = splitKeyMap[keyB];
      if (listA === undefined || listB === undefined) throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .$();
      const maxLen = Math.max(listA.length, listB.length);
      for (let idx = 0; idx < maxLen; ++idx) {
        const entryA = listA[idx];
        const entryB = listB[idx];
        // In practice, there's always at least one entry.
        if (entryA === undefined || entryB === undefined) throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .$();

        // If both subdirectories or both files, then compare names.
        const isLastA = listA.length - 1 === idx;
        const isLastB = listB.length - 1 === idx;
        if (isLastA && isLastB) {
          // If both last, then this is a filename comparison.

          // First, compare filename without extension.
          const fileA = entryA.replace(/\.[^\.]*$/, '');
          const fileB = entryB.replace(/\.[^\.]*$/, '');
          const filenameOnlyDiff = fileA.localeCompare(fileB);
          if (filenameOnlyDiff) return filenameOnlyDiff;

          // Second, compare including the extension.
          // Always return something here, see note below.
          return entryA.localeCompare(entryB);
        } else if (!isLastA && !isLastB) {
          // If both not last, this is a subdirectory comparison.
          const diff = entryA.localeCompare(entryB);
          if (diff) return diff;
        }

        // At this point, if idx is the final for each, we would have returned above.
        // So, check if either a or b is at the final entry in splitKeyMap.
        // If so, then there's a mismatch in number of directories, and we know one
        // the one with a filename should be sorted last.

        if (listA.length - 1 <= idx) {
          // a has fewer subdirectories, so should be sorted last.
          return 1;
        }
        if (listB.length - 1 <= idx) {
          // a has more subdirectories, so should be sorted first.
          return -1;
        }
      }
      return 0;
    });
  }

  // Given a set of paths, an overlayName, and an extension, return all paths with
  // that extension that have `overlayName` either as their entire filename (no subdir)
  // or are inside a root-level subdirectory named `overlayName`/  The extension should
  // include the period separator, e.g. ".js".  All comparisons are case insensitive.
  filterUserFiles(paths, origOverlayName, origExtension) {
    const extension = origExtension.toLowerCase();
    const overlayName = origOverlayName.toLowerCase();
    return paths.filter(origPath => {
      const path = origPath.toLowerCase();
      if (!path.endsWith(extension)) return false;
      if (path === `${overlayName}${extension}`) return true;
      if (path.startsWith(`${overlayName}/`) || path.startsWith(`${overlayName}\\`)) return true;
      return false;
    });
  }
  getUserConfigLocation(overlayName, options, callback) {
    let currentlyReloading = false;
    const reloadOnce = () => {
      if (currentlyReloading) return;
      currentlyReloading = true;
      window.location.reload();
    };
    (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .addOverlayListener */ .PS)('onUserFileChanged', () => {
      reloadOnce();
    });
    (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .addOverlayListener */ .PS)('onForceReload', () => {
      reloadOnce();
    });
    this.loadUserFiles(overlayName, options, callback);
  }
  loadUserFiles(overlayName, options, callback, loadCss = true) {
    const readOptions = (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .callOverlayHandler */ .ae)({
      call: 'cactbotLoadData',
      overlay: 'options'
    });
    const loadUser = async e => {
      // The basePath isn't using for anything other than cosmetic printing of full paths,
      // so replace any slashes here for uniformity.  In case anybody is using cactbot on
      // Linux (?!?), support any style of slashes elsewhere.
      const basePath = `${e.detail.userLocation.replace(/[/\\]*$/, '')}\\`;
      const localFiles = e.detail.localUserFiles;
      options.SystemInfo = {
        cactbotVersion: e.detail.cactbotVersion,
        overlayPluginVersion: e.detail.overlayPluginVersion,
        ffxivPluginVersion: e.detail.ffxivPluginVersion,
        actVersion: e.detail.actVersion,
        gameRegion: e.detail.gameRegion
      };

      // The plugin auto-detects the language, so set this first.
      // If options files want to override it, they can for testing.

      // Backward compatibility (language is now separated to three types.)
      if (e.detail.language) {
        options.ParserLanguage = e.detail.language;
        options.ShortLocale = e.detail.language;
        options.DisplayLanguage = e.detail.language;
      }
      // Parser Language
      if (e.detail.parserLanguage) {
        options.ParserLanguage = e.detail.parserLanguage;
        // Backward compatibility, everything "Language" should be changed to "ParserLanguage"
        options.Language = e.detail.parserLanguage;
      }
      // System Language
      if (e.detail.systemLocale) {
        options.SystemLocale = e.detail.systemLocale;
        let shortLocale = e.detail.systemLocale.slice(0, 2);
        if (shortLocale === 'zh') shortLocale = 'cn';
        if ((0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .isLang */ .jd)(shortLocale)) options.ShortLocale = shortLocale;else options.ShortLocale = options.ParserLanguage;
      }
      // User's setting Language
      const displayLang = e.detail.displayLanguage;
      if ((0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .isLang */ .jd)(displayLang)) options.DisplayLanguage = displayLang;else options.DisplayLanguage = options.ParserLanguage || 'en';

      // TODO: left for now as backwards compatibility with user css.  Remove this later??
      document.documentElement.classList.add(`lang-${options.DisplayLanguage}`);
      document.documentElement.lang = (0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .langToLocale */ .Go)(options.DisplayLanguage);
      this.addUnlockText(options.DisplayLanguage);

      // Handle processOptions after default language selection above,
      // but before css below which may load skin files.
      // processOptions needs to be called whether or not there are
      // any userOptions saved, as it sets up the defaults.
      this.savedConfig = (await readOptions)?.data ?? {};
      const template = this.optionTemplates[overlayName];
      if (template !== undefined) {
        const savedConfig = this.savedConfig[overlayName] ?? {};
        this.processOptions(options, options, savedConfig, template.options);

        // For things like raidboss that build extra UI, also give them a chance
        // to handle anything that has been set on that UI.
        if (template.processExtraOptions) template.processExtraOptions(options, savedConfig);
      }

      // If the overlay has a "Debug" setting, set to true via the config tool,
      // then also print out user files that have been loaded.
      const debug = options.Debug !== undefined && options.Debug !== false;
      const printUserFile = debug ? x => console.log(x) : () => {/* noop */};

      // With user files being arbitrary javascript, and having multiple files
      // in user folders, it's possible for later files to accidentally remove
      // things that previous files have added.  Warn about this, since most
      // users are not programmers.
      const warnOnVariableResetMap = {
        raidboss: ['Triggers']
      };
      warnOnVariableResetMap[overlayName] = warnOnVariableResetMap[overlayName] || [];

      // The values of each `warnOnVariableResetMap` field are initially set
      // after the first file, so that if there is only one file, there are
      // not any warnings.

      // The fields that a user file sets in Options can be anything (pun not intended)
      // and so we use `any` here.  The only operation done on this field is a !==
      // for change detection to see if the the user file has modified it.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const variableTracker = {};
      if (localFiles) {
        // localFiles may be null if there is no valid user directory.
        const sortedFiles = this.sortUserFiles(Object.keys(localFiles));
        const jsFiles = this.filterUserFiles(sortedFiles, overlayName, '.js');
        const cssFiles = loadCss ? this.filterUserFiles(sortedFiles, overlayName, '.css') : [];
        for (const jsFile of jsFiles) {
          try {
            printUserFile(`local user file: ${basePath}${jsFile}`);
            this.evalUserFile(localFiles[jsFile] ?? '', options);
            for (const field of warnOnVariableResetMap[overlayName] ?? []) {
              const value = variableTracker[field];
              if (value !== null && value !== undefined && value !== options[field]) {
                // Ideally users should do something like `Options.Triggers.push([etc]);`
                // instead of `Options.Triggers = [etc];`
                console.log(`*** WARNING: ${basePath}${jsFile} overwrites Options.${field} from previous files.`);
              }
              variableTracker[field] = options[field];
            }
            this.userFileCallbacks[overlayName]?.(jsFile, localFiles, options, basePath);
          } catch (e) {
            // Be very visible for users.
            console.log('*** ERROR IN USER FILE ***');
            console.log(e);
          }
        }

        // This is a bit awkward to handle skin settings here, but
        // doing it after user config files and before user css files
        // allows user css to override skin-specific css as well.
        if (options.Skin !== undefined) this.handleSkin(options.Skin);
        for (const cssFile of cssFiles) {
          printUserFile(`local user file: ${basePath}${cssFile}`);
          const userCssText = document.createElement('style');
          const contents = localFiles[cssFile];
          if (contents !== undefined) userCssText.innerText = contents;
          const head = document.getElementsByTagName('head')[0];
          if (head) head.appendChild(userCssText);
        }
      }

      // Post this callback so that the js and css can be executed first.
      callback();
      void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .callOverlayHandler */ .ae)({
        call: 'cactbotRequestState'
      });
    };
    void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .callOverlayHandler */ .ae)({
      call: 'cactbotLoadUser',
      source: location.href,
      overlayName: overlayName
    }).then(e => {
      // Wait for DOMContentLoaded if needed.
      if (document.readyState !== 'loading') {
        void loadUser(e);
        return;
      }
      document.addEventListener('DOMContentLoaded', () => {
        void loadUser(e);
      });
    });
  }
  handleSkin(skinName) {
    if (!skinName || skinName === 'default') return;
    const skinCSSRelativeHref = `skins/${skinName}/${skinName}.css`;
    this.appendCSSLink(skinCSSRelativeHref);
  }
  appendJSLink(src) {
    const userJS = document.createElement('script');
    userJS.setAttribute('type', 'text/javascript');
    userJS.setAttribute('src', src);
    userJS.setAttribute('async', 'false');
    const head = document.getElementsByTagName('head')[0];
    if (head) head.appendChild(userJS);
  }
  appendCSSLink(href) {
    const userCSS = document.createElement('link');
    userCSS.setAttribute('rel', 'stylesheet');
    userCSS.setAttribute('type', 'text/css');
    userCSS.setAttribute('href', href);
    const head = document.getElementsByTagName('head')[0];
    if (head) head.appendChild(userCSS);
  }
  processOptions(options, output, savedConfig, templateOptions) {
    // Take options from the template, find them in savedConfig,
    // and apply them to options. This also handles setting
    // defaults for anything in the template, even if it does not
    // exist in savedConfig.

    // Not all overlays have option templates.
    if (templateOptions === undefined) return;
    for (const opt of templateOptions) {
      // Grab the saved value or the default to set in options.

      let value;
      if (typeof opt.default === 'function') value = opt.default(options);else value = opt.default;
      let isDefault = true;
      if (typeof savedConfig === 'object' && !Array.isArray(savedConfig)) {
        if (opt.id in savedConfig) {
          const newValue = savedConfig[opt.id];
          // Empty strings are always treated as default values.
          // This means that the user has entered something and then cleared it.
          if (newValue !== undefined && newValue !== '') {
            value = newValue;
            isDefault = false;
          }
        }
      }

      // Options can provide custom logic to turn a value into options settings.
      // If this doesn't exist, just set the value directly.
      // Option template ids are identical to field names on Options.
      if (opt.setterFunc) {
        const setValue = opt.setterFunc(value, options, isDefault);
        if (setValue !== undefined) output[opt.id] = setValue;
      } else if (opt.type === 'integer') {
        if (typeof value === 'number') output[opt.id] = Math.floor(value);else if (typeof value === 'string') output[opt.id] = parseInt(value);
      } else if (opt.type === 'float') {
        if (typeof value === 'number') output[opt.id] = value;else if (typeof value === 'string') output[opt.id] = parseFloat(value);
      } else {
        output[opt.id] = value;
      }
    }
  }
  addUnlockText(lang) {
    const unlockText = {
      en: '🔓 Unlocked (lock overlay before using)',
      de: '🔓 Entsperrt (Sperre das Overlay vor der Nutzung)',
      fr: '🔓 Débloqué (Bloquez l\'overlay avant utilisation)',
      ja: '🔓 ロック解除 (オーバーレイを使用する前にロックしてください)',
      cn: '🔓 已解除锁定 (你需要将此悬浮窗锁定后方可使用)',
      ko: '🔓 위치 잠금 해제됨 (사용하기 전에 위치 잠금을 설정하세요)'
    };
    const id = 'cactbot-unlocked-text';
    let textElem = document.getElementById(id);
    if (!textElem) {
      textElem = document.createElement('div');
      textElem.id = id;
      textElem.classList.add('text');
      // Set element display to none in case the page has not included defaults.css.
      textElem.style.display = 'none';
      document.body.append(textElem);
    }
    textElem.innerHTML = unlockText[lang] || unlockText['en'];
  }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new UserConfig());
if (typeof document !== 'undefined') {
  // This event comes early and is not cached, so set up event listener immediately.
  document.addEventListener('onOverlayStateUpdate', e => {
    const docClassList = document.documentElement.classList;
    if (e.detail.isLocked) docClassList.remove('resize-handle', 'unlocked');else docClassList.add('resize-handle', 'unlocked');
  });
}

/***/ }),

/***/ 509:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "N": () => (/* binding */ Directions),
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _netregexes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(622);
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81);
/* harmony import */ var _overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(959);




// TODO: it'd be nice to not repeat job names, but at least Record enforces that all are set.
const nameToJobEnum = {
  NONE: 0,
  GLA: 1,
  PGL: 2,
  MRD: 3,
  LNC: 4,
  ARC: 5,
  CNJ: 6,
  THM: 7,
  CRP: 8,
  BSM: 9,
  ARM: 10,
  GSM: 11,
  LTW: 12,
  WVR: 13,
  ALC: 14,
  CUL: 15,
  MIN: 16,
  BTN: 17,
  FSH: 18,
  PLD: 19,
  MNK: 20,
  WAR: 21,
  DRG: 22,
  BRD: 23,
  WHM: 24,
  BLM: 25,
  ACN: 26,
  SMN: 27,
  SCH: 28,
  ROG: 29,
  NIN: 30,
  MCH: 31,
  DRK: 32,
  AST: 33,
  SAM: 34,
  RDM: 35,
  BLU: 36,
  GNB: 37,
  DNC: 38,
  RPR: 39,
  SGE: 40
};
const allJobs = Object.keys(nameToJobEnum);
const allRoles = ['tank', 'healer', 'dps', 'crafter', 'gatherer', 'none'];
const tankJobs = ['GLA', 'PLD', 'MRD', 'WAR', 'DRK', 'GNB'];
const healerJobs = ['CNJ', 'WHM', 'SCH', 'AST', 'SGE'];
const meleeDpsJobs = ['PGL', 'MNK', 'LNC', 'DRG', 'ROG', 'NIN', 'SAM', 'RPR'];
const rangedDpsJobs = ['ARC', 'BRD', 'DNC', 'MCH'];
const casterDpsJobs = ['BLU', 'RDM', 'BLM', 'SMN', 'ACN', 'THM'];
const dpsJobs = [...meleeDpsJobs, ...rangedDpsJobs, ...casterDpsJobs];
const craftingJobs = ['CRP', 'BSM', 'ARM', 'GSM', 'LTW', 'WVR', 'ALC', 'CUL'];
const gatheringJobs = ['MIN', 'BTN', 'FSH'];
const stunJobs = ['BLU', ...tankJobs, ...meleeDpsJobs];
const silenceJobs = ['BLU', ...tankJobs, ...rangedDpsJobs];
const sleepJobs = [...casterDpsJobs, ...healerJobs];
const feintJobs = [...meleeDpsJobs];
const addleJobs = [...casterDpsJobs];
const cleanseJobs = ['BLU', 'BRD', ...healerJobs];
const jobToRoleMap = (() => {
  const addToMap = (map, jobs, role) => {
    jobs.forEach(job => map.set(job, role));
  };
  const map = new Map([['NONE', 'none']]);
  addToMap(map, tankJobs, 'tank');
  addToMap(map, healerJobs, 'healer');
  addToMap(map, dpsJobs, 'dps');
  addToMap(map, craftingJobs, 'crafter');
  addToMap(map, gatheringJobs, 'gatherer');
  return map;
})();
const watchCombatantMap = [];
const shouldCancelWatch = (params, entry) => {
  if (entry.cancel) return true;
  if (params.maxDuration !== undefined && Date.now() - entry.start > params.maxDuration) return true;
  return false;
};
const defaultWatchCombatant = (params, func) => {
  return new Promise((res, rej) => {
    const delay = params.delay ?? 1000;
    const call = {
      call: 'getCombatants'
    };
    if (params.ids) call.ids = params.ids;
    if (params.names) call.names = params.names;
    if (params.props) call.props = params.props;
    const entry = {
      cancel: false,
      start: Date.now()
    };
    watchCombatantMap.push(entry);
    const checkFunc = () => {
      if (shouldCancelWatch(params, entry)) {
        rej(new Error('cancelled'));
        return;
      }
      void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .callOverlayHandler */ .ae)(call).then(response => {
        if (entry.cancel) {
          rej(new Error('was cancelled'));
          return;
        }
        if (func(response)) res();else window.setTimeout(checkFunc, delay);
      });
    };
    window.setTimeout(checkFunc, delay);
  });
};
let watchCombatantOverride;
let clearCombatantsOverride;
const defaultClearCombatants = () => {
  while (watchCombatantMap.length > 0) {
    const watch = watchCombatantMap.pop();
    if (watch) watch.cancel = true;
  }
};
const watchCombatant = (params, func) => {
  if (watchCombatantOverride) return watchCombatantOverride(params, func);
  return defaultWatchCombatant(params, func);
};
const output8Dir = ['dirN', 'dirNE', 'dirE', 'dirSE', 'dirS', 'dirSW', 'dirW', 'dirNW'];
const output16Dir = ['dirN', 'dirNNE', 'dirNE', 'dirENE', 'dirE', 'dirESE', 'dirSE', 'dirSSE', 'dirS', 'dirSSW', 'dirSW', 'dirWSW', 'dirW', 'dirWNW', 'dirNW', 'dirNNW'];
const outputCardinalDir = ['dirN', 'dirE', 'dirS', 'dirW'];
const outputIntercardDir = ['dirNE', 'dirSE', 'dirSW', 'dirNW'];
const outputStrings16Dir = {
  dirN: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirN */ .Z.dirN,
  dirNNE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNNE */ .Z.dirNNE,
  dirNE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNE */ .Z.dirNE,
  dirENE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirENE */ .Z.dirENE,
  dirE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirE */ .Z.dirE,
  dirESE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirESE */ .Z.dirESE,
  dirSE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSE */ .Z.dirSE,
  dirSSE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSSE */ .Z.dirSSE,
  dirS: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirS */ .Z.dirS,
  dirSSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSSW */ .Z.dirSSW,
  dirSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSW */ .Z.dirSW,
  dirWSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirWSW */ .Z.dirWSW,
  dirW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirW */ .Z.dirW,
  dirWNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirWNW */ .Z.dirWNW,
  dirNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNW */ .Z.dirNW,
  dirNNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNNW */ .Z.dirNNW,
  unknown: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].unknown */ .Z.unknown
};
const outputStrings8Dir = {
  dirN: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirN */ .Z.dirN,
  dirNE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNE */ .Z.dirNE,
  dirE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirE */ .Z.dirE,
  dirSE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSE */ .Z.dirSE,
  dirS: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirS */ .Z.dirS,
  dirSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSW */ .Z.dirSW,
  dirW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirW */ .Z.dirW,
  dirNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNW */ .Z.dirNW,
  unknown: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].unknown */ .Z.unknown
};
const outputStringsCardinalDir = {
  dirN: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirN */ .Z.dirN,
  dirE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirE */ .Z.dirE,
  dirS: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirS */ .Z.dirS,
  dirW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirW */ .Z.dirW,
  unknown: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].unknown */ .Z.unknown
};
const outputStringsIntercardDir = {
  dirNE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNE */ .Z.dirNE,
  dirSE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSE */ .Z.dirSE,
  dirSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSW */ .Z.dirSW,
  dirNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNW */ .Z.dirNW,
  unknown: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].unknown */ .Z.unknown
};

// TODO: Accept 'north' as a function input and adjust output accordingly.
// E.g. Math.round((north + 4) - 4 * Math.atan2(x, y) / Math.PI) % 8;
// Will need to adjust the output arrays as well though.

const xyTo16DirNum = (x, y, centerX, centerY) => {
  // N = 0, NNE = 1, ..., NNW = 15
  x = x - centerX;
  y = y - centerY;
  return Math.round(8 - 8 * Math.atan2(x, y) / Math.PI) % 16;
};
const xyTo8DirNum = (x, y, centerX, centerY) => {
  // N = 0, NE = 1, ..., NW = 7
  x = x - centerX;
  y = y - centerY;
  return Math.round(4 - 4 * Math.atan2(x, y) / Math.PI) % 8;
};
const xyTo4DirNum = (x, y, centerX, centerY) => {
  // N = 0, E = 1, S = 2, W = 3
  x = x - centerX;
  y = y - centerY;
  return Math.round(2 - 2 * Math.atan2(x, y) / Math.PI) % 4;
};
const hdgTo8DirNum = heading => {
  // N = 0, NE = 1, ..., NW = 7
  return (Math.round(4 - 4 * heading / Math.PI) % 8 + 8) % 8;
};
const hdgTo4DirNum = heading => {
  // N = 0, E = 1, S = 2, W = 3
  return (Math.round(2 - heading * 2 / Math.PI) % 4 + 4) % 4;
};
const outputFrom8DirNum = dirNum => {
  return output8Dir[dirNum] ?? 'unknown';
};
const Directions = {
  output8Dir: output8Dir,
  output16Dir: output16Dir,
  outputCardinalDir: outputCardinalDir,
  outputIntercardDir: outputIntercardDir,
  outputStrings16Dir: outputStrings16Dir,
  outputStrings8Dir: outputStrings8Dir,
  outputStringsCardinalDir: outputStringsCardinalDir,
  outputStringsIntercardDir: outputStringsIntercardDir,
  xyTo16DirNum: xyTo16DirNum,
  xyTo8DirNum: xyTo8DirNum,
  xyTo4DirNum: xyTo4DirNum,
  hdgTo8DirNum: hdgTo8DirNum,
  hdgTo4DirNum: hdgTo4DirNum,
  outputFrom8DirNum: outputFrom8DirNum,
  combatantStatePosTo8Dir: (combatant, centerX, centerY) => {
    return xyTo8DirNum(combatant.PosX, combatant.PosY, centerX, centerY);
  },
  combatantStatePosTo8DirOutput: (combatant, centerX, centerY) => {
    const dirNum = xyTo8DirNum(combatant.PosX, combatant.PosY, centerX, centerY);
    return outputFrom8DirNum(dirNum);
  },
  combatantStateHdgTo8Dir: combatant => {
    return hdgTo8DirNum(combatant.Heading);
  },
  combatantStateHdgTo8DirOutput: combatant => {
    const dirNum = hdgTo8DirNum(combatant.Heading);
    return outputFrom8DirNum(dirNum);
  },
  addedCombatantPosTo8Dir: (combatant, centerX, centerY) => {
    const x = parseFloat(combatant.x);
    const y = parseFloat(combatant.y);
    return xyTo8DirNum(x, y, centerX, centerY);
  },
  addedCombatantPosTo8DirOutput: (combatant, centerX, centerY) => {
    const x = parseFloat(combatant.x);
    const y = parseFloat(combatant.y);
    const dirNum = xyTo8DirNum(x, y, centerX, centerY);
    return outputFrom8DirNum(dirNum);
  },
  addedCombatantHdgTo8Dir: combatant => {
    const heading = parseFloat(combatant.heading);
    return hdgTo8DirNum(heading);
  },
  addedCombatantHdgTo8DirOutput: combatant => {
    const heading = parseFloat(combatant.heading);
    const dirNum = hdgTo8DirNum(heading);
    return outputFrom8DirNum(dirNum);
  },
  xyTo8DirOutput: (x, y, centerX, centerY) => {
    const dirNum = xyTo8DirNum(x, y, centerX, centerY);
    return outputFrom8DirNum(dirNum);
  }
};
const Util = {
  jobEnumToJob: id => {
    const job = allJobs.find(job => nameToJobEnum[job] === id);
    return job ?? 'NONE';
  },
  jobToJobEnum: job => nameToJobEnum[job],
  jobToRole: job => {
    const role = jobToRoleMap.get(job);
    return role ?? 'none';
  },
  getAllRoles: () => allRoles,
  isTankJob: job => tankJobs.includes(job),
  isHealerJob: job => healerJobs.includes(job),
  isMeleeDpsJob: job => meleeDpsJobs.includes(job),
  isRangedDpsJob: job => rangedDpsJobs.includes(job),
  isCasterDpsJob: job => casterDpsJobs.includes(job),
  isDpsJob: job => dpsJobs.includes(job),
  isCraftingJob: job => craftingJobs.includes(job),
  isGatheringJob: job => gatheringJobs.includes(job),
  isCombatJob: job => {
    return !craftingJobs.includes(job) && !gatheringJobs.includes(job);
  },
  canStun: job => stunJobs.includes(job),
  canSilence: job => silenceJobs.includes(job),
  canSleep: job => sleepJobs.includes(job),
  canCleanse: job => cleanseJobs.includes(job),
  canFeint: job => feintJobs.includes(job),
  canAddle: job => addleJobs.includes(job),
  watchCombatant: watchCombatant,
  clearWatchCombatants: () => {
    if (clearCombatantsOverride !== undefined) clearCombatantsOverride();else defaultClearCombatants();
  },
  setWatchCombatantOverride: (watchFunc, clearFunc) => {
    watchCombatantOverride = watchFunc;
    clearCombatantsOverride = clearFunc;
  },
  gameLogCodes: _netregexes__WEBPACK_IMPORTED_MODULE_0__/* .gameLogCodes */ .k3
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Util);

/***/ }),

/***/ 588:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY

const data = {
  'ABloodyReunion': 560,
  'AFrostyReception': 1010,
  'APathUnveiled': 1015,
  'ARelicRebornTheChimera': 368,
  'ARelicRebornTheHydra': 369,
  'ARequiemForHeroes': 830,
  'ASleepDisturbed': 914,
  'ASpectacleForTheAges': 533,
  'AbyssosTheEighthCircle': 1087,
  'AbyssosTheEighthCircleSavage': 1088,
  'AbyssosTheFifthCircle': 1081,
  'AbyssosTheFifthCircleSavage': 1082,
  'AbyssosTheSeventhCircle': 1085,
  'AbyssosTheSeventhCircleSavage': 1086,
  'AbyssosTheSixthCircle': 1083,
  'AbyssosTheSixthCircleSavage': 1084,
  'AccrueEnmityFromMultipleTargets': 540,
  'Aglaia': 1054,
  'AirForceOne': 832,
  'AkadaemiaAnyder': 841,
  'AlaMhigo': 1146,
  'AlaMhigo63': 689,
  'AlexanderTheArmOfTheFather': 444,
  'AlexanderTheArmOfTheFatherSavage': 451,
  'AlexanderTheArmOfTheSon': 522,
  'AlexanderTheArmOfTheSonSavage': 531,
  'AlexanderTheBreathOfTheCreator': 581,
  'AlexanderTheBreathOfTheCreatorSavage': 585,
  'AlexanderTheBurdenOfTheFather': 445,
  'AlexanderTheBurdenOfTheFatherSavage': 452,
  'AlexanderTheBurdenOfTheSon': 523,
  'AlexanderTheBurdenOfTheSonSavage': 532,
  'AlexanderTheCuffOfTheFather': 443,
  'AlexanderTheCuffOfTheFatherSavage': 450,
  'AlexanderTheCuffOfTheSon': 521,
  'AlexanderTheCuffOfTheSonSavage': 530,
  'AlexanderTheEyesOfTheCreator': 580,
  'AlexanderTheEyesOfTheCreatorSavage': 584,
  'AlexanderTheFistOfTheFather': 442,
  'AlexanderTheFistOfTheFatherSavage': 449,
  'AlexanderTheFistOfTheSon': 520,
  'AlexanderTheFistOfTheSonSavage': 529,
  'AlexanderTheHeartOfTheCreator': 582,
  'AlexanderTheHeartOfTheCreatorSavage': 586,
  'AlexanderTheSoulOfTheCreator': 583,
  'AlexanderTheSoulOfTheCreatorSavage': 587,
  'AllsWellThatEndsInTheWell': 220,
  'AlphascapeV10': 798,
  'AlphascapeV10Savage': 802,
  'AlphascapeV20': 799,
  'AlphascapeV20Savage': 803,
  'AlphascapeV30': 800,
  'AlphascapeV30Savage': 804,
  'AlphascapeV40': 801,
  'AlphascapeV40Savage': 805,
  'AlzadaalsLegacy': 1050,
  'Amaurot': 838,
  'AmdaporKeep': 167,
  'AmdaporKeepHard': 189,
  'AmhAraeng': 815,
  'AnUnforeseenBargain': 1120,
  'AnabaseiosTheEleventhCircle': 1151,
  'AnabaseiosTheEleventhCircleSavage': 1152,
  'AnabaseiosTheNinthCircle': 1147,
  'AnabaseiosTheNinthCircleSavage': 1148,
  'AnabaseiosTheTenthCircle': 1149,
  'AnabaseiosTheTenthCircleSavage': 1150,
  'AnabaseiosTheTwelfthCircle': 1153,
  'AnabaseiosTheTwelfthCircleSavage': 1154,
  'AnamnesisAnyder': 898,
  'AnnoyTheVoid': 222,
  'AnotherMountRokkon': 1155,
  'AnotherMountRokkonSavage': 1156,
  'AnotherSildihnSubterrane': 1075,
  'AnotherSildihnSubterraneSavage': 1076,
  'AsTheHeartBids': 894,
  'AsTheHeavensBurn': 1012,
  'AsphodelosTheFirstCircle': 1002,
  'AsphodelosTheFirstCircleSavage': 1003,
  'AsphodelosTheFourthCircle': 1008,
  'AsphodelosTheFourthCircleSavage': 1009,
  'AsphodelosTheSecondCircle': 1004,
  'AsphodelosTheSecondCircleSavage': 1005,
  'AsphodelosTheThirdCircle': 1006,
  'AsphodelosTheThirdCircleSavage': 1007,
  'AssistAlliesInDefeatingATarget': 544,
  'Astragalos': 729,
  'AvoidAreaOfEffectAttacks': 537,
  'AzysLla': 402,
  'BaelsarsWall': 1114,
  'BaelsarsWall62': 615,
  'BardamsMettle': 1143,
  'BardamsMettle63': 623,
  'BasicTrainingEnemyParties': 214,
  'BasicTrainingEnemyStrongholds': 215,
  'BattleInTheBigKeep': 396,
  'BattleOnTheBigBridge': 366,
  'BloodOnTheDeck': 708,
  'BrayfloxsLongstop': 1041,
  'BrayfloxsLongstopHard': 362,
  'CapeWestwind': 1049,
  'CastrumAbania': 1145,
  'CastrumAbania63': 661,
  'CastrumFluminis': 778,
  'CastrumMarinum': 934,
  'CastrumMarinumExtreme': 935,
  'CastrumMeridianum': 1043,
  'CentralShroud': 148,
  'CentralThanalan': 141,
  'ChocoboRaceCostaDelSol': 389,
  'ChocoboRaceSagoliiRoad': 390,
  'ChocoboRaceTranquilPaths': 391,
  'ChocoboRaceTutorial': 417,
  'CinderDrift': 897,
  'CinderDriftExtreme': 912,
  'CoerthasCentralHighlands': 155,
  'CoerthasWesternHighlands': 397,
  'ComingClean': 860,
  'ContainmentBayP1T6': 576,
  'ContainmentBayP1T6Extreme': 577,
  'ContainmentBayP1T6Unreal': 1121,
  'ContainmentBayS1T7': 517,
  'ContainmentBayS1T7Extreme': 524,
  'ContainmentBayS1T7Unreal': 1090,
  'ContainmentBayZ1T9': 637,
  'ContainmentBayZ1T9Extreme': 638,
  'ContainmentBayZ1T9Unreal': 1157,
  'CopperbellMines': 1038,
  'CopperbellMinesHard': 349,
  'CrystallineConflictCustomMatchCloudNine': 1060,
  'CrystallineConflictCustomMatchTheClockworkCastletown': 1117,
  'CrystallineConflictCustomMatchThePalaistra': 1058,
  'CrystallineConflictCustomMatchTheVolcanicHeart': 1059,
  'CuriousGorgeMeetsHisMatch': 717,
  'CuttersCry': 170,
  'DarkAsTheNightSky': 713,
  'DeathUntoDawn': 977,
  'DefeatAnOccupiedTarget': 545,
  'DeltascapeV10': 691,
  'DeltascapeV10Savage': 695,
  'DeltascapeV20': 692,
  'DeltascapeV20Savage': 696,
  'DeltascapeV30': 693,
  'DeltascapeV30Savage': 697,
  'DeltascapeV40': 694,
  'DeltascapeV40Savage': 698,
  'DelubrumReginae': 936,
  'DelubrumReginaeSavage': 937,
  'Devastation': 1052,
  'DohnMheg': 821,
  'DomaCastle': 1144,
  'DomaCastle63': 660,
  'DragonSound': 714,
  'DragonsongsRepriseUltimate': 968,
  'DunScaith': 627,
  'DzemaelDarkhold': 171,
  'EastShroud': 152,
  'EasternLaNoscea': 137,
  'EasternThanalan': 145,
  'EdensGateDescent': 850,
  'EdensGateDescentSavage': 854,
  'EdensGateInundation': 851,
  'EdensGateInundationSavage': 855,
  'EdensGateResurrection': 849,
  'EdensGateResurrectionSavage': 853,
  'EdensGateSepulture': 852,
  'EdensGateSepultureSavage': 856,
  'EdensPromiseAnamorphosis': 944,
  'EdensPromiseAnamorphosisSavage': 948,
  'EdensPromiseEternity': 945,
  'EdensPromiseEternitySavage': 949,
  'EdensPromiseLitany': 943,
  'EdensPromiseLitanySavage': 947,
  'EdensPromiseUmbra': 942,
  'EdensPromiseUmbraSavage': 946,
  'EdensVerseFulmination': 902,
  'EdensVerseFulminationSavage': 906,
  'EdensVerseFuror': 903,
  'EdensVerseFurorSavage': 907,
  'EdensVerseIconoclasm': 904,
  'EdensVerseIconoclasmSavage': 908,
  'EdensVerseRefulgence': 905,
  'EdensVerseRefulgenceSavage': 909,
  'Elpis': 961,
  'Emanation': 719,
  'EmanationExtreme': 720,
  'EmissaryOfTheDawn': 769,
  'Endwalker': 1013,
  'EngageMultipleTargets': 541,
  'Eulmore': 820,
  'Euphrosyne': 1118,
  'EurekaOrthosFloors11_20': 1100,
  'EurekaOrthosFloors1_10': 1099,
  'EurekaOrthosFloors21_30': 1101,
  'EurekaOrthosFloors31_40': 1102,
  'EurekaOrthosFloors41_50': 1103,
  'EurekaOrthosFloors51_60': 1104,
  'EurekaOrthosFloors61_70': 1105,
  'EurekaOrthosFloors71_80': 1106,
  'EurekaOrthosFloors81_90': 1107,
  'EurekaOrthosFloors91_100': 1108,
  'EverMarchHeavensward': 1018,
  'ExecuteAComboInBattle': 539,
  'ExecuteAComboToIncreaseEnmity': 538,
  'ExecuteARangedAttackToIncreaseEnmity': 542,
  'FadedMemories': 932,
  'FinalExercise': 552,
  'FitForAQueen': 955,
  'FlickingSticksAndTakingNames': 219,
  'ForlornGlory': 1051,
  'Foundation': 418,
  'FourPlayerMahjongQuickMatchKuitanDisabled': 831,
  'Garlemald': 958,
  'GenerationalBonding': 1115,
  'Halatali': 162,
  'HalataliHard': 360,
  'HaukkeManor': 1040,
  'HaukkeManorHard': 350,
  'HealAnAlly': 549,
  'HealMultipleAllies': 550,
  'HeavenOnHighFloors11_20': 771,
  'HeavenOnHighFloors1_10': 770,
  'HeavenOnHighFloors21_30': 772,
  'HeavenOnHighFloors31_40': 782,
  'HeavenOnHighFloors41_50': 773,
  'HeavenOnHighFloors51_60': 783,
  'HeavenOnHighFloors61_70': 774,
  'HeavenOnHighFloors71_80': 784,
  'HeavenOnHighFloors81_90': 775,
  'HeavenOnHighFloors91_100': 785,
  'HellsKier': 810,
  'HellsKierExtreme': 811,
  'HellsLid': 742,
  'HeroOnTheHalfShell': 216,
  'HiddenGorge': 791,
  'HolminsterSwitch': 837,
  'HullbreakerIsle': 361,
  'HullbreakerIsleHard': 557,
  'Idyllshire': 478,
  'IlMheg': 816,
  'InFromTheCold': 1011,
  'InThalsName': 705,
  'InteractWithTheBattlefield': 548,
  'InterdimensionalRift': 690,
  'ItsProbablyATrap': 665,
  'Kholusia': 814,
  'KtisisHyperboreia': 974,
  'Kugane': 628,
  'KuganeCastle': 662,
  'KuganeOhashi': 806,
  'Labyrinthos': 956,
  'LaidToRest': 1017,
  'Lakeland': 813,
  'LapisManalis': 1097,
  'LegendOfTheNotSoHiddenTemple': 859,
  'LifeEphemeralPathEternal': 1023,
  'LimsaLominsaLowerDecks': 129,
  'LimsaLominsaUpperDecks': 128,
  'LongLiveTheQueen': 298,
  'LovmMasterTournament': 506,
  'LovmPlayerBattleNonRp': 591,
  'LovmPlayerBattleRp': 589,
  'LovmTournament': 590,
  'LowerLaNoscea': 135,
  'MalikahsWell': 836,
  'MareLamentorum': 959,
  'MatchAll': null,
  'MatoyasRelict': 933,
  'MatsubaMayhem': 710,
  'MemoriaMiseraExtreme': 913,
  'MessengerOfTheWinds': 834,
  'MiddleLaNoscea': 134,
  'Mist': 136,
  'MorDhona': 156,
  'MoreThanAFeeler': 221,
  'MountOrdeals': 1095,
  'MountOrdealsExtreme': 1096,
  'MountRokkon': 1137,
  'MtGulg': 822,
  'Naadam': 688,
  'Neverreap': 420,
  'NewGridania': 132,
  'NorthShroud': 154,
  'NorthernThanalan': 147,
  'NyelbertsLament': 876,
  'OldGridania': 133,
  'OldSharlayan': 962,
  'OneLifeForOneWorld': 592,
  'OnsalHakairDanshigNaadam': 888,
  'OurCompromise': 716,
  'OurUnsungHeroes': 722,
  'OuterLaNoscea': 180,
  'Paglthan': 938,
  'PharosSirius': 160,
  'PharosSiriusHard': 510,
  'PullingPoisonPosies': 191,
  'RadzAtHan': 963,
  'RaisingTheSword': 706,
  'ReturnOfTheBull': 403,
  'RhalgrsReach': 635,
  'SagesFocus': 1022,
  'SaintMociannesArboretum': 511,
  'SaintMociannesArboretumHard': 788,
  'Sastasha': 1036,
  'SastashaHard': 387,
  'SealRockSeize': 431,
  'ShadowAndClaw': 223,
  'ShisuiOfTheVioletTides': 616,
  'SigmascapeV10': 748,
  'SigmascapeV10Savage': 752,
  'SigmascapeV20': 749,
  'SigmascapeV20Savage': 753,
  'SigmascapeV30': 750,
  'SigmascapeV30Savage': 754,
  'SigmascapeV40': 751,
  'SigmascapeV40Savage': 755,
  'Smileton': 976,
  'Snowcloak': 1062,
  'Snowcloak61': 371,
  'SohmAl': 1064,
  'SohmAl61': 441,
  'SohmAlHard': 617,
  'SohrKhai': 1112,
  'SohrKhai62': 555,
  'SolemnTrinity': 300,
  'SouthShroud': 153,
  'SouthernThanalan': 146,
  'SpecialEventI': 353,
  'SpecialEventIi': 354,
  'StingingBack': 192,
  'StormsCrown': 1071,
  'StormsCrownExtreme': 1072,
  'SyrcusTower': 372,
  'Thaleia': 1178,
  'Thavnair': 957,
  'TheAbyssalFracture': 1168,
  'TheAbyssalFractureExtreme': 1169,
  'TheAery': 1065,
  'TheAery61': 435,
  'TheAetherfont': 1126,
  'TheAetherochemicalResearchFacility': 1110,
  'TheAetherochemicalResearchFacility62': 438,
  'TheAitiascope': 978,
  'TheAkhAfahAmphitheatreExtreme': 378,
  'TheAkhAfahAmphitheatreHard': 377,
  'TheAkhAfahAmphitheatreUnreal': 930,
  'TheAntitower': 1111,
  'TheAntitower62': 516,
  'TheAquapolis': 558,
  'TheAurumVale': 172,
  'TheAzimSteppe': 622,
  'TheBattleOnBekko': 711,
  'TheBindingCoilOfBahamutTurn1': 241,
  'TheBindingCoilOfBahamutTurn2': 242,
  'TheBindingCoilOfBahamutTurn3': 243,
  'TheBindingCoilOfBahamutTurn4': 244,
  'TheBindingCoilOfBahamutTurn5': 245,
  'TheBorderlandRuinsSecure': 376,
  'TheBowlOfEmbers': 1045,
  'TheBowlOfEmbersExtreme': 295,
  'TheBowlOfEmbersHard': 292,
  'TheBozjaIncident': 911,
  'TheBozjanSouthernFront': 920,
  'TheBurn': 1173,
  'TheBurn64': 789,
  'TheCalamityRetold': 790,
  'TheCarteneauFlatsHeliodrome': 633,
  'TheChrysalis': 426,
  'TheChurningMists': 400,
  'TheClockworkCastletown': 1116,
  'TheCloudDeck': 950,
  'TheCloudDeckExtreme': 951,
  'TheCopiedFactory': 882,
  'TheCrownOfTheImmaculate': 846,
  'TheCrownOfTheImmaculateExtreme': 848,
  'TheCrystarium': 819,
  'TheDancingPlague': 845,
  'TheDancingPlagueExtreme': 858,
  'TheDarkInside': 992,
  'TheDeadEnds': 973,
  'TheDiadem': 929,
  'TheDiademEasy': 512,
  'TheDiademHard': 515,
  'TheDiademHuntingGrounds': 625,
  'TheDiademHuntingGroundsEasy': 624,
  'TheDiademTrialsOfTheFury': 630,
  'TheDiademTrialsOfTheMatron': 656,
  'TheDomanEnclave': 759,
  'TheDragonsNeck': 142,
  'TheDravanianForelands': 398,
  'TheDravanianHinterlands': 399,
  'TheDrownedCityOfSkalla': 731,
  'TheDungeonsOfLyheGhiah': 879,
  'TheDuskVigil': 434,
  'TheDyingGasp': 847,
  'TheEpicOfAlexanderUltimate': 887,
  'TheExcitatron6000': 1000,
  'TheFaceOfTrueEvil': 709,
  'TheFellCourtOfTroia': 1070,
  'TheFieldsOfGloryShatter': 554,
  'TheFinalCoilOfBahamutTurn1': 193,
  'TheFinalCoilOfBahamutTurn2': 194,
  'TheFinalCoilOfBahamutTurn3': 195,
  'TheFinalCoilOfBahamutTurn4': 196,
  'TheFinalDay': 997,
  'TheFinalStepsOfFaith': 559,
  'TheForbiddenLandEurekaAnemos': 732,
  'TheForbiddenLandEurekaHydatos': 827,
  'TheForbiddenLandEurekaPagos': 763,
  'TheForbiddenLandEurekaPyros': 795,
  'TheFractalContinuum': 430,
  'TheFractalContinuumHard': 743,
  'TheFringes': 612,
  'TheGhimlytDark': 1174,
  'TheGhimlytDark64': 793,
  'TheGiftOfMercy': 1019,
  'TheGrandCosmos': 884,
  'TheGreatGubalLibrary': 1109,
  'TheGreatGubalLibrary62': 416,
  'TheGreatGubalLibraryHard': 578,
  'TheGreatHunt': 761,
  'TheGreatHuntExtreme': 762,
  'TheGreatShipVylbrand': 954,
  'TheHardenedHeart': 873,
  'TheHarvestBegins': 1020,
  'TheHauntedManor': 571,
  'TheHeartOfTheProblem': 718,
  'TheHeroesGauntlet': 916,
  'TheHiddenCanalsOfUznair': 725,
  'TheHowlingEye': 1047,
  'TheHowlingEyeExtreme': 297,
  'TheHowlingEyeHard': 294,
  'TheHuntersLegacy': 875,
  'TheJadeStoa': 746,
  'TheJadeStoaExtreme': 758,
  'TheKeeperOfTheLake': 1063,
  'TheKeeperOfTheLake61': 150,
  'TheKillingArt': 1021,
  'TheLabyrinthOfTheAncients': 174,
  'TheLimitlessBlueExtreme': 447,
  'TheLimitlessBlueHard': 436,
  'TheLochs': 621,
  'TheLostAndTheFound': 874,
  'TheLostCanalsOfUznair': 712,
  'TheLostCityOfAmdapor': 363,
  'TheLostCityOfAmdaporHard': 519,
  'TheLunarSubterrane': 1164,
  'TheMaskedCarnivale': 796,
  'TheMinstrelsBalladEndsingersAria': 998,
  'TheMinstrelsBalladHadessElegy': 885,
  'TheMinstrelsBalladHydaelynsCall': 996,
  'TheMinstrelsBalladNidhoggsRage': 566,
  'TheMinstrelsBalladShinryusDomain': 730,
  'TheMinstrelsBalladThordansReign': 448,
  'TheMinstrelsBalladTsukuyomisPain': 779,
  'TheMinstrelsBalladUltimasBane': 348,
  'TheMinstrelsBalladZodiarksFall': 993,
  'TheMothercrystal': 995,
  'TheNavel': 1046,
  'TheNavelExtreme': 296,
  'TheNavelHard': 293,
  'TheNavelUnreal': 953,
  'TheOmegaProtocolUltimate': 1122,
  'TheOrbonneMonastery': 826,
  'TheOrphansAndTheBrokenBlade': 715,
  'ThePalaceOfTheDeadFloors101_110': 598,
  'ThePalaceOfTheDeadFloors111_120': 599,
  'ThePalaceOfTheDeadFloors11_20': 562,
  'ThePalaceOfTheDeadFloors121_130': 600,
  'ThePalaceOfTheDeadFloors131_140': 601,
  'ThePalaceOfTheDeadFloors141_150': 602,
  'ThePalaceOfTheDeadFloors151_160': 603,
  'ThePalaceOfTheDeadFloors161_170': 604,
  'ThePalaceOfTheDeadFloors171_180': 605,
  'ThePalaceOfTheDeadFloors181_190': 606,
  'ThePalaceOfTheDeadFloors191_200': 607,
  'ThePalaceOfTheDeadFloors1_10': 561,
  'ThePalaceOfTheDeadFloors21_30': 563,
  'ThePalaceOfTheDeadFloors31_40': 564,
  'ThePalaceOfTheDeadFloors41_50': 565,
  'ThePalaceOfTheDeadFloors51_60': 593,
  'ThePalaceOfTheDeadFloors61_70': 594,
  'ThePalaceOfTheDeadFloors71_80': 595,
  'ThePalaceOfTheDeadFloors81_90': 596,
  'ThePalaceOfTheDeadFloors91_100': 597,
  'ThePeaks': 620,
  'ThePhantomsFeast': 994,
  'ThePillars': 419,
  'ThePoolOfTribute': 674,
  'ThePoolOfTributeExtreme': 677,
  'ThePortaDecumana': 1048,
  'ThePraetorium': 1044,
  'ThePuppetsBunker': 917,
  'TheQitanaRavel': 823,
  'TheRaktikaGreatwood': 817,
  'TheResonant': 684,
  'TheRidoranaLighthouse': 776,
  'TheRoyalCityOfRabanastre': 734,
  'TheRoyalMenagerie': 679,
  'TheRubySea': 613,
  'TheSeaOfClouds': 401,
  'TheSeatOfSacrifice': 922,
  'TheSeatOfSacrificeExtreme': 923,
  'TheSecondCoilOfBahamutSavageTurn1': 380,
  'TheSecondCoilOfBahamutSavageTurn2': 381,
  'TheSecondCoilOfBahamutSavageTurn3': 382,
  'TheSecondCoilOfBahamutSavageTurn4': 383,
  'TheSecondCoilOfBahamutTurn1': 355,
  'TheSecondCoilOfBahamutTurn2': 356,
  'TheSecondCoilOfBahamutTurn3': 357,
  'TheSecondCoilOfBahamutTurn4': 358,
  'TheShiftingAltarsOfUznair': 794,
  'TheShiftingGymnasionAgonon': 1123,
  'TheShiftingOubliettesOfLyheGhiah': 924,
  'TheSildihnSubterrane': 1069,
  'TheSingularityReactor': 437,
  'TheSingularityReactorUnreal': 1175,
  'TheSirensongSea': 1142,
  'TheSirensongSea63': 626,
  'TheStepsOfFaith': 1068,
  'TheStepsOfFaith61': 143,
  'TheStigmaDreamscape': 986,
  'TheStoneVigil': 1042,
  'TheStoneVigilHard': 365,
  'TheStrikingTreeExtreme': 375,
  'TheStrikingTreeHard': 374,
  'TheSunkenTempleOfQarn': 163,
  'TheSunkenTempleOfQarnHard': 367,
  'TheSwallowsCompass': 768,
  'TheTamTaraDeepcroft': 1037,
  'TheTamTaraDeepcroftHard': 373,
  'TheTempest': 818,
  'TheTempleOfTheFist': 663,
  'TheThousandMawsOfTotoRak': 1039,
  'TheTowerAtParadigmsBreach': 966,
  'TheTowerOfBabil': 969,
  'TheTowerOfZot': 952,
  'TheTripleTriadBattlehall': 579,
  'TheTwinning': 840,
  'TheUnendingCoilOfBahamutUltimate': 733,
  'TheValentionesCeremony': 741,
  'TheVault': 1066,
  'TheVault61': 421,
  'TheVoidArk': 508,
  'TheVoidcastDais': 1140,
  'TheVoidcastDaisExtreme': 1141,
  'TheWanderersPalace': 159,
  'TheWanderersPalaceHard': 188,
  'TheWeaponsRefrainUltimate': 777,
  'TheWeepingCityOfMhach': 556,
  'TheWhorleaterExtreme': 359,
  'TheWhorleaterHard': 281,
  'TheWhorleaterUnreal': 972,
  'TheWillOfTheMoon': 797,
  'TheWorldOfDarkness': 151,
  'TheWreathOfSnakes': 824,
  'TheWreathOfSnakesExtreme': 825,
  'ThokAstThokExtreme': 446,
  'ThokAstThokHard': 432,
  'ThornmarchExtreme': 364,
  'ThornmarchHard': 1067,
  'ThornmarchHard61': 207,
  'ToCalmerSeas': 1016,
  'TripleTriadInvitationalParlor': 941,
  'TripleTriadOpenTournament': 940,
  'UldahStepsOfNald': 130,
  'UldahStepsOfThal': 131,
  'UltimaThule': 960,
  'UltimasBaneUnreal': 1035,
  'UnderTheArmor': 190,
  'UpperLaNoscea': 139,
  'UrthsFount': 394,
  'Vanaspati': 970,
  'VowsOfVirtueDeedsOfCruelty': 893,
  'WardUp': 299,
  'WesternLaNoscea': 138,
  'WesternThanalan': 140,
  'WhenClansCollide': 723,
  'WhereEverythingBegins': 1091,
  'WithHeartAndSteel': 707,
  'WolvesDenPier': 250,
  'WorthyOfHisBack': 1014,
  'Xelphatol': 1113,
  'Xelphatol62': 572,
  'Yanxia': 614,
  'Zadnor': 975
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);

/***/ }),

/***/ 902:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY

const data = {
  1000: {
    'contentType': 9,
    'exVersion': 4,
    'name': {
      'cn': '惊奇百宝城',
      'de': 'Euphoratron',
      'en': 'The Excitatron 6000',
      'fr': 'Le Ludodrome',
      'ja': '宝物庫 エキサイトロン',
      'ko': '보물고 익사이트론'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1002: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱1',
      'de': 'Asphodelos - Erster Kreis',
      'en': 'Asphodelos: The First Circle',
      'fr': 'Les Limbes du Pandæmonium - Parvis',
      'ja': '万魔殿パンデモニウム：辺獄編1',
      'ko': '마의 전당 판데모니움: 변옥편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1003: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱1',
      'de': 'Asphodelos - Erster Kreis (episch)',
      'en': 'Asphodelos: The First Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Parvis (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編1',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1004: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱2',
      'de': 'Asphodelos - Zweiter Kreis',
      'en': 'Asphodelos: The Second Circle',
      'fr': 'Les Limbes du Pandæmonium - Cloaque',
      'ja': '万魔殿パンデモニウム：辺獄編2',
      'ko': '마의 전당 판데모니움: 변옥편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1005: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱2',
      'de': 'Asphodelos - Zweiter Kreis (episch)',
      'en': 'Asphodelos: The Second Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Cloaque (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編2',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1006: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱3',
      'de': 'Asphodelos - Dritter Kreis',
      'en': 'Asphodelos: The Third Circle',
      'fr': 'Les Limbes du Pandæmonium - Fournaise',
      'ja': '万魔殿パンデモニウム：辺獄編3',
      'ko': '마의 전당 판데모니움: 변옥편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1007: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱3',
      'de': 'Asphodelos - Dritter Kreis (episch)',
      'en': 'Asphodelos: The Third Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Fournaise (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編3',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1008: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱4',
      'de': 'Asphodelos - Vierter Kreis',
      'en': 'Asphodelos: The Fourth Circle',
      'fr': 'Les Limbes du Pandæmonium - Abîme',
      'ja': '万魔殿パンデモニウム：辺獄編4',
      'ko': '마의 전당 판데모니움: 변옥편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1009: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱4',
      'de': 'Asphodelos - Vierter Kreis (episch)',
      'en': 'Asphodelos: The Fourth Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Abîme (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編4',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1010: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '踏破风雪',
      'de': 'Ein frostiger Empfang',
      'en': 'A Frosty Reception',
      'fr': 'Un accueil glacial',
      'ja': '霜雪を踏みしめて',
      'ko': '눈서리를 밟고'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1011: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '无尽寒夜',
      'de': 'In fremder Haut',
      'en': 'In from the Cold',
      'fr': 'Le voleur de corps',
      'ja': '寒夜のこと',
      'ko': '어느 추운 밤에'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 27
  },
  1012: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '扩散的末日',
      'de': 'Rote Himmel, roter Schnee',
      'en': 'As the Heavens Burn',
      'fr': 'L\'arène des neiges',
      'ja': '拡がる終末',
      'ko': '퍼져가는 종말'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 141
  },
  1013: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '晓月之终途',
      'de': 'Endschreiter',
      'en': 'Endwalker',
      'fr': 'Arpenteur des finitudes',
      'ja': '暁月のフィナーレ',
      'ko': '효월의 종언'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 100,
    'weatherRate': 143
  },
  1014: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '上一任阿谢姆的教导',
      'de': ' Es reimt sich auf Gebell',
      'en': 'Worthy of His Back',
      'fr': 'Le défi de l\'ancienne Azem',
      'ja': '前代アゼムの手ほどき',
      'ko': '선대 아젬과의 대련'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 134
  },
  1015: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '未来之路',
      'de': 'Offen für neue Wege',
      'en': 'A Path Unveiled',
      'fr': 'Des esprits et des hommes',
      'ja': '開かれた道の先へ',
      'ko': '열린 길 저편으로'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  1016: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '驶向融合的巨轮',
      'de': 'Im Hafen des Friedens',
      'en': 'To Calmer Seas',
      'fr': 'Cap sur la paix',
      'ja': '融和への船出',
      'ko': '화합을 향한 출항'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1017: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '英魂安息',
      'de': 'Domanisches Begräbnis',
      'en': 'Laid to Rest',
      'fr': 'Des adieux domiens',
      'ja': 'ドマの弔い',
      'ko': '도마의 추도'
    },
    'offsetX': 240,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1018: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '仰望苍穹，不断迈进',
      'de': 'Der Weg zur Erneuerung',
      'en': 'Ever March Heavensward',
      'fr': 'La voie du renouveau',
      'ja': '蒼天を仰ぎ、歩み続ける',
      'ko': '창천을 보며 나아가자'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 114
  },
  1019: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '目送生者前行',
      'de': 'Trauer und Hoffnung',
      'en': 'The Gift of Mercy',
      'fr': 'Acceptation',
      'ja': '僕たちは還り、君を見送ろう',
      'ko': '우리는 돌아가 그대를 보내리'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1020: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '大镰的意义',
      'de': 'Die Bedeutung der Sense',
      'en': 'The Harvest Begins',
      'fr': 'La vraie puissance de la faux',
      'ja': '大鎌の意味',
      'ko': '큰낫의 의미'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1021: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '暗杀道',
      'de': 'Die Kunst des Tötens',
      'en': 'The Killing Art',
      'fr': 'La voie du néant',
      'ja': '暗殺道',
      'ko': '암살의 길'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  1022: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '贤者的短杖',
      'de': 'Des Weisen wundersames Werkzeug',
      'en': 'Sage\'s Focus',
      'fr': 'Les armes du sage',
      'ja': '賢者の短杖',
      'ko': '현자의 짧은 지팡이'
    },
    'offsetX': 40,
    'offsetY': 6,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1023: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '生命瞬逝，术道恒久',
      'de': 'Das Leben ist kurz, die Kunst ist lang',
      'en': 'Life Ephemeral, Path Eternal',
      'fr': 'Existences éphémères et savoir éternel',
      'ja': '人命は儚く、術のみちは永久に',
      'ko': '생명은 덧없으나 기술은 영원하리'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 50
  },
  1035: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '究极神兵幻巧战',
      'de': 'Traumprüfung - Ultima',
      'en': 'Ultima\'s Bane (Unreal)',
      'fr': 'Le fléau d\'Ultima (irréel)',
      'ja': '幻アルテマウェポン破壊作戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 31
  },
  1036: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '天然要害沙斯塔夏溶洞',
      'de': 'Sastasha',
      'en': 'Sastasha',
      'fr': 'Sastasha',
      'ja': '天然要害 サスタシャ浸食洞',
      'ko': '사스타샤 침식 동굴'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1037: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '地下灵殿塔姆·塔拉墓园',
      'de': 'Totenacker Tam-Tara',
      'en': 'The Tam–Tara Deepcroft',
      'fr': 'L\'Hypogée de Tam-Tara',
      'ja': '地下霊殿 タムタラの墓所',
      'ko': '탐타라 묘소'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 300,
    'weatherRate': 0
  },
  1038: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '封锁坑道铜铃铜山',
      'de': 'Kupferglocken-Mine',
      'en': 'Copperbell Mines',
      'fr': 'Les Mines de Clochecuivre',
      'ja': '封鎖坑道 カッパーベル銅山',
      'ko': '구리종 광산'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1039: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '监狱废墟托托·拉克千狱',
      'de': 'Tausend Löcher von Toto-Rak',
      'en': 'The Thousand Maws of Toto–Rak',
      'fr': 'Les Mille Gueules de Toto-Rak',
      'ja': '監獄廃墟 トトラクの千獄',
      'ko': '토토라크 감옥'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1040: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '名门府邸静语庄园',
      'de': 'Haukke-Herrenhaus',
      'en': 'Haukke Manor',
      'fr': 'Le Manoir des Haukke',
      'ja': '名門屋敷 ハウケタ御用邸',
      'ko': '하우케타 별궁'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1041: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '休养胜地布雷福洛克斯野营地',
      'de': 'Brüllvolx\' Langrast',
      'en': 'Brayflox\'s Longstop',
      'fr': 'Le Bivouac de Brayflox',
      'ja': '奪還支援 ブレイフロクスの野営地',
      'ko': '브레이플록스의 야영지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1042: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '对龙城塞石卫塔',
      'de': 'Steinerne Wacht',
      'en': 'The Stone Vigil',
      'fr': 'Le Vigile de Pierre',
      'ja': '城塞攻略 ストーンヴィジル',
      'ko': '돌방패 경계초소'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 27
  },
  1043: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '神兵要塞帝国南方堡',
      'de': 'Castrum Meridianum - Außenbereich',
      'en': 'Castrum Meridianum',
      'fr': 'Castrum Meridianum',
      'ja': '外郭攻略 カストルム・メリディアヌム',
      'ko': '카스트룸 메리디아눔'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1044: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '最终决战天幕魔导城',
      'de': 'Castrum Meridianum - Praetorium',
      'en': 'The Praetorium',
      'fr': 'Le Praetorium',
      'ja': '最終決戦 魔導城プラエトリウム',
      'ko': '마도성 프라이토리움'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1045: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '伊弗利特讨伐战',
      'de': 'Das Grab der Lohe',
      'en': 'The Bowl of Embers',
      'fr': 'Le Cratère des tisons',
      'ja': 'イフリート討伐戦',
      'ko': '이프리트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 25
  },
  1046: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '泰坦讨伐战',
      'de': 'Der Nabel',
      'en': 'The Navel',
      'fr': 'Le Nombril',
      'ja': 'タイタン討伐戦',
      'ko': '타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  1047: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '迦楼罗讨伐战',
      'de': 'Das Tosende Auge',
      'en': 'The Howling Eye',
      'fr': 'Hurlœil',
      'ja': 'ガルーダ討伐戦',
      'ko': '가루다 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  1048: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '究极神兵破坏作战',
      'de': 'Porta Decumana',
      'en': 'The Porta Decumana',
      'fr': 'Porta Decumana',
      'ja': 'アルテマウェポン破壊作戦',
      'ko': '알테마 웨폰 파괴작전'
    },
    'offsetX': 772,
    'offsetY': 600,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1049: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'cn': '里塔提恩强攻战',
      'de': 'Kap Westwind',
      'en': 'Cape Westwind',
      'fr': 'Le Cap Vendouest',
      'ja': 'リットアティン強襲戦',
      'ko': '리트아틴 강습전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1050: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '近东秘宝阿尔扎达尔海底遗迹群',
      'de': 'Alzadaals Vermächtnis',
      'en': 'Alzadaal\'s Legacy',
      'fr': 'Le legs d\'Alzadaal',
      'ja': '近東秘宝 アルザダール海底遺跡群',
      'ko': '알자달 해저 유적'
    },
    'offsetX': 15,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1051: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '涅尔瓦的帝国',
      'de': 'Nervas Reich',
      'en': 'Forlorn Glory',
      'fr': 'Nerva, le patriote',
      'ja': 'ネルウァの帝国',
      'ko': '네르바의 제국'
    },
    'offsetX': -230,
    'offsetY': -250,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  1052: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'cn': '拉哈布雷亚讨伐战',
      'de': 'Das Antlitz der Kaltblütigkeit',
      'en': 'Devastation',
      'fr': 'Le Praetorium en flammes',
      'ja': 'アシエン・ラハブレア討伐戦',
      'ko': '아씨엔 라하브레아 토벌전'
    },
    'offsetX': 704,
    'offsetY': -480,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1054: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '灿烂神域阿格莱亚',
      'de': 'Aglaia',
      'en': 'Aglaia',
      'fr': 'Domaine divin - Aglaé',
      'ja': '輝ける神域 アグライア',
      'ko': '찬란한 신역 아글라이아'
    },
    'offsetX': -80,
    'offsetY': -550,
    'sizeFactor': 200,
    'weatherRate': 147
  },
  1058: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '水晶冲突（角力学校：自定赛）',
      'de': 'Crystalline Conflict: Die Palästra (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - The Palaistra)',
      'fr': 'Crystalline Conflict (partie personnalisée - Le Palestre)',
      'ja': 'クリスタルコンフリクト(パライストラ：カスタムマッチ)',
      'ko': '크리스탈라인 컨플릭트(팔라이스트라: 친선 경기)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1059: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '水晶冲突（火山之心：自定赛）',
      'de': 'Crystalline Conflict: Das Herz des Vulkans (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - The Volcanic Heart)',
      'fr': 'Crystalline Conflict (partie personnalisée - Le Cœur volcanique)',
      'ja': 'クリスタルコンフリクト(ヴォルカニック・ハート：カスタムマッチ)',
      'ko': '크리스탈라인 컨플릭트(화산심장: 친선 경기)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1060: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '水晶冲突（九霄云上：自定赛）',
      'de': 'Crystalline Conflict: Wolke Sieben (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - Cloud Nine)',
      'fr': 'Crystalline Conflict (partie personnalisée - Le Petit Nuage)',
      'ja': 'クリスタルコンフリクト(クラウドナイン：カスタムマッチ)',
      'ko': '크리스탈라인 컨플릭트(절정의 구름: 친선 경기)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1062: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '凛冽洞天披雪大冰壁',
      'de': 'Das Schneekleid',
      'en': 'Snowcloak',
      'fr': 'Manteneige',
      'ja': '氷結潜窟 スノークローク大氷壁',
      'ko': '얼음외투 대빙벽'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  1063: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '幻龙残骸密约之塔',
      'de': 'Hüter des Sees',
      'en': 'The Keeper of the Lake',
      'fr': 'Le Gardien du lac',
      'ja': '幻龍残骸 黙約の塔',
      'ko': '묵약의 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 74
  },
  1064: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天山绝顶索姆阿尔灵峰',
      'de': 'Sohm Al',
      'en': 'Sohm Al',
      'fr': 'Sohm Al',
      'ja': '霊峰踏破 ソーム・アル',
      'ko': '솜 알'
    },
    'offsetX': 185,
    'offsetY': 51,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1065: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '邪龙王座龙巢神殿',
      'de': 'Nest des Drachen',
      'en': 'The Aery',
      'fr': 'L\'Aire',
      'ja': '邪竜血戦 ドラゴンズエアリー',
      'ko': '용의 둥지'
    },
    'offsetX': -40,
    'offsetY': 55,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  1066: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '圣教中枢伊修加德教皇厅',
      'de': 'Erzbasilika',
      'en': 'The Vault',
      'fr': 'La Voûte',
      'ja': '強硬突入 イシュガルド教皇庁',
      'ko': '이슈가르드 교황청'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1067: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '莫古力贤王歼灭战',
      'de': 'Königliche Konfrontation (schwer)',
      'en': 'Thornmarch (Hard)',
      'fr': 'La Lisière de ronces (brutal)',
      'ja': '善王モグル・モグXII世討滅戦',
      'ko': '선왕 모그루 모그 XII세 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 30
  },
  1068: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'cn': '皇都伊修加德保卫战',
      'de': 'Der Schicksalsweg',
      'en': 'The Steps of Faith',
      'fr': 'Le Siège de la sainte Cité d\'Ishgard',
      'ja': '皇都イシュガルド防衛戦',
      'ko': '성도 이슈가르드 방어전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  1069: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'cn': '多变迷宫 希拉狄哈水道',
      'de': 'Die Unterstadt von Sil\'dih',
      'en': 'The Sil\'dihn Subterrane',
      'fr': 'Les canalisations sildiennes - Donjon à embranchements',
      'ja': 'ヴァリアントダンジョン シラディハ水道',
      'ko': '변형 던전: 실디하 지하수도'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1070: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '异界孤城特罗亚宫廷',
      'de': 'Der Schwarze Hof von Troia',
      'en': 'The Fell Court of Troia',
      'fr': 'Le Château de Troïa',
      'ja': '異界孤城 トロイアコート',
      'ko': '트로이아 궁정'
    },
    'offsetX': -76,
    'offsetY': -180,
    'sizeFactor': 200,
    'weatherRate': 149
  },
  1071: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '巴尔巴莉希娅歼灭战',
      'de': 'Prophetie - Barbarizia',
      'en': 'Storm\'s Crown',
      'fr': 'La Toison des tempêtes',
      'ja': 'バルバリシア討滅戦',
      'ko': '바르바리차 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 149
  },
  1072: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '巴尔巴莉希娅歼殛战',
      'de': 'Eschatos - Barbarizia',
      'en': 'Storm\'s Crown (Extreme)',
      'fr': 'La Toison des tempêtes (extrême)',
      'ja': '極バルバリシア討滅戦',
      'ko': '극 바르바리차 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 149
  },
  1075: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'cn': '异闻迷宫 异闻希拉狄哈水道',
      'de': 'Die kuriose Unterstadt von Sil\'dih',
      'en': 'Another Sil\'dihn Subterrane',
      'fr': 'Les canalisations sildiennes annexes - Donjon alternatif',
      'ja': 'アナザーダンジョン 異聞シラディハ水道',
      'ko': '파생 던전: 번외 실디하 지하수도'
    },
    'offsetX': 335,
    'offsetY': 100,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1076: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'cn': '异闻迷宫 零式异闻希拉狄哈水道',
      'de': 'Die kuriose Unterstadt von Sil\'dih (episch)',
      'en': 'Another Sil\'dihn Subterrane (Savage)',
      'fr': 'Les canalisations sildiennes annexes - Donjon alternatif (sadique)',
      'ja': 'アナザーダンジョン 異聞シラディハ水道 零式',
      'ko': '파생 던전: 번외 실디하 지하수도(영웅)'
    },
    'offsetX': 335,
    'offsetY': 100,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1081: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 炼净之狱1',
      'de': 'Abyssos - Fünfter Kreis',
      'en': 'Abyssos: The Fifth Circle',
      'fr': 'Le Purgatoire du Pandæmonium - Cages',
      'ja': '万魔殿パンデモニウム：煉獄編1',
      'ko': '마의 전당 판데모니움: 연옥편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1082: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 炼净之狱1',
      'de': 'Abyssos - Fünfter Kreis (episch)',
      'en': 'Abyssos: The Fifth Circle (Savage)',
      'fr': 'Le Purgatoire du Pandæmonium - Cages (sadique)',
      'ja': '万魔殿パンデモニウム零式：煉獄編1',
      'ko': '마의 전당 판데모니움: 연옥편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1083: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 炼净之狱2',
      'de': 'Abyssos - Sechster Kreis',
      'en': 'Abyssos: The Sixth Circle',
      'fr': 'Le Purgatoire du Pandæmonium - Croisements',
      'ja': '万魔殿パンデモニウム：煉獄編2',
      'ko': '마의 전당 판데모니움: 연옥편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1084: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 炼净之狱2',
      'de': 'Abyssos - Sechster Kreis (episch)',
      'en': 'Abyssos: The Sixth Circle (Savage)',
      'fr': 'Le Purgatoire du Pandæmonium - Croisements (sadique)',
      'ja': '万魔殿パンデモニウム零式：煉獄編2',
      'ko': '마의 전당 판데모니움: 연옥편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1085: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 炼净之狱3',
      'de': 'Abyssos - Siebter Kreis',
      'en': 'Abyssos: The Seventh Circle',
      'fr': 'Le Purgatoire du Pandæmonium - Racines',
      'ja': '万魔殿パンデモニウム：煉獄編3',
      'ko': '마의 전당 판데모니움: 연옥편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1086: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 炼净之狱3',
      'de': 'Abyssos - Siebter Kreis (episch)',
      'en': 'Abyssos: The Seventh Circle (Savage)',
      'fr': 'Le Purgatoire du Pandæmonium - Racines (sadique)',
      'ja': '万魔殿パンデモニウム零式：煉獄編3',
      'ko': '마의 전당 판데모니움: 연옥편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1087: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 炼净之狱4',
      'de': 'Abyssos - Achter Kreis',
      'en': 'Abyssos: The Eighth Circle',
      'fr': 'Le Purgatoire du Pandæmonium - Hérédité',
      'ja': '万魔殿パンデモニウム：煉獄編4',
      'ko': '마의 전당 판데모니움: 연옥편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1088: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 炼净之狱4',
      'de': 'Abyssos - Achter Kreis (episch)',
      'en': 'Abyssos: The Eighth Circle (Savage)',
      'fr': 'Le Purgatoire du Pandæmonium - Hérédité (sadique)',
      'ja': '万魔殿パンデモニウム零式：煉獄編4',
      'ko': '마의 전당 판데모니움: 연옥편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1090: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '萨菲洛特幻巧战',
      'de': 'Traumprüfung - Sephirot',
      'en': 'Containment Bay S1T7 (Unreal)',
      'fr': 'Unité de contention S1P7 (irréel)',
      'ja': '幻魔神セフィロト討滅戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 66
  },
  1091: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '失传的力量',
      'de': 'Wo alles seinen Anfang nimmt',
      'en': 'Where Everything Begins',
      'fr': 'Au commencement était Zero',
      'ja': '失われた力',
      'ko': '잃어버린 힘'
    },
    'offsetX': 143,
    'offsetY': -64,
    'sizeFactor': 200,
    'weatherRate': 149
  },
  1095: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '卢比坎特歼灭战',
      'de': 'Prophetie - Rubicante',
      'en': 'Mount Ordeals',
      'fr': 'Le Mont du Supplice',
      'ja': 'ルビカンテ討滅戦',
      'ko': '루비칸테 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1096: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '卢比坎特歼殛战',
      'de': 'Eschatos - Rubicante',
      'en': 'Mount Ordeals (Extreme)',
      'fr': 'Le Mont du Supplice (extrême)',
      'ja': '極ルビカンテ討滅戦',
      'ko': '극 루비칸테 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1097: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '雪山奥窟冥魂石洞',
      'de': 'Lapis Manalis',
      'en': 'Lapis Manalis',
      'fr': 'Lapis Manalis',
      'ja': '雪山冥洞 ラピス・マナリス',
      'ko': '라피스 마날리스'
    },
    'offsetX': -46,
    'offsetY': 570,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  1099: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下1～10层',
      'de': 'Eureka Orthos (Ebenen 1-10)',
      'en': 'Eureka Orthos (Floors 1-10)',
      'fr': 'Eurêka Orthos (sous-sols 1-10)',
      'ja': 'オルト・エウレカ B1～B10',
      'ko': '에우레카 오르토스 B1~B10'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1100: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下11～20层',
      'de': 'Eureka Orthos (Ebenen 11-20)',
      'en': 'Eureka Orthos (Floors 11-20)',
      'fr': 'Eurêka Orthos (sous-sols 11-20)',
      'ja': 'オルト・エウレカ B11～B20',
      'ko': '에우레카 오르토스 B11~B20'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1101: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下21～30层',
      'de': 'Eureka Orthos (Ebenen 21-30)',
      'en': 'Eureka Orthos (Floors 21-30)',
      'fr': 'Eurêka Orthos (sous-sols 21-30)',
      'ja': 'オルト・エウレカ B21～B30',
      'ko': '에우레카 오르토스 B21~B30'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1102: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下31～40层',
      'de': 'Eureka Orthos (Ebenen 31-40)',
      'en': 'Eureka Orthos (Floors 31-40)',
      'fr': 'Eurêka Orthos (sous-sols 31-40)',
      'ja': 'オルト・エウレカ B31～B40',
      'ko': '에우레카 오르토스 B31~B40'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1103: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下41～50层',
      'de': 'Eureka Orthos (Ebenen 41-50)',
      'en': 'Eureka Orthos (Floors 41-50)',
      'fr': 'Eurêka Orthos (sous-sols 41-50)',
      'ja': 'オルト・エウレカ B41～B50',
      'ko': '에우레카 오르토스 B41~B50'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1104: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下51～60层',
      'de': 'Eureka Orthos (Ebenen 51-60)',
      'en': 'Eureka Orthos (Floors 51-60)',
      'fr': 'Eurêka Orthos (sous-sols 51-60)',
      'ja': 'オルト・エウレカ B51～B60',
      'ko': '에우레카 오르토스 B51~B60'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1105: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下61～70层',
      'de': 'Eureka Orthos (Ebenen 61-70)',
      'en': 'Eureka Orthos (Floors 61-70)',
      'fr': 'Eurêka Orthos (sous-sols 61-70)',
      'ja': 'オルト・エウレカ B61～B70',
      'ko': '에우레카 오르토스 B61~B70'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1106: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下71～80层',
      'de': 'Eureka Orthos (Ebenen 71-80)',
      'en': 'Eureka Orthos (Floors 71-80)',
      'fr': 'Eurêka Orthos (sous-sols 71-80)',
      'ja': 'オルト・エウレカ B71～B80',
      'ko': '에우레카 오르토스 B71~B80'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1107: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下81～90层',
      'de': 'Eureka Orthos (Ebenen 81-90)',
      'en': 'Eureka Orthos (Floors 81-90)',
      'fr': 'Eurêka Orthos (sous-sols 81-90)',
      'ja': 'オルト・エウレカ B81～B90',
      'ko': '에우레카 오르토스 B81~B90'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1108: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下91～100层',
      'de': 'Eureka Orthos (Ebenen 91-100)',
      'en': 'Eureka Orthos (Floors 91-100)',
      'fr': 'Eurêka Orthos (sous-sols 91-100)',
      'ja': 'オルト・エウレカ B91～B100',
      'ko': '에우레카 오르토스 B91~B100'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1109: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '学识宝库迦巴勒幻想图书馆',
      'de': 'Große Gubal-Bibliothek',
      'en': 'The Great Gubal Library',
      'fr': 'La Grande bibliothèque de Gubal',
      'ja': '禁書回収 グブラ幻想図書館',
      'ko': '구브라 환상도서관'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1110: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '血战苍穹魔科学研究所',
      'de': 'Ätherochemisches For<SoftHyphen/>schungs<SoftHyphen/>labor',
      'en': 'The Aetherochemical Research Facility',
      'fr': 'Le Laboratoire de magismologie',
      'ja': '蒼天聖戦 魔科学研究所',
      'ko': '마과학 연구소'
    },
    'offsetX': -18,
    'offsetY': 149,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1111: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '星海空间颠倒塔',
      'de': 'Antiturm',
      'en': 'The Antitower',
      'fr': 'L\'Antitour',
      'ja': '星海観測 逆さの塔',
      'ko': '거꾸로 선 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1112: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天龙宫殿忆罪宫',
      'de': 'Sohr Khai',
      'en': 'Sohr Khai',
      'fr': 'Sohr Khai',
      'ja': '天竜宮殿 ソール・カイ',
      'ko': '소르 카이'
    },
    'offsetX': 370,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1113: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '险峻峡谷塞尔法特尔溪谷',
      'de': 'Xelphatol',
      'en': 'Xelphatol',
      'fr': 'Xelphatol',
      'ja': '峻厳渓谷 ゼルファトル',
      'ko': '젤파톨'
    },
    'offsetX': -148,
    'offsetY': 35,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  1114: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '坚牢铁壁巴埃萨长城',
      'de': 'Baelsar-Wall',
      'en': 'Baelsar\'s Wall',
      'fr': 'La Muraille de Baelsar',
      'ja': '巨大防壁 バエサルの長城',
      'ko': '바일사르 장성'
    },
    'offsetX': 182,
    'offsetY': 32,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  1115: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '充满活力的父子',
      'de': 'Väterliche Liebe',
      'en': 'Generational Bonding',
      'fr': 'Tel gentilhomme, tel gentilhomme',
      'ja': 'はつらつとした親子',
      'ko': '은밀한 음모'
    },
    'offsetX': -230,
    'offsetY': -250,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  1116: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '机关大殿',
      'de': 'Die Mechanische Menagerie',
      'en': 'The Clockwork Castletown',
      'fr': 'Le Traquenard oriental',
      'ja': '東方絡繰御殿',
      'ko': '동방 꼭두각시 어전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1117: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '水晶冲突（机关大殿：自定赛）',
      'de': 'Crystalline Conflict: Die Mechanische Menagerie (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - The Clockwork Castletown)',
      'fr': 'Crys. Conflict (partie perso. - Le Traquenard oriental)',
      'ja': 'クリスタルコンフリクト(東方絡繰御殿：カスタムマッチ)',
      'ko': '크리스탈라인 컨플릭트(동방 꼭두각시 어전: 친선 경기)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1118: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '喜悦神域欧芙洛绪涅',
      'de': 'Euphrosyne',
      'en': 'Euphrosyne',
      'fr': 'Domaine divin - Euphrosyne',
      'ja': '喜びの神域 エウプロシュネ',
      'ko': '환희의 신역 에우프로시네'
    },
    'offsetX': 0,
    'offsetY': 480,
    'sizeFactor': 200,
    'weatherRate': 147
  },
  1120: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '未料想过的交易',
      'de': 'Der Wert einer Buuds',
      'en': 'An Unforeseen Bargain',
      'fr': 'Pour une bouchée de pain',
      'ja': 'パンひとつと引き換えに',
      'ko': '빵 하나와 바꾸어'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 58
  },
  1121: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '索菲娅幻巧战',
      'de': 'Traumprüfung - Sophia',
      'en': 'Containment Bay P1T6 (Unreal)',
      'fr': 'Unité de contention P1P6 (irréel)',
      'ja': '幻女神ソフィア討滅戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 69
  },
  1122: {
    'contentType': 28,
    'exVersion': 4,
    'name': {
      'cn': '欧米茄绝境验证战',
      'de': 'Omega (fatal)',
      'en': 'The Omega Protocol (Ultimate)',
      'fr': 'Le Protocole Oméga (fatal)',
      'ja': '絶オメガ検証戦',
      'ko': '절 오메가 검증전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 150
  },
  1123: {
    'contentType': 9,
    'exVersion': 4,
    'name': {
      'cn': '厄尔庇斯育体宝殿',
      'de': 'Gymnasion Agonon',
      'en': 'The Shifting Gymnasion Agonon',
      'fr': 'Elpis Gymnasion',
      'ja': '宝物庫 エルピス・ギュムナシオン祭殿',
      'ko': '보물고 엘피스 김나시온 제전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1126: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '间歇灵泉哈姆岛',
      'de': 'Ätherborn',
      'en': 'The Aetherfont',
      'fr': 'L\'île de Haam',
      'ja': '星霊間欠 ハーム島'
    },
    'offsetX': 368,
    'offsetY': -277,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1137: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'de': 'Der Rokkon',
      'en': 'Mount Rokkon',
      'fr': 'Le mont Rokkon - Donjon à embranchements',
      'ja': 'ヴァリアントダンジョン 六根山'
    },
    'offsetX': -145,
    'offsetY': -820,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1140: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '高贝扎歼灭战',
      'de': 'Prophetie - Golbez',
      'en': 'The Voidcast Dais',
      'fr': 'La Chaire de l\'Exilée',
      'ja': 'ゴルベーザ討滅戦'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 149
  },
  1141: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '高贝扎歼殛战',
      'de': 'Eschatos - Golbez',
      'en': 'The Voidcast Dais (Extreme)',
      'fr': 'La Chaire de l\'Exilée (extrême)',
      'ja': '極ゴルベーザ討滅戦'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 149
  },
  1142: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '漂流海域妖歌海',
      'de': 'Sirenen-See',
      'en': 'The Sirensong Sea',
      'fr': 'La Mer du Chant des sirènes',
      'ja': '漂流海域 セイレーン海',
      'ko': '세이렌 해'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 36
  },
  1143: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '试炼行路巴儿达木霸道',
      'de': 'Bardams Probe',
      'en': 'Bardam\'s Mettle',
      'fr': 'La Force de Bardam',
      'ja': '伝統試練 バルダム覇道',
      'ko': '바르담 패도'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1144: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '解放决战多玛王城',
      'de': 'Burg Doma',
      'en': 'Doma Castle',
      'fr': 'Le Château de Doma',
      'ja': '解放決戦 ドマ城',
      'ko': '도마 성'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1145: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '巨炮要塞帝国白山堡',
      'de': 'Castrum Abania',
      'en': 'Castrum Abania',
      'fr': 'Castrum Abania',
      'ja': '巨砲要塞 カストルム・アバニア',
      'ko': '카스트룸 아바니아'
    },
    'offsetX': 72,
    'offsetY': -186,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1146: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '鏖战红莲阿拉米格',
      'de': 'Ala Mhigo',
      'en': 'Ala Mhigo',
      'fr': 'Ala Mhigo',
      'ja': '紅蓮決戦 アラミゴ',
      'ko': '알라미고'
    },
    'offsetX': 292,
    'offsetY': -163,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1147: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 荒天之狱1',
      'de': 'Anabaseios - Neunter Kreis',
      'en': 'Anabaseios: The Ninth Circle',
      'fr': 'Le Paradis du Pandæmonium - Métempsycose',
      'ja': '万魔殿パンデモニウム：天獄編1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1148: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 荒天之狱1',
      'de': 'Anabaseios - Neunter Kreis (episch)',
      'en': 'Anabaseios: The Ninth Circle (Savage)',
      'fr': 'Le Paradis du Pandæmonium - Métempsycose (sadique)',
      'ja': '万魔殿パンデモニウム零式：天獄編1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1149: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 荒天之狱2',
      'de': 'Anabaseios - Zehnter Kreis',
      'en': 'Anabaseios: The Tenth Circle',
      'fr': 'Le Paradis du Pandæmonium - Monochrome',
      'ja': '万魔殿パンデモニウム：天獄編2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1150: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 荒天之狱2',
      'de': 'Anabaseios - Zehnter Kreis (episch)',
      'en': 'Anabaseios: The Tenth Circle (Savage)',
      'fr': 'Le Paradis du Pandæmonium - Monochrome (sadique)',
      'ja': '万魔殿パンデモニウム零式：天獄編2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1151: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 荒天之狱3',
      'de': 'Anabaseios - Elfter Kreis',
      'en': 'Anabaseios: The Eleventh Circle',
      'fr': 'Le Paradis du Pandæmonium - Tribunal',
      'ja': '万魔殿パンデモニウム：天獄編3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1152: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 荒天之狱3',
      'de': 'Anabaseios - Elfter Kreis (episch)',
      'en': 'Anabaseios: The Eleventh Circle (Savage)',
      'fr': 'Le Paradis du Pandæmonium - Tribunal (sadique)',
      'ja': '万魔殿パンデモニウム零式：天獄編3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1153: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 荒天之狱4',
      'de': 'Anabaseios - Zwölfter Kreis',
      'en': 'Anabaseios: The Twelfth Circle',
      'fr': 'Le Paradis du Pandæmonium - Apothéose',
      'ja': '万魔殿パンデモニウム：天獄編4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1154: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 荒天之狱4',
      'de': 'Anabaseios - Zwölfter Kreis (episch)',
      'en': 'Anabaseios: The Twelfth Circle (Savage)',
      'fr': 'Le Paradis du Pandæmonium - Apothéose (sadique)',
      'ja': '万魔殿パンデモニウム零式：天獄編4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1155: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'de': 'Der kuriose Rokkon',
      'en': 'Another Mount Rokkon',
      'fr': 'Le mont Rokkon annexe - Donjon alternatif',
      'ja': 'アナザーダンジョン 異聞六根山'
    },
    'offsetX': 0,
    'offsetY': 40,
    'sizeFactor': 200,
    'weatherRate': 74
  },
  1156: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'de': 'Der kuriose Rokkon (episch)',
      'en': 'Another Mount Rokkon (Savage)',
      'fr': 'Le mont Rokkon annexe - Donjon alternatif (sadique)',
      'ja': 'アナザーダンジョン 異聞六根山 零式'
    },
    'offsetX': 0,
    'offsetY': 40,
    'sizeFactor': 200,
    'weatherRate': 74
  },
  1157: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '祖尔宛幻巧战',
      'de': 'Traumprüfung - Zurvan',
      'en': 'Containment Bay Z1T9 (Unreal)',
      'fr': 'Unité de contention Z1P9 (irréel)',
      'ja': '幻鬼神ズルワーン討滅戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 75
  },
  1164: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'de': 'Monduntergrund',
      'en': 'The Lunar Subterrane',
      'fr': 'Le Souterrain lunaire',
      'ja': '深淵潜行 月の地下渓谷'
    },
    'offsetX': 440,
    'offsetY': 130,
    'sizeFactor': 200,
    'weatherRate': 149
  },
  1168: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'de': 'Prophetie - Zeromus',
      'en': 'The Abyssal Fracture',
      'fr': 'La Fracture abyssale',
      'ja': 'ゼロムス討滅戦'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 149
  },
  1169: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'de': 'Eschatos - Zeromus',
      'en': 'The Abyssal Fracture (Extreme)',
      'fr': 'La Fracture abyssale (extrême)',
      'ja': '極ゼロムス討滅戦'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 149
  },
  1173: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '死亡大地终末焦土',
      'de': 'Das Kargland',
      'en': 'The Burn',
      'fr': 'L\'Escarre',
      'ja': '永久焦土 ザ・バーン',
      'ko': '영구 초토지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 97
  },
  1174: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '国境防线基姆利特暗区',
      'de': 'Die Ghimlyt-Finsternis',
      'en': 'The Ghimlyt Dark',
      'fr': 'Les Ténèbres de Ghimlyt',
      'ja': '境界戦線 ギムリトダーク',
      'ko': '김리트 황야'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1175: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'de': 'Traumprüfung - Singularitäts-Reaktor',
      'en': 'The Singularity Reactor (Unreal)',
      'fr': 'Le Réacteur de singularité (irréel)',
      'ja': '幻ナイツ・オブ・ラウンド討滅戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 56
  },
  1178: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'de': 'Thaleia',
      'en': 'Thaleia',
      'fr': 'Domaine divin - Thalie',
      'ja': '華めく神域 タレイア'
    },
    'offsetX': 800,
    'offsetY': 783,
    'sizeFactor': 200,
    'weatherRate': 147
  },
  128: {
    'exVersion': 0,
    'name': {
      'cn': '利姆萨·罗敏萨上层甲板',
      'de': 'Obere Decks',
      'en': 'Limsa Lominsa Upper Decks',
      'fr': 'Limsa Lominsa - Le Tillac',
      'ja': 'リムサ・ロミンサ：上甲板層',
      'ko': '림사 로민사 상층 갑판'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 14
  },
  129: {
    'exVersion': 0,
    'name': {
      'cn': '利姆萨·罗敏萨下层甲板',
      'de': 'Untere Decks',
      'en': 'Limsa Lominsa Lower Decks',
      'fr': 'Limsa Lominsa - L\'Entrepont',
      'ja': 'リムサ・ロミンサ：下甲板層',
      'ko': '림사 로민사 하층 갑판'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 15
  },
  130: {
    'exVersion': 0,
    'name': {
      'cn': '乌尔达哈现世回廊',
      'de': 'Nald-Kreuzgang',
      'en': 'Ul\'dah - Steps of Nald',
      'fr': 'Ul\'dah - Faubourg de Nald',
      'ja': 'ウルダハ：ナル回廊',
      'ko': '울다하 날 회랑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 7
  },
  131: {
    'exVersion': 0,
    'name': {
      'cn': '乌尔达哈来生回廊',
      'de': 'Thal-Kreuzgang',
      'en': 'Ul\'dah - Steps of Thal',
      'fr': 'Ul\'dah - Faubourg de Thal',
      'ja': 'ウルダハ：ザル回廊',
      'ko': '울다하 달 회랑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 8
  },
  132: {
    'exVersion': 0,
    'name': {
      'cn': '格里达尼亚新街',
      'de': 'Neu-Gridania',
      'en': 'New Gridania',
      'fr': 'Nouvelle Gridania',
      'ja': 'グリダニア：新市街',
      'ko': '그리다니아 신시가지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 1
  },
  133: {
    'exVersion': 0,
    'name': {
      'cn': '格里达尼亚旧街',
      'de': 'Alt-Gridania',
      'en': 'Old Gridania',
      'fr': 'Vieille Gridania',
      'ja': 'グリダニア：旧市街',
      'ko': '그리다니아 구시가지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 2
  },
  134: {
    'exVersion': 0,
    'name': {
      'cn': '中拉诺西亚',
      'de': 'Zentrales La Noscea',
      'en': 'Middle La Noscea',
      'fr': 'Noscea centrale',
      'ja': '中央ラノシア',
      'ko': '중부 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 16
  },
  135: {
    'exVersion': 0,
    'name': {
      'cn': '拉诺西亚低地',
      'de': 'Unteres La Noscea',
      'en': 'Lower La Noscea',
      'fr': 'Basse-Noscea',
      'ja': '低地ラノシア',
      'ko': '저지 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 17
  },
  136: {
    'exVersion': 0,
    'name': {
      'cn': '海雾村',
      'de': 'Dorf des Nebels',
      'en': 'Mist',
      'fr': 'Brumée',
      'ja': 'ミスト・ヴィレッジ',
      'ko': '안갯빛 마을'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 14
  },
  137: {
    'exVersion': 0,
    'name': {
      'cn': '东拉诺西亚',
      'de': 'Östliches La Noscea',
      'en': 'Eastern La Noscea',
      'fr': 'Noscea orientale',
      'ja': '東ラノシア',
      'ko': '동부 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 18
  },
  138: {
    'exVersion': 0,
    'name': {
      'cn': '西拉诺西亚',
      'de': 'Westliches La Noscea',
      'en': 'Western La Noscea',
      'fr': 'Noscea occidentale',
      'ja': '西ラノシア',
      'ko': '서부 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 19
  },
  139: {
    'exVersion': 0,
    'name': {
      'cn': '拉诺西亚高地',
      'de': 'Oberes La Noscea',
      'en': 'Upper La Noscea',
      'fr': 'Haute-Noscea',
      'ja': '高地ラノシア',
      'ko': '고지 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 20
  },
  140: {
    'exVersion': 0,
    'name': {
      'cn': '西萨纳兰',
      'de': 'Westliches Thanalan',
      'en': 'Western Thanalan',
      'fr': 'Thanalan occidental',
      'ja': '西ザナラーン',
      'ko': '서부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 9
  },
  141: {
    'exVersion': 0,
    'name': {
      'cn': '中萨纳兰',
      'de': 'Zentrales Thanalan',
      'en': 'Central Thanalan',
      'fr': 'Thanalan central',
      'ja': '中央ザナラーン',
      'ko': '중부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 10
  },
  142: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '艾玛吉娜杯斗技大会决赛',
      'de': 'Das Drachenhals-Kolosseum',
      'en': 'The Dragon\'s Neck',
      'fr': 'Le Col du dragon',
      'ja': 'アマジナ杯闘技会決勝戦',
      'ko': '아마지나배 투기대회 결승전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  143: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '(6.1)皇都伊修加德保卫战',
      'de': '(6.1)Der Schicksalsweg',
      'en': '(6.1)The Steps of Faith',
      'fr': '(6.1)Le Siège de la sainte Cité d\'Ishgard',
      'ja': '(6.1)皇都イシュガルド防衛戦',
      'ko': '(6.1)성도 이슈가르드 방어전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  145: {
    'exVersion': 0,
    'name': {
      'cn': '东萨纳兰',
      'de': 'Östliches Thanalan',
      'en': 'Eastern Thanalan',
      'fr': 'Thanalan oriental',
      'ja': '東ザナラーン',
      'ko': '동부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 11
  },
  146: {
    'exVersion': 0,
    'name': {
      'cn': '南萨纳兰',
      'de': 'Südliches Thanalan',
      'en': 'Southern Thanalan',
      'fr': 'Thanalan méridional',
      'ja': '南ザナラーン',
      'ko': '남부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 12
  },
  147: {
    'exVersion': 0,
    'name': {
      'cn': '北萨纳兰',
      'de': 'Nördliches Thanalan',
      'en': 'Northern Thanalan',
      'fr': 'Thanalan septentrional',
      'ja': '北ザナラーン',
      'ko': '북부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 13
  },
  148: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林中央林区',
      'de': 'Tiefer Wald',
      'en': 'Central Shroud',
      'fr': 'Forêt centrale',
      'ja': '黒衣森：中央森林',
      'ko': '검은장막 숲 중부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  150: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '(6.1)幻龙残骸密约之塔',
      'de': '(6.1)Hüter des Sees',
      'en': '(6.1)The Keeper of the Lake',
      'fr': '(6.1)Le Gardien du lac',
      'ja': '(6.1)幻龍残骸 黙約の塔',
      'ko': '(6.1)묵약의 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 74
  },
  151: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '水晶塔 暗之世界',
      'de': 'Die Welt der Dunkelheit',
      'en': 'The World of Darkness',
      'fr': 'La Tour de Cristal - Monde des Ténèbres',
      'ja': 'クリスタルタワー：闇の世界',
      'ko': '크리스탈 타워: 어둠의 세계'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  152: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林东部林区',
      'de': 'Ostwald',
      'en': 'East Shroud',
      'fr': 'Forêt de l\'est',
      'ja': '黒衣森：東部森林',
      'ko': '검은장막 숲 동부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 4
  },
  153: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林南部林区',
      'de': 'Südwald',
      'en': 'South Shroud',
      'fr': 'Forêt du sud',
      'ja': '黒衣森：南部森林',
      'ko': '검은장막 숲 남부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 5
  },
  154: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林北部林区',
      'de': 'Nordwald',
      'en': 'North Shroud',
      'fr': 'Forêt du nord',
      'ja': '黒衣森：北部森林',
      'ko': '검은장막 숲 북부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 6
  },
  155: {
    'exVersion': 0,
    'name': {
      'cn': '库尔札斯中央高地',
      'de': 'Zentrales Hochland von Coerthas',
      'en': 'Coerthas Central Highlands',
      'fr': 'Hautes terres du Coerthas central',
      'ja': 'クルザス中央高地',
      'ko': '커르다스 중앙고지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  156: {
    'exVersion': 0,
    'name': {
      'cn': '摩杜纳',
      'de': 'Mor Dhona',
      'en': 'Mor Dhona',
      'fr': 'Mor Dhona',
      'ja': 'モードゥナ',
      'ko': '모르도나'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 22
  },
  159: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '神灵圣域放浪神古神殿',
      'de': 'Palast des Wanderers',
      'en': 'The Wanderer\'s Palace',
      'fr': 'Le Palais du Vagabond',
      'ja': '旅神聖域 ワンダラーパレス',
      'ko': '방랑자의 궁전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  160: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '领航明灯天狼星灯塔',
      'de': 'Pharos Sirius',
      'en': 'Pharos Sirius',
      'fr': 'Le Phare de Sirius',
      'ja': '怪鳥巨塔 シリウス大灯台',
      'ko': '시리우스 대등대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  162: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '魔兽领域日影地修炼所',
      'de': 'Halatali',
      'en': 'Halatali',
      'fr': 'Halatali',
      'ja': '魔獣領域 ハラタリ修練所',
      'ko': '할라탈리 수련장'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  163: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '古代遗迹喀恩埋没圣堂',
      'de': 'Versunkener Tempel von Qarn',
      'en': 'The Sunken Temple of Qarn',
      'fr': 'Le Temple enseveli de Qarn',
      'ja': '遺跡探索 カルン埋没寺院',
      'ko': '카른의 무너진 사원'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  167: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '邪教驻地无限城古堡',
      'de': 'Die Ruinen von Amdapor',
      'en': 'Amdapor Keep',
      'fr': 'Le Château d\'Amdapor',
      'ja': '邪教排撃 古城アムダプール',
      'ko': '옛 암다포르 성'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  170: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '流沙迷宫樵鸣洞',
      'de': 'Sägerschrei',
      'en': 'Cutter\'s Cry',
      'fr': 'Le Gouffre hurlant',
      'ja': '流砂迷宮 カッターズクライ',
      'ko': '나무꾼의 비명'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  171: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '山中战线泽梅尔要塞',
      'de': 'Die Feste Dzemael',
      'en': 'Dzemael Darkhold',
      'fr': 'La Forteresse de Dzemael',
      'ja': '掃討作戦 ゼーメル要塞',
      'ko': '제멜 요새'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  172: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '毒雾洞窟黄金谷',
      'de': 'Goldklamm',
      'en': 'The Aurum Vale',
      'fr': 'Le Val d\'Aurum',
      'ja': '霧中行軍 オーラムヴェイル',
      'ko': '금빛 골짜기'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  174: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '水晶塔 古代人迷宫',
      'de': 'Kristallturm - Das Labyrinth der Alten',
      'en': 'The Labyrinth of the Ancients',
      'fr': 'La Tour de Cristal - Dédale antique',
      'ja': 'クリスタルタワー：古代の民の迷宮',
      'ko': '크리스탈 타워: 고대인의 미궁'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  180: {
    'exVersion': 0,
    'name': {
      'cn': '拉诺西亚外地',
      'de': 'Äußeres La Noscea',
      'en': 'Outer La Noscea',
      'fr': 'Noscea extérieure',
      'ja': '外地ラノシア',
      'ko': '외지 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 24
  },
  188: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '武装圣域放浪神古神殿',
      'de': 'Palast des Wanderers (schwer)',
      'en': 'The Wanderer\'s Palace (Hard)',
      'fr': 'Le Palais du Vagabond (brutal)',
      'ja': '武装聖域 ワンダラーパレス (Hard)',
      'ko': '방랑자의 궁전(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  189: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '邪念妖地无限城古堡',
      'de': 'Die Ruinen von Amdapor (schwer)',
      'en': 'Amdapor Keep (Hard)',
      'fr': 'Le Château d\'Amdapor (brutal)',
      'ja': '邪念排撃 古城アムダプール (Hard)',
      'ko': '옛 암다포르 성(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  190: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐彷徨死灵！',
      'de': 'Bockmanns Gefolge',
      'en': 'Under the Armor',
      'fr': 'Chasse au fantôme fantoche',
      'ja': '彷徨う死霊を討て！',
      'ko': '방황하는 사령을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  191: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '驱除剧毒妖花！',
      'de': 'Unkraut jäten',
      'en': 'Pulling Poison Posies',
      'fr': 'Opération fleurs du mal',
      'ja': '有毒妖花を駆除せよ！',
      'ko': '독성 요괴꽃을 제거하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 4
  },
  192: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '消灭恶徒团伙寄生蜂团！',
      'de': 'Ins Wespennest stechen',
      'en': 'Stinging Back',
      'fr': 'Expédition punitive contre les Ventrerouge',
      'ja': '無法者「似我蜂団」を撃滅せよ！',
      'ko': '무법자 집단 \'나나니단\'을 섬멸하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 5
  },
  193: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章1',
      'de': 'Verschlungene Schatten 3 - 1',
      'en': 'The Final Coil of Bahamut - Turn 1',
      'fr': 'L\'Abîme de Bahamut I',
      'ja': '大迷宮バハムート：真成編1',
      'ko': '대미궁 바하무트: 진성편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  194: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章2',
      'de': 'Verschlungene Schatten 3 - 2',
      'en': 'The Final Coil of Bahamut - Turn 2',
      'fr': 'L\'Abîme de Bahamut II',
      'ja': '大迷宮バハムート：真成編2',
      'ko': '대미궁 바하무트: 진성편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  195: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章3',
      'de': 'Verschlungene Schatten 3 - 3',
      'en': 'The Final Coil of Bahamut - Turn 3',
      'fr': 'L\'Abîme de Bahamut III',
      'ja': '大迷宮バハムート：真成編3',
      'ko': '대미궁 바하무트: 진성편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  196: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章4',
      'de': 'Verschlungene Schatten 3 - 4',
      'en': 'The Final Coil of Bahamut - Turn 4',
      'fr': 'L\'Abîme de Bahamut IV',
      'ja': '大迷宮バハムート：真成編4',
      'ko': '대미궁 바하무트: 진성편 4'
    },
    'offsetX': -448,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 44
  },
  207: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '(6.1)莫古力贤王歼灭战',
      'de': '(6.1)Königliche Konfrontation (schwer)',
      'en': '(6.1)Thornmarch (Hard)',
      'fr': '(6.1)La Lisière de ronces (brutal)',
      'ja': '(6.1)善王モグル・モグXII世討滅戦',
      'ko': '(6.1)선왕 모그루 모그 XII세 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 30
  },
  214: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '完成集团战训练！',
      'de': 'Einer für alle, alle für einen',
      'en': 'Basic Training: Enemy Parties',
      'fr': 'Entraînement<Indent/>: groupes d\'ennemis',
      'ja': '集団戦訓練をくぐり抜けろ！',
      'ko': '집단전 훈련을 완수하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 16
  },
  215: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '突破所有关门，讨伐最深处的敌人！',
      'de': 'Sturmkommando',
      'en': 'Basic Training: Enemy Strongholds',
      'fr': 'Entraînement<Indent/>: in<SoftHyphen/>fil<SoftHyphen/>tra<SoftHyphen/>tion en base ennemie',
      'ja': '全関門を突破し、最深部の敵を討て！',
      'ko': '관문을 돌파하고 최심부의 적을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 9
  },
  216: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '捕获金币龟！',
      'de': 'Gil oder Leben',
      'en': 'Hero on the Half Shell',
      'fr': 'Reconquête d\'une carapace escamotée',
      'ja': 'ギルガメを捕獲せよ！',
      'ko': '길거북을 사로잡아라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 10
  },
  219: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '击溃哥布林炸弹军团！',
      'de': 'Bombige Goblins',
      'en': 'Flicking Sticks and Taking Names',
      'fr': 'Les Gobelins bombardiers',
      'ja': '爆弾魔ゴブリン軍団を撃滅せよ！',
      'ko': '폭탄광 고블린 군단을 섬멸하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  220: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐梦幻之布拉奇希奥！',
      'de': 'Briaxio ausschalten',
      'en': 'All\'s Well that Ends in the Well',
      'fr': 'Briaxio à bras raccourcis',
      'ja': '夢幻のブラキシオを討て！',
      'ko': '몽환의 브라크시오를 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 5
  },
  221: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐污染源头魔界花！',
      'de': 'Tödliches Rankenspiel',
      'en': 'More than a Feeler',
      'fr': 'Sus au morbol pollueur',
      'ja': '汚染源モルボルを討て！',
      'ko': '오염원 몰볼을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 20
  },
  222: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐坑道中出现的妖异！',
      'de': 'Gefahr aus dem Nichts',
      'en': 'Annoy the Void',
      'fr': 'Buso l\'immolateur',
      'ja': '坑道に現れた妖異ブソを討て！',
      'ko': '갱도에 나타난 요마 부소를 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 17
  },
  223: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '注意无敌的眷属，讨伐大型妖异！',
      'de': 'Kampf gegen Schatten',
      'en': 'Shadow and Claw',
      'fr': 'Ombres et griffes',
      'ja': '無敵の眷属を従えし、大型妖異を討て！',
      'ko': '무적의 부하를 조종하는 요마를 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  241: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章1',
      'de': 'Verschlungene Schatten 1',
      'en': 'The Binding Coil of Bahamut - Turn 1',
      'fr': 'Le Labyrinthe de Bahamut I',
      'ja': '大迷宮バハムート：邂逅編1',
      'ko': '대미궁 바하무트: 해후편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  242: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章2',
      'de': 'Verschlungene Schatten 2',
      'en': 'The Binding Coil of Bahamut - Turn 2',
      'fr': 'Le Labyrinthe de Bahamut II',
      'ja': '大迷宮バハムート：邂逅編2',
      'ko': '대미궁 바하무트: 해후편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  243: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章3',
      'de': 'Verschlungene Schatten 3',
      'en': 'The Binding Coil of Bahamut - Turn 3',
      'fr': 'Le Labyrinthe de Bahamut III',
      'ja': '大迷宮バハムート：邂逅編3',
      'ko': '대미궁 바하무트: 해후편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  244: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章4',
      'de': 'Verschlungene Schatten 4',
      'en': 'The Binding Coil of Bahamut - Turn 4',
      'fr': 'Le Labyrinthe de Bahamut IV',
      'ja': '大迷宮バハムート：邂逅編4',
      'ko': '대미궁 바하무트: 해후편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  245: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章5',
      'de': 'Verschlungene Schatten 5',
      'en': 'The Binding Coil of Bahamut - Turn 5',
      'fr': 'Le Labyrinthe de Bahamut V',
      'ja': '大迷宮バハムート：邂逅編5',
      'ko': '대미궁 바하무트: 해후편 5'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  250: {
    'exVersion': 0,
    'name': {
      'cn': '狼狱停船场',
      'de': 'Wolfshöhlen-Pier',
      'en': 'Wolves\' Den Pier',
      'fr': 'Jetée de l\'Antre des loups',
      'ja': 'ウルヴズジェイル係船場',
      'ko': '늑대우리 부두'
    },
    'offsetX': -77,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 29
  },
  281: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '利维亚桑歼灭战',
      'de': 'Götterdämmerung - Leviathan',
      'en': 'The <Emphasis>Whorleater</Emphasis> (Hard)',
      'fr': 'Le Briseur de marées (brutal)',
      'ja': '真リヴァイアサン討滅戦',
      'ko': '진 리바이어선 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  292: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '伊弗利特歼灭战',
      'de': 'Götterdämmerung - Ifrit',
      'en': 'The Bowl of Embers (Hard)',
      'fr': 'Le Cratère des tisons (brutal)',
      'ja': '真イフリート討滅戦',
      'ko': '진 이프리트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 25
  },
  293: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '泰坦歼灭战',
      'de': 'Götterdämmerung - Titan',
      'en': 'The Navel (Hard)',
      'fr': 'Le Nombril (brutal)',
      'ja': '真タイタン討滅戦',
      'ko': '진 타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  294: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '迦楼罗歼灭战',
      'de': 'Götterdämmerung - Garuda',
      'en': 'The Howling Eye (Hard)',
      'fr': 'Hurlœil (brutal)',
      'ja': '真ガルーダ討滅戦',
      'ko': '진 가루다 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  295: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '伊弗利特歼殛战',
      'de': 'Zenit der Götter - Ifrit',
      'en': 'The Bowl of Embers (Extreme)',
      'fr': 'Le Cratère des tisons (extrême)',
      'ja': '極イフリート討滅戦',
      'ko': '극 이프리트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 25
  },
  296: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '泰坦歼殛战',
      'de': 'Zenit der Götter - Titan',
      'en': 'The Navel (Extreme)',
      'fr': 'Le Nombril (extrême)',
      'ja': '極タイタン討滅戦',
      'ko': '극 타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  297: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '迦楼罗歼殛战',
      'de': 'Zenit der Götter - Garuda',
      'en': 'The Howling Eye (Extreme)',
      'fr': 'Hurlœil (extrême)',
      'ja': '極ガルーダ討滅戦',
      'ko': '극 가루다 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  298: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐爆弹怪的女王！',
      'de': 'Miss Bombastic',
      'en': 'Long Live the Queen',
      'fr': 'Longue vie à la Reine',
      'ja': 'ボムを率いる「ボムクイーン」を討て！',
      'ko': '봄을 거느린 \'봄 여왕\'을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  299: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '歼灭特殊阵型的妖异！',
      'de': 'Unzertrennlich',
      'en': 'Ward Up',
      'fr': 'Quintettes infernaux',
      'ja': '不気味な陣形を組む妖異をせん滅せよ！',
      'ko': '불길한 진형을 짜는 요마를 섬멸하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 22
  },
  300: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '制止三方混战的巨人族，守住遗物！',
      'de': 'Wuchtige Dreifaltigkeit',
      'en': 'Solemn Trinity',
      'fr': 'Trinité sinistre',
      'ja': '三つ巴の巨人族を制し、遺物を守れ！',
      'ko': '세 거인족을 제압하여 유물을 지켜내라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 22
  },
  348: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '究极神兵假想作战',
      'de': 'Heldenlied von Ultima',
      'en': 'The Minstrel\'s Ballad: Ultima\'s Bane',
      'fr': 'Le fléau d\'Ultima',
      'ja': '究極幻想 アルテマウェポン破壊作戦',
      'ko': '궁극의 환상 알테마 웨폰 파괴작전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 31
  },
  349: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '骚乱坑道铜铃铜山',
      'de': 'Kupferglocken-Mine (schwer)',
      'en': 'Copperbell Mines (Hard)',
      'fr': 'Les Mines de Clochecuivre (brutal)',
      'ja': '騒乱坑道 カッパーベル銅山 (Hard)',
      'ko': '구리종 광산(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  350: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '恶灵府邸静语庄园',
      'de': 'Haukke-Herrenhaus (schwer)',
      'en': 'Haukke Manor (Hard)',
      'fr': 'Le Manoir des Haukke (brutal)',
      'ja': '妖異屋敷 ハウケタ御用邸 (Hard)',
      'ko': '하우케타 별궁(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  353: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '活动挑战2',
      'de': 'Event-Inhalt 1',
      'en': 'Special Event I',
      'fr': 'Défi spécial I',
      'ja': 'イベント用コンテンツ：1',
      'ko': '이벤트용 임무: 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  354: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '活动挑战3',
      'de': 'Event-Inhalt 2',
      'en': 'Special Event II',
      'fr': 'Défi spécial II',
      'ja': 'イベント用コンテンツ：2',
      'ko': '이벤트용 임무: 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 103
  },
  355: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章1',
      'de': 'Verschlungene Schatten 2 - 1',
      'en': 'The Second Coil of Bahamut - Turn 1',
      'fr': 'Les Méandres de Bahamut I',
      'ja': '大迷宮バハムート：侵攻編1',
      'ko': '대미궁 바하무트: 침공편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  356: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章2',
      'de': 'Verschlungene Schatten 2 - 2',
      'en': 'The Second Coil of Bahamut - Turn 2',
      'fr': 'Les Méandres de Bahamut II',
      'ja': '大迷宮バハムート：侵攻編2',
      'ko': '대미궁 바하무트: 침공편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  357: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章3',
      'de': 'Verschlungene Schatten 2 - 3',
      'en': 'The Second Coil of Bahamut - Turn 3',
      'fr': 'Les Méandres de Bahamut III',
      'ja': '大迷宮バハムート：侵攻編3',
      'ko': '대미궁 바하무트: 침공편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  358: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章4',
      'de': 'Verschlungene Schatten 2 - 4',
      'en': 'The Second Coil of Bahamut - Turn 4',
      'fr': 'Les Méandres de Bahamut IV',
      'ja': '大迷宮バハムート：侵攻編4',
      'ko': '대미궁 바하무트: 침공편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  359: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '利维亚桑歼殛战',
      'de': 'Zenit der Götter - Leviathan',
      'en': 'The <Emphasis>Whorleater</Emphasis> (Extreme)',
      'fr': 'Le Briseur de marées (extrême)',
      'ja': '極リヴァイアサン討滅戦',
      'ko': '극 리바이어선 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  360: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '剑斗领域日影地修炼所',
      'de': 'Halatali (schwer)',
      'en': 'Halatali (Hard)',
      'fr': 'Halatali (brutal)',
      'ja': '剣闘領域 ハラタリ修練所 (Hard)',
      'ko': '할라탈리 수련장(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  361: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '财宝传说破舰岛',
      'de': 'Schiffbrecher-Insel',
      'en': 'Hullbreaker Isle',
      'fr': 'L\'Île de Crèvecarène',
      'ja': '財宝伝説 ハルブレーカー・アイル',
      'ko': '난파선의 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  362: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '纷争要地布雷福洛克斯野营地',
      'de': 'Brüllvolx\' Langrast (schwer)',
      'en': 'Brayflox\'s Longstop (Hard)',
      'fr': 'Le Bivouac de Brayflox (brutal)',
      'ja': '盟友支援 ブレイフロクスの野営地 (Hard)',
      'ko': '브레이플록스의 야영지(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 37
  },
  363: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '腐坏遗迹无限城市街古迹',
      'de': 'Historisches Amdapor',
      'en': 'The Lost City of Amdapor',
      'fr': 'Les Vestiges de la cité d\'Amdapor',
      'ja': '腐敗遺跡 古アムダプール市街',
      'ko': '옛 암다포르 시가지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  364: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '莫古力贤王歼殛战',
      'de': 'Königliche Konfrontation (extrem)',
      'en': 'Thornmarch (Extreme)',
      'fr': 'La Lisière de ronces (extrême)',
      'ja': '極王モグル・モグXII世討滅戦',
      'ko': '극왕 모그루 모그 XII세 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 30
  },
  365: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '激战城塞石卫塔',
      'de': 'Steinerne Wacht (schwer)',
      'en': 'The Stone Vigil (Hard)',
      'fr': 'Le Vigile de Pierre (brutal)',
      'ja': '城塞奪回 ストーンヴィジル (Hard)',
      'ko': '돌방패 경계초소(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  366: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '大桥上的决斗',
      'de': 'Duell auf der großen Brücke',
      'en': 'Battle on the Big Bridge',
      'fr': 'Affrontement sur le grand pont',
      'ja': 'ギルガメッシュ討伐戦',
      'ko': '길가메시 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  367: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '苏醒遗迹喀恩埋没圣堂',
      'de': 'Versunkener Tempel von Qarn (schwer)',
      'en': 'The Sunken Temple of Qarn (Hard)',
      'fr': 'Le Temple enseveli de Qarn (brutal)',
      'ja': '遺跡救援 カルン埋没寺院 (Hard)',
      'ko': '카른의 무너진 사원(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 41
  },
  368: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '死化奇美拉讨伐战',
      'de': 'Kampf gegen die Dhorme-Chimära',
      'en': 'A Relic Reborn: the Chimera',
      'fr': 'La chimère dhorme du Coerthas',
      'ja': 'ドルムキマイラ討伐戦',
      'ko': '도름 키마이라 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  369: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '海德拉讨伐战',
      'de': 'Kampf gegen die Hydra',
      'en': 'A Relic Reborn: the Hydra',
      'fr': 'L\'hydre d\'Halatali',
      'ja': 'ハイドラ討伐戦',
      'ko': '하이드라 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  371: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '(6.1)凛冽洞天披雪大冰壁',
      'de': '(6.1)Das Schneekleid',
      'en': '(6.1)Snowcloak',
      'fr': '(6.1)Manteneige',
      'ja': '(6.1)氷結潜窟 スノークローク大氷壁',
      'ko': '(6.1)얼음외투 대빙벽'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  372: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '水晶塔 希尔科斯塔',
      'de': 'Kristallturm - Der Syrcus-Turm',
      'en': 'Syrcus Tower',
      'fr': 'La Tour de Cristal - Tour de Syrcus',
      'ja': 'クリスタルタワー：シルクスの塔',
      'ko': '크리스탈 타워: 시르쿠스 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  373: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '惨剧灵殿塔姆·塔拉墓园',
      'de': 'Totenacker Tam-Tara (schwer)',
      'en': 'The Tam–Tara Deepcroft (Hard)',
      'fr': 'L\'Hypogée de Tam-Tara (brutal)',
      'ja': '惨劇霊殿 タムタラの墓所 (Hard)',
      'ko': '탐타라 묘소(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 300,
    'weatherRate': 0
  },
  374: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '拉姆歼灭战',
      'de': 'Götterdämmerung - Ramuh',
      'en': 'The Striking Tree (Hard)',
      'fr': 'L\'Arbre du jugement (brutal)',
      'ja': '真ラムウ討滅戦',
      'ko': '진 라무 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 43
  },
  375: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '拉姆歼殛战',
      'de': 'Zenit der Götter - Ramuh',
      'en': 'The Striking Tree (Extreme)',
      'fr': 'L\'Arbre du jugement (extrême)',
      'ja': '極ラムウ討滅戦',
      'ko': '극 라무 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 43
  },
  376: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '周边遗迹群（阵地战）',
      'de': 'Äußere Ruinen (Sicherung)',
      'en': 'The Borderland Ruins (Secure)',
      'fr': 'Les Ruines frontalières (annexion)',
      'ja': '外縁遺跡群 (制圧戦)',
      'ko': '외곽 유적지대(제압전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  377: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '希瓦歼灭战',
      'de': 'Götterdämmerung - Shiva',
      'en': 'The Akh Afah Amphitheatre (Hard)',
      'fr': 'L\'Amphithéâtre d\'Akh Afah (brutal)',
      'ja': '真シヴァ討滅戦',
      'ko': '진 시바 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  378: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '希瓦歼殛战',
      'de': 'Zenit der Götter - Shiva',
      'en': 'The Akh Afah Amphitheatre (Extreme)',
      'fr': 'L\'Amphithéâtre d\'Akh Afah (extrême)',
      'ja': '極シヴァ討滅戦',
      'ko': '극 시바 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  380: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章1',
      'de': 'Verschlungene Schatten 2 - 1 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 1',
      'fr': 'Les Méandres de Bahamut I (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編1',
      'ko': '대미궁 바하무트: 침공편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  381: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章2',
      'de': 'Verschlungene Schatten 2 - 2 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 2',
      'fr': 'Les Méandres de Bahamut II (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編2',
      'ko': '대미궁 바하무트: 침공편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  382: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章3',
      'de': 'Verschlungene Schatten 2 - 3 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 3',
      'fr': 'Les Méandres de Bahamut III (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編3',
      'ko': '대미궁 바하무트: 침공편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  383: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章4',
      'de': 'Verschlungene Schatten 2 - 4 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 4',
      'fr': 'Les Méandres de Bahamut IV (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編4',
      'ko': '대미궁 바하무트: 침공편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  387: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '逆转要害沙斯塔夏溶洞',
      'de': 'Sastasha (schwer)',
      'en': 'Sastasha (Hard)',
      'fr': 'Sastasha (brutal)',
      'ja': '逆襲要害 サスタシャ浸食洞 (Hard)',
      'ko': '사스타샤 침식 동굴(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  389: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：太阳海岸',
      'de': 'Chocobo-Rennen: Sonnenküste',
      'en': 'Chocobo Race: Costa del Sol',
      'fr': 'Course de chocobos<Indent/>: Costa del Sol',
      'ja': 'チョコボレース：コスタ・デル・ソル',
      'ko': '초코보 경주: 코스타 델 솔'
    },
    'offsetX': -472,
    'offsetY': -424,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  390: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：荒野大道',
      'de': 'Chocobo-Rennen: Sagolii-Straße',
      'en': 'Chocobo Race: Sagolii Road',
      'fr': 'Course de chocobos<Indent/>: Route de Sagolii',
      'ja': 'チョコボレース：サゴリーロード',
      'ko': '초코보 경주: 사골리 사막'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  391: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：恬静小路',
      'de': 'Chocobo-Rennen: Pfad der Seelenruhe',
      'en': 'Chocobo Race: Tranquil Paths',
      'fr': 'Course de chocobos<Indent/>: Sentes tranquilles',
      'ja': 'チョコボレース：トランキルパス',
      'ko': '초코보 경주: 고요한 야영지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  394: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '奥丁歼灭战',
      'de': 'Jenseits Urths Quelle',
      'en': 'Urth\'s Fount',
      'fr': 'La Fontaine d\'Urth',
      'ja': '闘神オーディン討滅戦',
      'ko': '투신 오딘 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 45
  },
  396: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '无限城的死斗',
      'de': 'Revanche in den Ruinen',
      'en': 'Battle in the Big Keep',
      'fr': 'Revanche au vieux château',
      'ja': '真ギルガメッシュ討滅戦',
      'ko': '진 길가메시 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  397: {
    'exVersion': 1,
    'name': {
      'cn': '库尔札斯西部高地',
      'de': 'Westliches Hochland von Coerthas',
      'en': 'Coerthas Western Highlands',
      'fr': 'Hautes terres du Coerthas occidental',
      'ja': 'クルザス西部高地',
      'ko': '커르다스 서부고지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 49
  },
  398: {
    'exVersion': 1,
    'name': {
      'cn': '龙堡参天高地',
      'de': 'Dravanisches Vorland',
      'en': 'The Dravanian Forelands',
      'fr': 'Avant-pays dravanien',
      'ja': '高地ドラヴァニア',
      'ko': '고지 드라바니아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 50
  },
  399: {
    'exVersion': 1,
    'name': {
      'cn': '龙堡内陆低地',
      'de': 'Dravanisches Hinterland',
      'en': 'The Dravanian Hinterlands',
      'fr': 'Arrière-pays dravanien',
      'ja': '低地ドラヴァニア',
      'ko': '저지 드라바니아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 51
  },
  400: {
    'exVersion': 1,
    'name': {
      'cn': '翻云雾海',
      'de': 'Wallende Nebel',
      'en': 'The Churning Mists',
      'fr': 'L\'Écume des cieux de Dravania',
      'ja': 'ドラヴァニア雲海',
      'ko': '드라바니아 구름바다'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 52
  },
  401: {
    'exVersion': 1,
    'name': {
      'cn': '阿巴拉提亚云海',
      'de': 'Abalathisches Wolkenmeer',
      'en': 'The Sea of Clouds',
      'fr': 'L\'Écume des cieux d\'Abalathia',
      'ja': 'アバラシア雲海',
      'ko': '아발라시아 구름바다'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 53
  },
  402: {
    'exVersion': 1,
    'name': {
      'cn': '魔大陆阿济兹拉',
      'de': 'Azys Lla',
      'en': 'Azys Lla',
      'fr': 'Azys Lla',
      'ja': 'アジス・ラー',
      'ko': '아지스 라'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 54
  },
  403: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '英雄归来',
      'de': 'Verrat der Qalyana',
      'en': 'Return of the Bull',
      'fr': 'Retour au bercail',
      'ja': '英雄の帰還',
      'ko': '영웅의 귀환'
    },
    'offsetX': -250,
    'offsetY': 128,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  416: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '学识宝库迦巴勒幻想图书馆',
      'de': 'Große Gubal-Bibliothek',
      'en': 'The Great Gubal Library',
      'fr': 'La Grande bibliothèque de Gubal',
      'ja': '禁書回収 グブラ幻想図書館',
      'ko': '구브라 환상도서관'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  417: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：竞赛教学',
      'de': 'Chocobo-Rennen: Übungsbahn',
      'en': 'Chocobo Race: Tutorial',
      'fr': 'Course d\'appentissage',
      'ja': 'チョコボレース：チュートリアル',
      'ko': '초코보 경주: 튜토리얼'
    },
    'offsetX': 0,
    'offsetY': -690,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  418: {
    'exVersion': 1,
    'name': {
      'cn': '伊修加德基础层',
      'de': 'Fundamente',
      'en': 'Foundation',
      'fr': 'Ishgard - L\'Assise',
      'ja': 'イシュガルド：下層',
      'ko': '이슈가르드 하층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 47
  },
  419: {
    'exVersion': 1,
    'name': {
      'cn': '伊修加德砥柱层',
      'de': 'Strebewerk',
      'en': 'The Pillars',
      'fr': 'Ishgard - Les Contreforts',
      'ja': 'イシュガルド：上層',
      'ko': '이슈가르드 상층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 48
  },
  420: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '空中神域不获岛',
      'de': 'Nimmerreich',
      'en': 'Neverreap',
      'fr': 'Nalloncques',
      'ja': '神域浮島 ネバーリープ',
      'ko': '거두지 않는 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  421: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '(6.1)圣教中枢伊修加德教皇厅',
      'de': '(6.1)Erzbasilika',
      'en': '(6.1)The Vault',
      'fr': '(6.1)La Voûte',
      'ja': '(6.1)強硬突入 イシュガルド教皇庁',
      'ko': '(6.1)이슈가르드 교황청'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  426: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '那布里亚勒斯讨伐战',
      'de': 'Chrysalis',
      'en': 'The Chrysalis',
      'fr': 'La Chrysalide',
      'ja': 'アシエン・ナプリアレス討伐戦',
      'ko': '아씨엔 나브리알레스 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  430: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '博物战舰无限回廊',
      'de': 'Die Fraktal-Kontinuum',
      'en': 'The Fractal Continuum',
      'fr': 'Le Continuum fractal',
      'ja': '博物戦艦 フラクタル・コンティニアム',
      'ko': '무한연속 박물함'
    },
    'offsetX': 0,
    'offsetY': -213,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  431: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '尘封秘岩（争夺战）',
      'de': 'Robbenholm (Eroberung)',
      'en': 'Seal Rock (Seize)',
      'fr': 'Le Rocher des tréfonds (invasion)',
      'ja': 'シールロック (争奪戦)',
      'ko': '봉인된 바위섬(쟁탈전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 59
  },
  432: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '罗波那歼灭战',
      'de': 'Götterdämmerung - Ravana',
      'en': 'Thok ast Thok (Hard)',
      'fr': 'Thok ast Thok (brutal)',
      'ja': '真ラーヴァナ討滅戦',
      'ko': '진 라바나 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 57
  },
  434: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '冰雪废堡暮卫塔',
      'de': 'Abendrot-Wacht',
      'en': 'The Dusk Vigil',
      'fr': 'Le Vigile du Crépuscule',
      'ja': '廃砦捜索 ダスクヴィジル',
      'ko': '어스름 요새'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  435: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '(6.1)邪龙王座龙巢神殿',
      'de': '(6.1)Nest des Drachen',
      'en': '(6.1)The Aery',
      'fr': '(6.1)L\'Aire',
      'ja': '(6.1)邪竜血戦 ドラゴンズエアリー',
      'ko': '(6.1)용의 둥지'
    },
    'offsetX': -40,
    'offsetY': 55,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  436: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '俾斯麦歼灭战',
      'de': 'Götterdämmerung - Bismarck',
      'en': 'The Limitless Blue (Hard)',
      'fr': 'L\'Immensité bleue (brutal)',
      'ja': '真ビスマルク討滅戦',
      'ko': '진 비스마르크 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  437: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '圆桌骑士歼灭战',
      'de': 'Singularitäts-Reaktor',
      'en': 'The Singularity Reactor',
      'fr': 'Le Réacteur de singularité',
      'ja': 'ナイツ・オブ・ラウンド討滅戦',
      'ko': '나이츠 오브 라운드 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 56
  },
  438: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '血战苍穹魔科学研究所',
      'de': 'Ätherochemisches For<SoftHyphen/>schungs<SoftHyphen/>labor',
      'en': 'The Aetherochemical Research Facility',
      'fr': 'Le Laboratoire de magismologie',
      'ja': '蒼天聖戦 魔科学研究所',
      'ko': '마과학 연구소'
    },
    'offsetX': -18,
    'offsetY': 149,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  441: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '(6.1)天山绝顶索姆阿尔灵峰',
      'de': '(6.1)Sohm Al',
      'en': '(6.1)Sohm Al',
      'fr': '(6.1)Sohm Al',
      'ja': '(6.1)霊峰踏破 ソーム・アル',
      'ko': '(6.1)솜 알'
    },
    'offsetX': 185,
    'offsetY': 51,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  442: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章1',
      'de': 'Alexander - Faust des Vaters',
      'en': 'Alexander - The Fist of the Father',
      'fr': 'Alexander - Le Poing du Père',
      'ja': '機工城アレキサンダー：起動編1',
      'ko': '기공성 알렉산더: 기동편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  443: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章2',
      'de': 'Alexander - Elle des Vaters',
      'en': 'Alexander - The Cuff of the Father',
      'fr': 'Alexander - Le Poignet du Père',
      'ja': '機工城アレキサンダー：起動編2',
      'ko': '기공성 알렉산더: 기동편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  444: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章3',
      'de': 'Alexander - Arm des Vaters',
      'en': 'Alexander - The Arm of the Father',
      'fr': 'Alexander - Le Bras du Père',
      'ja': '機工城アレキサンダー：起動編3',
      'ko': '기공성 알렉산더: 기동편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  445: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章4',
      'de': 'Alexander - Last des Vaters',
      'en': 'Alexander - The Burden of the Father',
      'fr': 'Alexander - Le Fardeau du Père',
      'ja': '機工城アレキサンダー：起動編4',
      'ko': '기공성 알렉산더: 기동편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  446: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '罗波那歼殛战',
      'de': 'Zenit der Götter - Ravana',
      'en': 'Thok ast Thok (Extreme)',
      'fr': 'Thok ast Thok (extrême)',
      'ja': '極ラーヴァナ討滅戦',
      'ko': '극 라바나 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 57
  },
  447: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '俾斯麦歼殛战',
      'de': 'Zenit der Götter - Bismarck',
      'en': 'The Limitless Blue (Extreme)',
      'fr': 'L\'Immensité bleue (extrême)',
      'ja': '極ビスマルク討滅戦',
      'ko': '극 비스마르크 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  448: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '圆桌骑士幻想歼灭战',
      'de': 'Heldenlied von Thordans Fall',
      'en': 'The Minstrel\'s Ballad: Thordan\'s Reign',
      'fr': 'Le règne de Thordan',
      'ja': '蒼天幻想 ナイツ・オブ・ラウンド討滅戦',
      'ko': '극 나이츠 오브 라운드 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 56
  },
  449: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章1',
      'de': 'Alexander - Faust des Vaters (episch)',
      'en': 'Alexander - The Fist of the Father (Savage)',
      'fr': 'Alexander - Le Poing du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編1',
      'ko': '기공성 알렉산더: 기동편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  450: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章2',
      'de': 'Alexander - Elle des Vaters (episch)',
      'en': 'Alexander - The Cuff of the Father (Savage)',
      'fr': 'Alexander - Le Poignet du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編2',
      'ko': '기공성 알렉산더: 기동편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  451: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章3',
      'de': 'Alexander - Arm des Vaters (episch)',
      'en': 'Alexander - The Arm of the Father (Savage)',
      'fr': 'Alexander - Le Bras du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編3',
      'ko': '기공성 알렉산더: 기동편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  452: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章4',
      'de': 'Alexander - Last des Vaters (episch)',
      'en': 'Alexander - The Burden of the Father (Savage)',
      'fr': 'Alexander - Le Fardeau du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編4',
      'ko': '기공성 알렉산더: 기동편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  478: {
    'exVersion': 1,
    'name': {
      'cn': '田园郡',
      'de': 'Frohehalde',
      'en': 'Idyllshire',
      'fr': 'Idyllée',
      'ja': 'イディルシャイア',
      'ko': '이딜샤이어'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 55
  },
  506: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：大赛对战（人机对战）',
      'de': 'Kampf der Trabanten: Turnier (gegen Arenameister)',
      'en': 'LoVM: Master Tournament',
      'fr': 'Bataille de tournoi contre l\'ordinateur',
      'ja': 'LoVM：大会対戦 (CPU対戦)',
      'ko': '꼬마 친구 공방전: 대회 대결(인공 지능 대결)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  508: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '魔航船虚无方舟',
      'de': 'Die Nichts-Arche',
      'en': 'The Void Ark',
      'fr': 'L\'Arche du néant',
      'ja': '魔航船ヴォイドアーク',
      'ko': '보이드의 방주'
    },
    'offsetX': 289,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 37
  },
  510: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '地脉灵灯天狼星灯塔',
      'de': 'Pharos Sirius (schwer)',
      'en': 'Pharos Sirius (Hard)',
      'fr': 'Le Phare de Sirius (brutal)',
      'ja': '制圧巨塔 シリウス大灯台 (Hard)',
      'ko': '시리우스 대등대(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  511: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '草木庭园圣茉夏娜植物园',
      'de': 'Sankt Mocianne-Arboretum',
      'en': 'Saint Mocianne\'s Arboretum',
      'fr': 'L\'Arboretum Sainte-Mocianne',
      'ja': '草木庭園 聖モシャーヌ植物園',
      'ko': '성 모샨 식물원'
    },
    'offsetX': 40,
    'offsetY': 6,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  512: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛白昼探索',
      'de': 'Das Diadem (leicht)',
      'en': 'The Diadem (Easy)',
      'fr': 'Le Diadème (facile)',
      'ja': '雲海探索 ディアデム諸島 (Easy)',
      'ko': '디아뎀 제도(쉬움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 60
  },
  515: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛夜晚探索',
      'de': 'Das Diadem (schwer)',
      'en': 'The Diadem (Hard)',
      'fr': 'Le Diadème (brutal)',
      'ja': '雲海探索 ディアデム諸島 (Hard)',
      'ko': '디아뎀 제도(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 62
  },
  516: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '星海空间颠倒塔',
      'de': 'Antiturm',
      'en': 'The Antitower',
      'fr': 'L\'Antitour',
      'ja': '星海観測 逆さの塔',
      'ko': '거꾸로 선 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  517: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '萨菲洛特歼灭战',
      'de': 'Götterdämmerung - Sephirot',
      'en': 'Containment Bay S1T7',
      'fr': 'Unité de contention S1P7',
      'ja': '魔神セフィロト討滅戦',
      'ko': '마신 세피로트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 66
  },
  519: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '神圣遗迹无限城市街古迹',
      'de': 'Historisches Amdapor (schwer)',
      'en': 'The Lost City of Amdapor (Hard)',
      'fr': 'Les Vestiges de la cité d\'Amdapor (brutal)',
      'ja': '神聖遺跡 古アムダプール市街 (Hard)',
      'ko': '옛 암다포르 시가지(어려움)'
    },
    'offsetX': 64,
    'offsetY': 315,
    'sizeFactor': 200,
    'weatherRate': 63
  },
  520: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章1',
      'de': 'Alexander - Faust des Sohnes',
      'en': 'Alexander - The Fist of the Son',
      'fr': 'Alexander - Le Poing du Fils',
      'ja': '機工城アレキサンダー：律動編1',
      'ko': '기공성 알렉산더: 율동편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  521: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章2',
      'de': 'Alexander - Elle des Sohnes',
      'en': 'Alexander - The Cuff of the Son',
      'fr': 'Alexander - Le Poignet du Fils',
      'ja': '機工城アレキサンダー：律動編2',
      'ko': '기공성 알렉산더: 율동편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  522: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章3',
      'de': 'Alexander - Arm des Sohnes',
      'en': 'Alexander - The Arm of the Son',
      'fr': 'Alexander - Le Bras du Fils',
      'ja': '機工城アレキサンダー：律動編3',
      'ko': '기공성 알렉산더: 율동편 3'
    },
    'offsetX': -110,
    'offsetY': -170,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  523: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章4',
      'de': 'Alexander - Last des Sohnes',
      'en': 'Alexander - The Burden of the Son',
      'fr': 'Alexander - Le Fardeau du Fils',
      'ja': '機工城アレキサンダー：律動編4',
      'ko': '기공성 알렉산더: 율동편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  524: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '萨菲洛特歼殛战',
      'de': 'Zenit der Götter - Sephirot',
      'en': 'Containment Bay S1T7 (Extreme)',
      'fr': 'Unité de contention S1P7 (extrême)',
      'ja': '極魔神セフィロト討滅戦',
      'ko': '극 마신 세피로트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 66
  },
  529: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章1',
      'de': 'Alexander - Faust des Sohnes (episch)',
      'en': 'Alexander - The Fist of the Son (Savage)',
      'fr': 'Alexander - Le Poing du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編1',
      'ko': '기공성 알렉산더: 율동편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  530: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章2',
      'de': 'Alexander - Elle des Sohnes (episch)',
      'en': 'Alexander - The Cuff of the Son (Savage)',
      'fr': 'Alexander - Le Poignet du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編2',
      'ko': '기공성 알렉산더: 율동편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  531: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章3',
      'de': 'Alexander - Arm des Sohnes (episch)',
      'en': 'Alexander - The Arm of the Son (Savage)',
      'fr': 'Alexander - Le Bras du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編3',
      'ko': '기공성 알렉산더: 율동편(영웅) 3'
    },
    'offsetX': -110,
    'offsetY': -170,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  532: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章4',
      'de': 'Alexander - Last des Sohnes (episch)',
      'en': 'Alexander - The Burden of the Son (Savage)',
      'fr': 'Alexander - Le Fardeau du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編4',
      'ko': '기공성 알렉산더: 율동편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  533: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '四国联合军演',
      'de': 'Truppenübung der Eorzäischen Allianz',
      'en': 'A Spectacle for the Ages',
      'fr': 'La grande manœuvre éorzéenne',
      'ja': '四国合同演習',
      'ko': '4개국 합동 훈련'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  537: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '躲避范围攻击',
      'de': 'Flächenangriffen ausweichen',
      'en': 'Avoid Area of Effect Attacks',
      'fr': 'Éviter les attaques à aire d\'effet',
      'ja': '範囲攻撃を避けよう！',
      'ko': '범위 공격을 피하자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  538: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '掌握仇恨连击',
      'de': 'Mit Kombos Feindseligkeit auf sich ziehen',
      'en': 'Execute a Combo to Increase Enmity',
      'fr': 'Générer de l\'inimitié avec un combo',
      'ja': 'コンボで敵視を集めよう！',
      'ko': '콤보를 이어 적개심을 끌자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  539: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '控制敌人的仇恨',
      'de': 'Kombos im Kampf einsetzen',
      'en': 'Execute a Combo in Battle',
      'fr': 'Effectuer le combo en combat',
      'ja': '実戦でコンボに挑戦しよう！',
      'ko': '실전에서 콤보를 사용해보자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  540: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '控制多个敌人的仇恨',
      'de': 'Feindseligkeit mehrerer Gegner auf sich ziehen',
      'en': 'Accrue Enmity from Multiple Targets',
      'fr': 'Attirer l\'inimitié de plusieurs ennemis sur soi',
      'ja': '複数の敵から敵視を集めよう！',
      'ko': '다수의 적에게서 적개심을 끌자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  541: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '实战控制多个敌人的仇恨',
      'de': 'Gegen mehrere Gegner auf einmal kämpfen',
      'en': 'Engage Multiple Targets',
      'fr': 'Affronter plusieurs ennemis',
      'ja': '実戦で複数の敵と戦ってみよう！',
      'ko': '실전에서 다수의 적과 싸워보자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  542: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '控制远处敌人的仇恨',
      'de': 'Aus der Ferne Feindseligkeit auf sich ziehen',
      'en': 'Execute a Ranged Attack to Increase Enmity',
      'fr': 'Générer de l\'inimitié à distance',
      'ja': '遠距離から敵視を集めよう！',
      'ko': '멀리서 적개심을 끌자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  543: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '留心增援的敌人',
      'de': 'Feindliche Verstärkung aufhalten',
      'en': 'Engage Enemy Reinforcements',
      'fr': 'Faire face à des renforts ennemis',
      'ja': '敵の増援に対応しよう！',
      'ko': '적 지원군에 대처하자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  544: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '配合防护职业打倒单个敌人',
      'de': 'Gegner gemeinsam besiegen',
      'en': 'Assist Allies in Defeating a Target',
      'fr': 'Vaincre un ennemi en assistant des alliés',
      'ja': '味方と協力して敵を倒そう！',
      'ko': '파티원과 협력하여 적을 물리치자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  545: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '配合防护职业打倒多个敌人',
      'de': 'Den Gegner eines Verbündeten besiegen',
      'en': 'Defeat an Occupied Target',
      'fr': 'Vaincre un ennemi occupé par un allié',
      'ja': '味方が引きつけている敵を倒そう！',
      'ko': '파티원과 같은 적을 공격하자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  546: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '躲避范围攻击的同时进行战斗',
      'de': 'Angriffen ausweichen',
      'en': 'Avoid Engaged Targets',
      'fr': 'Combattre en évitant les attaques ennemies',
      'ja': '敵の攻撃を避けながら戦おう！',
      'ko': '적의 공격을 피하면서 싸우자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  548: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '灵活运用场地机关',
      'de': 'Mit dem Gelände interagieren',
      'en': 'Interact with the Battlefield',
      'fr': 'Interagir avec le décor en combat',
      'ja': 'ギミックを活用して戦おう！',
      'ko': '특수 장치를 활용하며 싸우자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  549: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '治疗防护职业',
      'de': 'Verbündete heilen',
      'en': 'Heal an Ally',
      'fr': 'Soigner un allié',
      'ja': '味方を回復しよう！',
      'ko': '파티원을 회복시키자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  550: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '治疗小队队员',
      'de': 'Mehrere Verbündete heilen',
      'en': 'Heal Multiple Allies',
      'fr': 'Soigner plusieurs alliés',
      'ja': '複数の味方を回復しよう！',
      'ko': '다수의 파티원을 회복시키자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  552: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '最终训练',
      'de': 'Letzte Übung',
      'en': 'Final Exercise',
      'fr': 'Exercice final',
      'ja': '最終訓練！',
      'ko': '마지막 훈련!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  554: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '荣誉野（碎冰战）',
      'de': 'Feld der Ehre (Zersplitterung)',
      'en': 'The Fields of Glory (Shatter)',
      'fr': 'Les Champs de la Gloire (brise-glace)',
      'ja': 'フィールド・オブ・グローリー (砕氷戦)',
      'ko': '영광의 평원(쇄빙전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 67
  },
  555: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天龙宫殿忆罪宫',
      'de': 'Sohr Khai',
      'en': 'Sohr Khai',
      'fr': 'Sohr Khai',
      'ja': '天竜宮殿 ソール・カイ',
      'ko': '소르 카이'
    },
    'offsetX': 370,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  556: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '禁忌城邦玛哈',
      'de': 'Die Stadt der Tränen',
      'en': 'The Weeping City of Mhach',
      'fr': 'La Cité défendue de Mhach',
      'ja': '禁忌都市マハ',
      'ko': '금기도시 마하'
    },
    'offsetX': -40,
    'offsetY': -40,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  557: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '黑涡传说破舰岛',
      'de': 'Schiffbrecher-Insel (schwer)',
      'en': 'Hullbreaker Isle (Hard)',
      'fr': 'L\'Île de Crèvecarène (brutal)',
      'ja': '黒渦伝説 ハルブレーカー・アイル (Hard)',
      'ko': '난파선의 섬(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 68
  },
  558: {
    'contentType': 9,
    'exVersion': 0,
    'name': {
      'cn': '水城宝物库',
      'de': 'Aquapolis',
      'en': 'The Aquapolis',
      'fr': 'L\'Aquapole',
      'ja': '宝物庫 アクアポリス',
      'ko': '보물고 아쿠아폴리스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  559: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '尼德霍格征龙战',
      'de': 'Der letzte Schicksalsweg',
      'en': 'The Final Steps of Faith',
      'fr': 'La Dernière avancée de la Foi',
      'ja': 'ニーズヘッグ征竜戦',
      'ko': '니드호그 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  560: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '雷古拉·范·休著斯追击战',
      'de': 'Blutiges Wieder<SoftHyphen/>sehen',
      'en': 'A Bloody Reunion',
      'fr': 'Course-poursuite dans le laboratoire',
      'ja': 'レグラ・ヴァン・ヒュドルス追撃戦',
      'ko': '레굴라 반 히드루스 추격전'
    },
    'offsetX': -18,
    'offsetY': 149,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  561: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下1～10层',
      'de': 'Palast der Toten (Ebenen 1-10)',
      'en': 'The Palace of the Dead (Floors 1-10)',
      'fr': 'Le Palais des morts (sous-sols 1-10)',
      'ja': '死者の宮殿 B1～B10',
      'ko': '망자의 궁전 B1~B10'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  562: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下11～20层',
      'de': 'Palast der Toten (Ebenen 11-20)',
      'en': 'The Palace of the Dead (Floors 11-20)',
      'fr': 'Le Palais des morts (sous-sols 11-20)',
      'ja': '死者の宮殿 B11～B20',
      'ko': '망자의 궁전 B11~B20'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  563: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下21～30层',
      'de': 'Palast der Toten (Ebenen 21-30)',
      'en': 'The Palace of the Dead (Floors 21-30)',
      'fr': 'Le Palais des morts (sous-sols 21-30)',
      'ja': '死者の宮殿 B21～B30',
      'ko': '망자의 궁전 B21~B30'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  564: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下31～40层',
      'de': 'Palast der Toten (Ebenen 31-40)',
      'en': 'The Palace of the Dead (Floors 31-40)',
      'fr': 'Le Palais des morts (sous-sols 31-40)',
      'ja': '死者の宮殿 B31～B40',
      'ko': '망자의 궁전 B31~B40'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  565: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下41～50层',
      'de': 'Palast der Toten (Ebenen 41-50)',
      'en': 'The Palace of the Dead (Floors 41-50)',
      'fr': 'Le Palais des morts (sous-sols 41-50)',
      'ja': '死者の宮殿 B41～B50',
      'ko': '망자의 궁전 B41~B50'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  566: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '尼德霍格传奇征龙战',
      'de': 'Das Lied von Nidhoggs letztem Ruf',
      'en': 'The Minstrel\'s Ballad: Nidhogg\'s Rage',
      'fr': 'L\'ire de Nidhogg',
      'ja': '極ニーズヘッグ征竜戦',
      'ko': '극 니드호그 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  571: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '亡灵府邸闹鬼庄园',
      'de': 'Das Geisterschloss',
      'en': 'The Haunted Manor',
      'fr': 'Le Manoir hanté',
      'ja': '亡霊屋敷 ホーンテッドマナー',
      'ko': '유령의 집'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  572: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '险峻峡谷塞尔法特尔溪谷',
      'de': 'Xelphatol',
      'en': 'Xelphatol',
      'fr': 'Xelphatol',
      'ja': '峻厳渓谷 ゼルファトル',
      'ko': '젤파톨'
    },
    'offsetX': -148,
    'offsetY': 35,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  576: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '索菲娅歼灭战',
      'de': 'Götterdämmerung - Sophia',
      'en': 'Containment Bay P1T6',
      'fr': 'Unité de contention P1P6',
      'ja': '女神ソフィア討滅戦',
      'ko': '여신 소피아 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 69
  },
  577: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '索菲娅歼殛战',
      'de': 'Zenit der Götter - Sophia',
      'en': 'Containment Bay P1T6 (Extreme)',
      'fr': 'Unité de contention P1P6 (extrême)',
      'ja': '極女神ソフィア討滅戦',
      'ko': '극 여신 소피아 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 69
  },
  578: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '秘本宝库迦巴勒幻想图书馆',
      'de': 'Große Gubal-Bibliothek (schwer)',
      'en': 'The Great Gubal Library (Hard)',
      'fr': 'La Grande bibliothèque de Gubal (brutal)',
      'ja': '稀書回収 グブラ幻想図書館 (Hard)',
      'ko': '구브라 환상도서관(어려움)'
    },
    'offsetX': 116,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  579: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '九宫幻卡：幻卡对局室',
      'de': 'Triple Triad: Weltensalon',
      'en': 'The Triple Triad Battlehall',
      'fr': 'Arène Triple Triade',
      'ja': 'トリプルトライアド：カードバトルルーム',
      'ko': '트리플 트라이어드: 카드 대결장'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 800,
    'weatherRate': 0
  },
  580: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章1',
      'de': 'Alexander - Augen des Schöpfers',
      'en': 'Alexander - The Eyes of the Creator',
      'fr': 'Alexander - Les Yeux du Créateur',
      'ja': '機工城アレキサンダー：天動編1',
      'ko': '기공성 알렉산더: 천동편 1'
    },
    'offsetX': 75,
    'offsetY': 14,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  581: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章2',
      'de': 'Alexander - Atem des Schöpfers',
      'en': 'Alexander - The Breath of the Creator',
      'fr': 'Alexander - Le Souffle du Créateur',
      'ja': '機工城アレキサンダー：天動編2',
      'ko': '기공성 알렉산더: 천동편 2'
    },
    'offsetX': 0,
    'offsetY': -80,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  582: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章3',
      'de': 'Alexander - Herz des Schöpfers',
      'en': 'Alexander - The Heart of the Creator',
      'fr': 'Alexander - Le Cœur du Créateur',
      'ja': '機工城アレキサンダー：天動編3',
      'ko': '기공성 알렉산더: 천동편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  583: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章4',
      'de': 'Alexander - Seele des Schöpfers',
      'en': 'Alexander - The Soul of the Creator',
      'fr': 'Alexander - L\'Âme du Créateur',
      'ja': '機工城アレキサンダー：天動編4',
      'ko': '기공성 알렉산더: 천동편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  584: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章1',
      'de': 'Alexander - Augen des Schöpfers (episch)',
      'en': 'Alexander - The Eyes of the Creator (Savage)',
      'fr': 'Alexander - Les Yeux du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編1',
      'ko': '기공성 알렉산더: 천동편(영웅) 1'
    },
    'offsetX': 75,
    'offsetY': 14,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  585: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章2',
      'de': 'Alexander - Atem des Schöpfers (episch)',
      'en': 'Alexander - The Breath of the Creator (Savage)',
      'fr': 'Alexander - Le Souffle du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編2',
      'ko': '기공성 알렉산더: 천동편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': -80,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  586: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章3',
      'de': 'Alexander - Herz des Schöpfers (episch)',
      'en': 'Alexander - The Heart of the Creator (Savage)',
      'fr': 'Alexander - Le Cœur du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編3',
      'ko': '기공성 알렉산더: 천동편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  587: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章4',
      'de': 'Alexander - Seele des Schöpfers (episch)',
      'en': 'Alexander - The Soul of the Creator (Savage)',
      'fr': 'Alexander - L\'Âme du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編4',
      'ko': '기공성 알렉산더: 천동편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  589: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：玩家对战（绩点赛）',
      'de': 'Kampf der Trabanten: Gegen Spieler (um RP)',
      'en': 'LoVM: Player Battle (RP)',
      'fr': 'Bataille simple contre un joueur (avec PR)',
      'ja': 'LoVM：プレイヤー対戦 (RP変動あり)',
      'ko': '꼬마 친구 공방전: 플레이어 대결(RP 변동 있음)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  590: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：大赛对战（玩家对战）',
      'de': 'Kampf der Trabanten: Turnier (gegen Spieler)',
      'en': 'LoVM: Tournament',
      'fr': 'Bataille de tournoi contre des joueurs',
      'ja': 'LoVM：大会対戦 (プレイヤー対戦）',
      'ko': '꼬마 친구 공방전: 대회 대결(플레이어 대결)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  591: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：玩家对战（无绩点赛）',
      'de': 'Kampf der Trabanten: Gegen Spieler (ohne RP)',
      'en': 'LoVM: Player Battle (Non-RP)',
      'fr': 'Bataille simple contre un joueur (sans PR)',
      'ja': 'LoVM：プレイヤー対戦 (RP変動なし)',
      'ko': '꼬마 친구 공방전: 플레이어 대결(RP 변동 없음)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  592: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '纠缠不清的宿命',
      'de': 'Weltenübergreifendes Schicksal',
      'en': 'One Life for One World',
      'fr': 'Destins entrecroisés',
      'ja': '絡み合う宿命',
      'ko': '뒤얽히는 숙명'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  593: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下51～60层',
      'de': 'Palast der Toten (Ebenen 51 - 60)',
      'en': 'The Palace of the Dead (Floors 51-60)',
      'fr': 'Le Palais des morts (sous-sols 51-60)',
      'ja': '死者の宮殿 B51～B60',
      'ko': '망자의 궁전 B51~B60'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  594: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下61～70层',
      'de': 'Palast der Toten (Ebenen 61 - 70)',
      'en': 'The Palace of the Dead (Floors 61-70)',
      'fr': 'Le Palais des morts (sous-sols 61-70)',
      'ja': '死者の宮殿 B61～B70',
      'ko': '망자의 궁전 B61~B70'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  595: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下71～80层',
      'de': 'Palast der Toten (Ebenen 71 - 80)',
      'en': 'The Palace of the Dead (Floors 71-80)',
      'fr': 'Le Palais des morts (sous-sols 71-80)',
      'ja': '死者の宮殿 B71～B80',
      'ko': '망자의 궁전 B71~B80'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  596: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下81～90层',
      'de': 'Palast der Toten (Ebenen 81 - 90)',
      'en': 'The Palace of the Dead (Floors 81-90)',
      'fr': 'Le Palais des morts (sous-sols 81-90)',
      'ja': '死者の宮殿 B81～B90',
      'ko': '망자의 궁전 B81~B90'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  597: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下91～100层',
      'de': 'Palast der Toten (Ebenen 91 - 100)',
      'en': 'The Palace of the Dead (Floors 91-100)',
      'fr': 'Le Palais des morts (sous-sols 91-100)',
      'ja': '死者の宮殿 B91～B100',
      'ko': '망자의 궁전 B91~B100'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  598: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下101～110层',
      'de': 'Palast der Toten (Ebenen 101 - 110)',
      'en': 'The Palace of the Dead (Floors 101-110)',
      'fr': 'Le Palais des morts (sous-sols 101-110)',
      'ja': '死者の宮殿 B101～B110',
      'ko': '망자의 궁전 B101~B110'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  599: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下111～120层',
      'de': 'Palast der Toten (Ebenen 111 - 120)',
      'en': 'The Palace of the Dead (Floors 111-120)',
      'fr': 'Le Palais des morts (sous-sols 111-120)',
      'ja': '死者の宮殿 B111～B120',
      'ko': '망자의 궁전 B111~B120'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  600: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下121～130层',
      'de': 'Palast der Toten (Ebenen 121 - 130)',
      'en': 'The Palace of the Dead (Floors 121-130)',
      'fr': 'Le Palais des morts (sous-sols 121-130)',
      'ja': '死者の宮殿 B121～B130',
      'ko': '망자의 궁전 B121~B130'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  601: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下131～140层',
      'de': 'Palast der Toten (Ebenen 131 - 140)',
      'en': 'The Palace of the Dead (Floors 131-140)',
      'fr': 'Le Palais des morts (sous-sols 131-140)',
      'ja': '死者の宮殿 B131～B140',
      'ko': '망자의 궁전 B131~B140'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  602: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下141～150层',
      'de': 'Palast der Toten (Ebenen 141 - 150)',
      'en': 'The Palace of the Dead (Floors 141-150)',
      'fr': 'Le Palais des morts (sous-sols 141-150)',
      'ja': '死者の宮殿 B141～B150',
      'ko': '망자의 궁전 B141~B150'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  603: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下151～160层',
      'de': 'Palast der Toten (Ebenen 151 - 160)',
      'en': 'The Palace of the Dead (Floors 151-160)',
      'fr': 'Le Palais des morts (sous-sols 151-160)',
      'ja': '死者の宮殿 B151～B160',
      'ko': '망자의 궁전 B151~B160'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  604: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下161～170层',
      'de': 'Palast der Toten (Ebenen 161 - 170)',
      'en': 'The Palace of the Dead (Floors 161-170)',
      'fr': 'Le Palais des morts (sous-sols 161-170)',
      'ja': '死者の宮殿 B161～B170',
      'ko': '망자의 궁전 B161~B170'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  605: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下171～180层',
      'de': 'Palast der Toten (Ebenen 171 - 180)',
      'en': 'The Palace of the Dead (Floors 171-180)',
      'fr': 'Le Palais des morts (sous-sols 171-180)',
      'ja': '死者の宮殿 B171～B180',
      'ko': '망자의 궁전 B171~B180'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  606: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下181～190层',
      'de': 'Palast der Toten (Ebenen 181 - 190)',
      'en': 'The Palace of the Dead (Floors 181-190)',
      'fr': 'Le Palais des morts (sous-sols 181-190)',
      'ja': '死者の宮殿 B181～B190',
      'ko': '망자의 궁전 B181~B190'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  607: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下191～200层',
      'de': 'Palast der Toten (Ebenen 191 - 200)',
      'en': 'The Palace of the Dead (Floors 191-200)',
      'fr': 'Le Palais des morts (sous-sols 191-200)',
      'ja': '死者の宮殿 B191～B200',
      'ko': '망자의 궁전 B191~B200'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  612: {
    'exVersion': 2,
    'name': {
      'cn': '基拉巴尼亚边区',
      'de': 'Abanisches Grenzland',
      'en': 'The Fringes',
      'fr': 'Les Marges',
      'ja': 'ギラバニア辺境地帯',
      'ko': '기라바니아 변방지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 79
  },
  613: {
    'exVersion': 2,
    'name': {
      'cn': '红玉海',
      'de': 'Rubinsee',
      'en': 'The Ruby Sea',
      'fr': 'Mer de Rubis',
      'ja': '紅玉海',
      'ko': '홍옥해'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 83
  },
  614: {
    'exVersion': 2,
    'name': {
      'cn': '延夏',
      'de': 'Yanxia',
      'en': 'Yanxia',
      'fr': 'Yanxia',
      'ja': 'ヤンサ',
      'ko': '얀샤'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 84
  },
  615: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '坚牢铁壁巴埃萨长城',
      'de': 'Baelsar-Wall',
      'en': 'Baelsar\'s Wall',
      'fr': 'La Muraille de Baelsar',
      'ja': '巨大防壁 バエサルの長城',
      'ko': '바일사르 장성'
    },
    'offsetX': 182,
    'offsetY': 32,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  616: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '海底宫殿紫水宫',
      'de': 'Shisui',
      'en': 'Shisui of the Violet Tides',
      'fr': 'Le Palais aux Marées violettes',
      'ja': '海底宮殿 紫水宮',
      'ko': '시스이 궁'
    },
    'offsetX': 0,
    'offsetY': 35,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  617: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天山深境索姆阿尔灵峰',
      'de': 'Sohm Al (schwer)',
      'en': 'Sohm Al (Hard)',
      'fr': 'Sohm Al (brutal)',
      'ja': '霊峰浄化 ソーム・アル (Hard)',
      'ko': '솜 알(어려움)'
    },
    'offsetX': 128,
    'offsetY': -32,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  620: {
    'exVersion': 2,
    'name': {
      'cn': '基拉巴尼亚山区',
      'de': 'Die Zinnen',
      'en': 'The Peaks',
      'fr': 'Les Pics',
      'ja': 'ギラバニア山岳地帯',
      'ko': '기라바니아 산악지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 80
  },
  621: {
    'exVersion': 2,
    'name': {
      'cn': '基拉巴尼亚湖区',
      'de': 'Das Fenn',
      'en': 'The Lochs',
      'fr': 'Les Lacs',
      'ja': 'ギラバニア湖畔地帯',
      'ko': '기라바니아 호반지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 81
  },
  622: {
    'exVersion': 2,
    'name': {
      'cn': '太阳神草原',
      'de': 'Azim-Steppe',
      'en': 'The Azim Steppe',
      'fr': 'Steppe d\'Azim',
      'ja': 'アジムステップ',
      'ko': '아짐 대초원'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  623: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '试炼行路巴儿达木霸道',
      'de': 'Bardams Probe',
      'en': 'Bardam\'s Mettle',
      'fr': 'La Force de Bardam',
      'ja': '伝統試練 バルダム覇道',
      'ko': '바르담 패도'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  624: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛白昼探索（狩猎专用）',
      'de': 'Das Diadem - Jagdgründe (leicht)',
      'en': 'The Diadem Hunting Grounds (Easy)',
      'fr': 'Le Diadème<Indent/>: terrains de chasse (facile)',
      'ja': '雲海探索 ディアデム諸島：狩猟限定 (Easy)',
      'ko': '디아뎀 제도: 전투 한정(쉬움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 60
  },
  625: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛黄昏探索（狩猎专用）',
      'de': 'Das Diadem - Jagdgründe',
      'en': 'The Diadem Hunting Grounds',
      'fr': 'Le Diadème<Indent/>: terrains de chasse',
      'ja': '雲海探索 ディアデム諸島：狩猟限定',
      'ko': '디아뎀 제도: 전투 한정'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 61
  },
  626: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '漂流海域妖歌海',
      'de': 'Sirenen-See',
      'en': 'The Sirensong Sea',
      'fr': 'La Mer du Chant des sirènes',
      'ja': '漂流海域 セイレーン海',
      'ko': '세이렌 해'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 36
  },
  627: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '影之国',
      'de': 'Dun Scaith',
      'en': 'Dun Scaith',
      'fr': 'Dun Scaith',
      'ja': '影の国ダン・スカー',
      'ko': '둔 스카'
    },
    'offsetX': -350,
    'offsetY': -400,
    'sizeFactor': 200,
    'weatherRate': 58
  },
  628: {
    'exVersion': 2,
    'name': {
      'cn': '黄金港',
      'de': 'Kugane',
      'en': 'Kugane',
      'fr': 'Kugane',
      'ja': 'クガネ',
      'ko': '쿠가네'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 82
  },
  630: {
    'contentType': 23,
    'exVersion': 0,
    'name': {
      'cn': '云冠群岛战争神猎场',
      'de': 'Das Diadem - Halones Prüfung',
      'en': 'The Diadem - Trials of the Fury',
      'fr': 'Le Diadème - Épreuves de Halone',
      'ja': '雲海探索 ディアデム諸島 (狩猟)',
      'ko': '디아뎀 제도: 전투'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  633: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '加尔提诺平原遭遇战',
      'de': 'Heliodrom',
      'en': 'The Carteneau Flats: Heliodrome',
      'fr': 'Rixe à l\'Héliodrome',
      'ja': 'カルテノー平原遭遇戦',
      'ko': '카르테노 평원 조우전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  635: {
    'exVersion': 2,
    'name': {
      'cn': '神拳痕',
      'de': 'Rhalgrs Wacht',
      'en': 'Rhalgr\'s Reach',
      'fr': 'L\'Étendue de Rhalgr',
      'ja': 'ラールガーズリーチ',
      'ko': '랄거의 손길'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 78
  },
  637: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '祖尔宛歼灭战',
      'de': 'Götterdämmerung - Zurvan',
      'en': 'Containment Bay Z1T9',
      'fr': 'Unité de contention Z1P9',
      'ja': '鬼神ズルワーン討滅戦',
      'ko': '귀신 주르반 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 75
  },
  638: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '祖尔宛歼殛战',
      'de': 'Zenit der Götter - Zurvan',
      'en': 'Containment Bay Z1T9 (Extreme)',
      'fr': 'Unité de contention Z1P9 (extrême)',
      'ja': '極鬼神ズルワーン討滅戦',
      'ko': '극 귀신 주르반 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 75
  },
  656: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛丰饶神福地',
      'de': 'Das Diadem - Nophicas Prüfung',
      'en': 'The Diadem - Trials of the Matron',
      'fr': 'Le Diadème - Épreuves de Nophica',
      'ja': '雲海探索 ディアデム諸島 (採集)',
      'ko': '디아뎀 제도: 채집'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 71
  },
  660: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '解放决战多玛王城',
      'de': 'Burg Doma',
      'en': 'Doma Castle',
      'fr': 'Le Château de Doma',
      'ja': '解放決戦 ドマ城',
      'ko': '도마 성'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  661: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '巨炮要塞帝国白山堡',
      'de': 'Castrum Abania',
      'en': 'Castrum Abania',
      'fr': 'Castrum Abania',
      'ja': '巨砲要塞 カストルム・アバニア',
      'ko': '카스트룸 아바니아'
    },
    'offsetX': 72,
    'offsetY': -186,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  662: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '恶党孤城黄金阁',
      'de': 'Schloss Kugane',
      'en': 'Kugane Castle',
      'fr': 'Le Château de Kugane',
      'ja': '悪党成敗 クガネ城',
      'ko': '쿠가네 성'
    },
    'offsetX': 70,
    'offsetY': 33,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  663: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '修行古刹星导寺',
      'de': 'Tempel der Faust',
      'en': 'The Temple of the Fist',
      'fr': 'Le Temple du Poing',
      'ja': '壊神修行 星導山寺院',
      'ko': '성도산 사원'
    },
    'offsetX': -427,
    'offsetY': -314,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  665: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '鱼道现身！',
      'de': 'Ein zweifelhaftes Angebot',
      'en': 'It\'s Probably a Trap',
      'fr': 'Un drôle de Namazu',
      'ja': 'ギョドウ現る！',
      'ko': '교도 등장!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  674: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '须佐之男歼灭战',
      'de': 'Götterdämmerung - Susano',
      'en': 'The Pool of Tribute',
      'fr': 'La Crique aux tributs',
      'ja': 'スサノオ討滅戦',
      'ko': '스사노오 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 77
  },
  677: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '须佐之男歼殛战',
      'de': 'Zenit der Götter - Susano',
      'en': 'The Pool of Tribute (Extreme)',
      'fr': 'La Crique aux tributs (extrême)',
      'ja': '極スサノオ討滅戦',
      'ko': '극 스사노오 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 77
  },
  679: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '神龙歼灭战',
      'de': 'Königliche Menagerie',
      'en': 'The Royal Menagerie',
      'fr': 'La Ménagerie royale',
      'ja': '神龍討滅戦',
      'ko': '신룡 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 76
  },
  684: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '于里昂热的秘策',
      'de': 'Wege zur Transzendenz',
      'en': 'The Resonant',
      'fr': 'La ruse d\'Urianger',
      'ja': 'ウリエンジェの秘策',
      'ko': '위리앙제의 비책'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  688: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '那达慕',
      'de': 'Naadam',
      'en': 'Naadam',
      'fr': 'La grande bataille du Naadam',
      'ja': '終節の合戦',
      'ko': '계절끝 합전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  689: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '鏖战红莲阿拉米格',
      'de': 'Ala Mhigo',
      'en': 'Ala Mhigo',
      'fr': 'Ala Mhigo',
      'ja': '紅蓮決戦 アラミゴ',
      'ko': '알라미고'
    },
    'offsetX': 292,
    'offsetY': -163,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  690: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '时空狭缝外缘',
      'de': 'Interdimensionaler Riss',
      'en': 'Interdimensional Rift',
      'fr': 'Fissure interdimensionnelle',
      'ja': '次元の狭間：外縁',
      'ko': '차원의 틈: 외곽'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 88
  },
  691: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境1',
      'de': 'Deltametrie 1.0',
      'en': 'Deltascape V1.0',
      'fr': 'Deltastice v1.0',
      'ja': '次元の狭間オメガ：デルタ編1',
      'ko': '차원의 틈 오메가: 델타편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  692: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境2',
      'de': 'Deltametrie 2.0',
      'en': 'Deltascape V2.0',
      'fr': 'Deltastice v2.0',
      'ja': '次元の狭間オメガ：デルタ編2',
      'ko': '차원의 틈 오메가: 델타편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  693: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境3',
      'de': 'Deltametrie 3.0',
      'en': 'Deltascape V3.0',
      'fr': 'Deltastice v3.0',
      'ja': '次元の狭間オメガ：デルタ編3',
      'ko': '차원의 틈 오메가: 델타편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  694: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境4',
      'de': 'Deltametrie 4.0',
      'en': 'Deltascape V4.0',
      'fr': 'Deltastice v4.0',
      'ja': '次元の狭間オメガ：デルタ編4',
      'ko': '차원의 틈 오메가: 델타편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  695: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境1',
      'de': 'Deltametrie 1.0 (episch)',
      'en': 'Deltascape V1.0 (Savage)',
      'fr': 'Deltastice v1.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編1',
      'ko': '차원의 틈 오메가: 델타편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  696: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境2',
      'de': 'Deltametrie 2.0 (episch)',
      'en': 'Deltascape V2.0 (Savage)',
      'fr': 'Deltastice v2.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編2',
      'ko': '차원의 틈 오메가: 델타편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  697: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境3',
      'de': 'Deltametrie 3.0 (episch)',
      'en': 'Deltascape V3.0 (Savage)',
      'fr': 'Deltastice v3.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編3',
      'ko': '차원의 틈 오메가: 델타편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  698: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境4',
      'de': 'Deltametrie 4.0 (episch)',
      'en': 'Deltascape V4.0 (Savage)',
      'fr': 'Deltastice v4.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編4',
      'ko': '차원의 틈 오메가: 델타편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  705: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '大会开始',
      'de': 'Thal zu Ehren',
      'en': 'In Thal\'s Name',
      'fr': 'Le tournoi commémoratif du sultanat',
      'ja': 'ウル王杯闘技会の始まり',
      'ko': '울다하 왕실배 투기대회'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 8
  },
  706: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '为了更强',
      'de': 'Die hohe Kunst des Schwertkampfs',
      'en': 'Raising the Sword',
      'fr': 'La finale des champions',
      'ja': 'さらなる剣術の高みへ',
      'ko': '더 높은 검술의 경지로'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 8
  },
  707: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '抗争之力',
      'de': 'Die Kraft des Widerstands',
      'en': 'With Heart and Steel',
      'fr': 'Transmigration démoniaque',
      'ja': '抗う力',
      'ko': '맞서는 힘'
    },
    'offsetX': 298,
    'offsetY': 350,
    'sizeFactor': 200,
    'weatherRate': 37
  },
  708: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '海都路人身首异',
      'de': 'Mord ist sein Hobby',
      'en': 'Blood on the Deck',
      'fr': 'La légende de Musosai<Indent/>: l\'assassin de Limsa Lominsa',
      'ja': '海都を震わす人斬りの宴！',
      'ko': '해양도시를 흔드는 살인자의 연회!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  709: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '极恶之人木枯',
      'de': 'Der Inbegriff des Bösen',
      'en': 'The Face of True Evil',
      'fr': 'L\'abominable Kogarashi',
      'ja': '極悪人コガラシ',
      'ko': '극악무도한 코가라시'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 49
  },
  710: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '松叶门外之变',
      'de': 'Vorfall auf dem Matsuba-Platz',
      'en': 'Matsuba Mayhem',
      'fr': 'Règlement de compte au square Matsuba',
      'ja': '松葉門外の変',
      'ko': '마츠바 사변'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 82
  },
  711: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '决战龟甲岛',
      'de': 'Ent<SoftHyphen/>schei<SoftHyphen/>dungs<SoftHyphen/>schlacht auf Bekko',
      'en': 'The Battle on Bekko',
      'fr': 'L\'af<SoftHyphen/>fron<SoftHyphen/>te<SoftHyphen/>ment de deux justices',
      'ja': 'ベッコウ島の決闘',
      'ko': '베코우 섬의 결투'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 83
  },
  712: {
    'contentType': 9,
    'exVersion': 2,
    'name': {
      'cn': '运河宝物库',
      'de': 'Kanäle von Uznair',
      'en': 'The Lost Canals of Uznair',
      'fr': 'Les Canaux perdus d\'Uznair',
      'ja': '宝物庫 ウズネアカナル',
      'ko': '보물고 우즈네어 운하'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  713: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '漆黑的巨龙',
      'de': 'Der tobende Drache',
      'en': 'Dark as the Night Sky',
      'fr': 'Aussi sombre que la nuit',
      'ja': '漆黒の巨竜',
      'ko': '칠흑의 거룡'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  714: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '红血之龙骑士',
      'de': 'Der Rubin-Drachenreiter',
      'en': 'Dragon Sound',
      'fr': 'Le Dragon écarlate',
      'ja': '紅の竜騎士',
      'ko': '붉은 용기사'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  715: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '遥远的憧憬',
      'de': 'Probe des Meisters',
      'en': 'The Orphans and the Broken Blade',
      'fr': 'L\'aspiration refoulée',
      'ja': 'あと三度、遥かな憧憬',
      'ko': '앞으로 세 번, 아득한 동경'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 86
  },
  716: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '再次相见',
      'de': 'Aus der Tiefe des Herzens',
      'en': 'Our Compromise',
      'fr': 'La dernière séparation',
      'ja': 'あと一度、君に会えたら',
      'ko': '앞으로 한 번, 너와 만날 수 있다면'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 28
  },
  717: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '原初的战士',
      'de': 'Die Urkraft in ihr',
      'en': 'Curious Gorge Meets His Match',
      'fr': 'L\'épreuve de force',
      'ja': '原初的な彼女',
      'ko': '원초적 그녀'
    },
    'offsetX': -77,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  718: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '燃烧吧高吉',
      'de': 'Kriegerische Leidenschaft',
      'en': 'The Heart of the Problem',
      'fr': 'Passion guerrière',
      'ja': '燃えよゴージ！',
      'ko': '불타올라라, 산골짜기!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  719: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '吉祥天女歼灭战',
      'de': 'Götterdämmerung - Lakshmi',
      'en': 'Emanation',
      'fr': 'Émanation',
      'ja': 'ラクシュミ討滅戦',
      'ko': '락슈미 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 87
  },
  720: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '吉祥天女歼殛战',
      'de': 'Zenit der Götter - Lakshmi',
      'en': 'Emanation (Extreme)',
      'fr': 'Émanation (extrême)',
      'ja': '極ラクシュミ討滅戦',
      'ko': '극 락슈미 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 87
  },
  722: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '穿越时空的夙愿',
      'de': 'Ein Wunsch aus alten Zeiten',
      'en': 'Our Unsung Heroes',
      'fr': 'L\'espoir en héritage',
      'ja': '時をかける願い',
      'ko': '시간을 뛰어넘은 염원'
    },
    'offsetX': -175,
    'offsetY': -297,
    'sizeFactor': 200,
    'weatherRate': 63
  },
  723: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '影隐忍法贴',
      'de': 'Aus dem Verborgenen',
      'en': 'When Clans Collide',
      'fr': 'La bataille des clans',
      'ja': '影隠忍法帖',
      'ko': '그림자 인법첩'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  725: {
    'contentType': 9,
    'exVersion': 2,
    'name': {
      'cn': '运河宝物库深层',
      'de': 'Vergessene Kanäle von Uznair',
      'en': 'The Hidden Canals of Uznair',
      'fr': 'Les Canaux cachés d\'Uznair',
      'ja': '宝物庫 ウズネアカナル深層',
      'ko': '보물고 우즈네어 운하 심층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  729: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '距骨研究所（机动战）',
      'de': 'Astragalos',
      'en': 'Astragalos',
      'fr': 'Astragalos (machinerie)',
      'ja': 'アストラガロス (機工戦)',
      'ko': '아스트라갈로스(기공전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  730: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '神龙梦幻歼灭战',
      'de': 'Heldenlied von Shinryu',
      'en': 'The Minstrel\'s Ballad: Shinryu\'s Domain',
      'fr': 'Le domaine de Shinryu',
      'ja': '極神龍討滅戦',
      'ko': '극 신룡 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 76
  },
  731: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '沉没神殿斯卡拉遗迹',
      'de': 'Die versunkene Stadt Skalla',
      'en': 'The Drowned City of Skalla',
      'fr': 'La Cité engloutie de Skalla',
      'ja': '水没遺構 スカラ',
      'ko': '스칼라 유적'
    },
    'offsetX': 185,
    'offsetY': 5,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  732: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 常风之地',
      'de': 'Eureka Anemos',
      'en': 'The Forbidden Land, Eureka Anemos',
      'fr': 'Eurêka Anemos',
      'ja': '禁断の地 エウレカ：アネモス編',
      'ko': '금단의 땅 에우레카: 아네모스편'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 91
  },
  733: {
    'contentType': 28,
    'exVersion': 2,
    'name': {
      'cn': '巴哈姆特绝境战',
      'de': 'Endlose Schatten von Bahamut (fatal)',
      'en': 'The Unending Coil of Bahamut (Ultimate)',
      'fr': 'L\'Abîme infini de Bahamut (fatal)',
      'ja': '絶バハムート討滅戦',
      'ko': '절 바하무트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  734: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '失落之都拉巴纳斯塔',
      'de': 'Rabanastre',
      'en': 'The Royal City of Rabanastre',
      'fr': 'La Cité royale de Rabanastre',
      'ja': '失われた都 ラバナスタ',
      'ko': '왕도 라바나스터'
    },
    'offsetX': 300,
    'offsetY': -100,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  741: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '良缘仪式',
      'de': 'Valentionzeremonie',
      'en': 'The Valentione\'s Ceremony',
      'fr': 'La Cérémonie de la Valention',
      'ja': 'ヴァレンティオンセレモニー',
      'ko': '발렌티온 예식장'
    },
    'offsetX': 0,
    'offsetY': 125,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  742: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '红玉火山狱之盖',
      'de': 'Höllenspund',
      'en': 'Hells\' Lid',
      'fr': 'Le Couvercle des enfers',
      'ja': '紅玉火山 獄之蓋',
      'ko': '지옥뚜껑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  743: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '疯狂战舰无限回廊',
      'de': 'Die Fraktal-Kontinuum (schwer)',
      'en': 'The Fractal Continuum (Hard)',
      'fr': 'Le Continuum fractal (brutal)',
      'ja': '暴走戦艦 フラクタル・コンティニアム (Hard)',
      'ko': '무한연속 박물함(어려움)'
    },
    'offsetX': 0,
    'offsetY': 350,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  746: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '白虎镇魂战',
      'de': 'Seelentanz - Byakko',
      'en': 'The Jade Stoa',
      'fr': 'La Clairière de Jade',
      'ja': '白虎征魂戦',
      'ko': '백호 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 93
  },
  748: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境1',
      'de': 'Sigmametrie 1.0',
      'en': 'Sigmascape V1.0',
      'fr': 'Sigmastice v1.0',
      'ja': '次元の狭間オメガ：シグマ編1',
      'ko': '차원의 틈 오메가: 시그마편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  749: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境2',
      'de': 'Sigmametrie 2.0',
      'en': 'Sigmascape V2.0',
      'fr': 'Sigmastice v2.0',
      'ja': '次元の狭間オメガ：シグマ編2',
      'ko': '차원의 틈 오메가: 시그마편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  750: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境3',
      'de': 'Sigmametrie 3.0',
      'en': 'Sigmascape V3.0',
      'fr': 'Sigmastice v3.0',
      'ja': '次元の狭間オメガ：シグマ編3',
      'ko': '차원의 틈 오메가: 시그마편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  751: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境4',
      'de': 'Sigmametrie 4.0',
      'en': 'Sigmascape V4.0',
      'fr': 'Sigmastice v4.0',
      'ja': '次元の狭間オメガ：シグマ編4',
      'ko': '차원의 틈 오메가: 시그마편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  752: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境1',
      'de': 'Sigmametrie 1.0 (episch)',
      'en': 'Sigmascape V1.0 (Savage)',
      'fr': 'Sigmastice v1.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編1',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  753: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境2',
      'de': 'Sigmametrie 2.0 (episch)',
      'en': 'Sigmascape V2.0 (Savage)',
      'fr': 'Sigmastice v2.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編2',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  754: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境3',
      'de': 'Sigmametrie 3.0 (episch)',
      'en': 'Sigmascape V3.0 (Savage)',
      'fr': 'Sigmastice v3.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編3',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  755: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境4',
      'de': 'Sigmametrie 4.0 (episch)',
      'en': 'Sigmascape V4.0 (Savage)',
      'fr': 'Sigmastice v4.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編4',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  758: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '白虎诗魂战',
      'de': 'Seelensturm - Byakko',
      'en': 'The Jade Stoa (Extreme)',
      'fr': 'La Clairière de Jade (extrême)',
      'ja': '極白虎征魂戦',
      'ko': '극 백호 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 93
  },
  759: {
    'exVersion': 2,
    'name': {
      'cn': '多玛飞地',
      'de': 'Domanische Enklave',
      'en': 'The Doman Enclave',
      'fr': 'Quartier enclavé de Doma',
      'ja': 'ドマ町人地',
      'ko': '도마 도읍지'
    },
    'offsetX': 23,
    'offsetY': 34,
    'sizeFactor': 400,
    'weatherRate': 84
  },
  761: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '火龙狩猎战',
      'de': 'Jagd auf Rathalos',
      'en': 'The Great Hunt',
      'fr': 'Chasse au Rathalos',
      'ja': 'リオレウス狩猟戦',
      'ko': '리오레우스 수렵전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  762: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '火龙上位狩猎战',
      'de': 'Jagd auf Rathalos (schwer)',
      'en': 'The Great Hunt (Extreme)',
      'fr': 'Chasse au Rathalos (extrême)',
      'ja': '極リオレウス狩猟戦',
      'ko': '극 리오레우스 수렵전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  763: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 恒冰之地',
      'de': 'Eureka Pagos',
      'en': 'The Forbidden Land, Eureka Pagos',
      'fr': 'Eurêka Pagos',
      'ja': '禁断の地 エウレカ：パゴス編',
      'ko': '금단의 땅 에우레카: 파고스편'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 94
  },
  768: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '风水灵庙岩燕庙',
      'de': 'Kompass der Schwalbe',
      'en': 'The Swallow\'s Compass',
      'fr': 'Le Compas de l\'Hirondelle',
      'ja': '風水霊殿 ガンエン廟',
      'ko': '강엔 종묘'
    },
    'offsetX': 240,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  769: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '拂晓的少年',
      'de': 'Der Knabe der Morgenröte',
      'en': 'Emissary of the Dawn',
      'fr': 'Voyage en terre hostile',
      'ja': '「暁」の少年',
      'ko': '\'새벽\'의 소년'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  770: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 1～10层',
      'de': 'Himmelssäule (Ebenen 1-10)',
      'en': 'Heaven-on-High  (Floors 1-10)',
      'fr': 'Le Pilier des Cieux (étages 1-10)',
      'ja': 'アメノミハシラ 1～10層',
      'ko': '천궁탑 1~10층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  771: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 11～20层',
      'de': 'Himmelssäule (Ebenen 11-20)',
      'en': 'Heaven-on-High  (Floors 11-20)',
      'fr': 'Le Pilier des Cieux (étages 11-20)',
      'ja': 'アメノミハシラ 11～20層',
      'ko': '천궁탑 11~20층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  772: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 21～30层',
      'de': 'Himmelssäule (Ebenen 21-30)',
      'en': 'Heaven-on-High  (Floors 21-30)',
      'fr': 'Le Pilier des Cieux (étages 21-30)',
      'ja': 'アメノミハシラ 21～30層',
      'ko': '천궁탑 21~30층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  773: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 41～50层',
      'de': 'Himmelssäule (Ebenen 41-50)',
      'en': 'Heaven-on-High  (Floors 41-50)',
      'fr': 'Le Pilier des Cieux (étages 41-50)',
      'ja': 'アメノミハシラ 41～50層',
      'ko': '천궁탑 41~50층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  774: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 61～70层',
      'de': 'Himmelssäule (Ebenen 61-70)',
      'en': 'Heaven-on-High  (Floors 61-70)',
      'fr': 'Le Pilier des Cieux (étages 61-70)',
      'ja': 'アメノミハシラ 61～70層',
      'ko': '천궁탑 61~70층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  775: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 81～90层',
      'de': 'Himmelssäule (Ebenen 81-90)',
      'en': 'Heaven-on-High  (Floors 81-90)',
      'fr': 'Le Pilier des Cieux (étages 81-90)',
      'ja': 'アメノミハシラ 81～90層',
      'ko': '천궁탑 81~90층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  776: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '封闭圣塔黎铎拉纳大灯塔',
      'de': 'Richtfeuer von Ridorana',
      'en': 'The Ridorana Lighthouse',
      'fr': 'Le Phare de Ridorana',
      'ja': '封じられた聖塔 リドルアナ',
      'ko': '대등대 리도르아나'
    },
    'offsetX': 202,
    'offsetY': -92,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  777: {
    'contentType': 28,
    'exVersion': 2,
    'name': {
      'cn': '究极神兵绝境战',
      'de': 'Heldenlied von Ultima (fatal)',
      'en': 'The Weapon\'s Refrain (Ultimate)',
      'fr': 'La Fantasmagorie d\'Ultima (fatal)',
      'ja': '絶アルテマウェポン破壊作戦',
      'ko': '절 알테마 웨폰 파괴작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  778: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '月读歼灭战',
      'de': 'Götterdämmerung - Tsukuyomi',
      'en': 'Castrum Fluminis',
      'fr': 'Castrum Fluminis',
      'ja': 'ツクヨミ討滅戦',
      'ko': '츠쿠요미 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  779: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '月读幽夜歼灭战',
      'de': 'Zenit der Götter - Tsukuyomi',
      'en': 'The Minstrel\'s Ballad: Tsukuyomi\'s Pain',
      'fr': 'Castrum Fluminis (extrême)',
      'ja': '極ツクヨミ討滅戦',
      'ko': '극 츠쿠요미 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  782: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 31～40层',
      'de': 'Himmelssäule (Ebenen 31-40)',
      'en': 'Heaven-on-High  (Floors 31-40)',
      'fr': 'Le Pilier des Cieux (étages 31-40)',
      'ja': 'アメノミハシラ 31～40層',
      'ko': '천궁탑 31~40층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  783: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 51～60层',
      'de': 'Himmelssäule (Ebenen 51-60)',
      'en': 'Heaven-on-High  (Floors 51-60)',
      'fr': 'Le Pilier des Cieux (étages 51-60)',
      'ja': 'アメノミハシラ 51～60層',
      'ko': '천궁탑 51~60층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  784: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 71～80层',
      'de': 'Himmelssäule (Ebenen 71-80)',
      'en': 'Heaven-on-High  (Floors 71-80)',
      'fr': 'Le Pilier des Cieux (étages 71-80)',
      'ja': 'アメノミハシラ 71～80層',
      'ko': '천궁탑 71~80층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  785: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 91～100层',
      'de': 'Himmelssäule (Ebenen 91-100)',
      'en': 'Heaven-on-High  (Floors 91-100)',
      'fr': 'Le Pilier des Cieux (étages 91-100)',
      'ja': 'アメノミハシラ 91～100層',
      'ko': '천궁탑 91~100층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  788: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '污染庭园圣茉夏娜植物园',
      'de': 'Sankt Mocianne-Arboretum (schwer)',
      'en': 'Saint Mocianne\'s Arboretum (Hard)',
      'fr': 'L\'Arboretum Sainte-Mocianne (brutal)',
      'ja': '草木汚染 聖モシャーヌ植物園 (Hard)',
      'ko': '성 모샨 식물원(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  789: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '死亡大地终末焦土',
      'de': 'Das Kargland',
      'en': 'The Burn',
      'fr': 'L\'Escarre',
      'ja': '永久焦土 ザ・バーン',
      'ko': '영구 초토지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 97
  },
  790: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '灾厄重现军事演习',
      'de': 'Gedenkschlacht der Eorzäischen Allianz',
      'en': 'The Calamity Retold',
      'fr': 'Les grandes manœuvres commémoratives',
      'ja': '新生祭軍事演習',
      'ko': '신생제 군사훈련'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 95
  },
  791: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '隐塞（机动战）',
      'de': 'Verborgene Schlucht',
      'en': 'Hidden Gorge',
      'fr': 'Gorge dérobée (machinerie)',
      'ja': 'ヒドゥンゴージ (機工戦)',
      'ko': '숨겨진 보루(기공전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  792: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '虚景跳跳乐大挑战',
      'de': 'Kaktor-Kletterwand',
      'en': 'Leap of Faith',
      'fr': 'Haute voltige',
      'ja': '挑戦！ ジャンピングアスレチック',
      'ko': '뛰어라! 점핑 운동회'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  793: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '国境防线基姆利特暗区',
      'de': 'Die Ghimlyt-Finsternis',
      'en': 'The Ghimlyt Dark',
      'fr': 'Les Ténèbres de Ghimlyt',
      'ja': '境界戦線 ギムリトダーク',
      'ko': '김리트 황야'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  794: {
    'contentType': 9,
    'exVersion': 2,
    'name': {
      'cn': '运河宝物库神殿',
      'de': 'Glücksaltäre von Uznair',
      'en': 'The Shifting Altars of Uznair',
      'fr': 'Le Temple sacré d\'Uznair',
      'ja': '宝物庫 ウズネアカナル祭殿',
      'ko': '보물고 우즈네어 운하 제전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  795: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 涌火之地',
      'de': 'Eureka Pyros',
      'en': 'The Forbidden Land, Eureka Pyros',
      'fr': 'Eurêka Pyros',
      'ja': '禁断の地 エウレカ：ピューロス編',
      'ko': '금단의 땅 에우레카: 피로스편'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 96
  },
  796: {
    'contentType': 27,
    'exVersion': 0,
    'name': {
      'cn': '出道战',
      'de': 'Debüt in der Himmlischen Arena',
      'en': 'All\'s Well That Starts Well',
      'fr': 'Début du spectacle',
      'ja': 'デビューマッチ',
      'ko': '데뷔전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  797: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '楔石洞',
      'de': 'Der Wille der Mondgöttin',
      'en': 'The Will of the Moon',
      'fr': 'Ralliement dans la steppe',
      'ja': '楔石の虚',
      'ko': '쐐기돌 동굴'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  798: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境1',
      'de': 'Alphametrie 1.0',
      'en': 'Alphascape V1.0',
      'fr': 'Alphastice v1.0',
      'ja': '次元の狭間オメガ：アルファ編1',
      'ko': '차원의 틈 오메가: 알파편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  799: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境2',
      'de': 'Alphametrie 2.0',
      'en': 'Alphascape V2.0',
      'fr': 'Alphastice v2.0',
      'ja': '次元の狭間オメガ：アルファ編2',
      'ko': '차원의 틈 오메가: 알파편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  800: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境3',
      'de': 'Alphametrie 3.0',
      'en': 'Alphascape V3.0',
      'fr': 'Alphastice v3.0',
      'ja': '次元の狭間オメガ：アルファ編3',
      'ko': '차원의 틈 오메가: 알파편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  801: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境4',
      'de': 'Alphametrie 4.0',
      'en': 'Alphascape V4.0',
      'fr': 'Alphastice v4.0',
      'ja': '次元の狭間オメガ：アルファ編4',
      'ko': '차원의 틈 오메가: 알파편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  802: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境1',
      'de': 'Alphametrie 1.0 (episch)',
      'en': 'Alphascape V1.0 (Savage)',
      'fr': 'Alphastice v1.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編1',
      'ko': '차원의 틈 오메가: 알파편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  803: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境2',
      'de': 'Alphametrie 2.0 (episch)',
      'en': 'Alphascape V2.0 (Savage)',
      'fr': 'Alphastice v2.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編2',
      'ko': '차원의 틈 오메가: 알파편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  804: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境3',
      'de': 'Alphametrie 3.0 (episch)',
      'en': 'Alphascape V3.0 (Savage)',
      'fr': 'Alphastice v3.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編3',
      'ko': '차원의 틈 오메가: 알파편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  805: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境4',
      'de': 'Alphametrie 4.0 (episch)',
      'en': 'Alphascape V4.0 (Savage)',
      'fr': 'Alphastice v4.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編4',
      'ko': '차원의 틈 오메가: 알파편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  806: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '保镖歼灭战',
      'de': 'Duell auf der Kugane-Brücke',
      'en': 'Kugane Ohashi',
      'fr': 'Le Pont Ohashi',
      'ja': '真ヨウジンボウ討滅戦',
      'ko': '진 요우진보 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  810: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '朱雀镇魂战',
      'de': 'Seelentanz - Suzaku',
      'en': 'Hells\' Kier',
      'fr': 'Le Nid des Lamentations',
      'ja': '朱雀征魂戦',
      'ko': '주작 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 98
  },
  811: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '朱雀诗魂战',
      'de': 'Seelensturm - Suzaku',
      'en': 'Hells\' Kier (Extreme)',
      'fr': 'Le Nid des Lamentations (extrême)',
      'ja': '極朱雀征魂戦',
      'ko': '극 주작 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 98
  },
  813: {
    'exVersion': 3,
    'name': {
      'cn': '雷克兰德',
      'de': 'Seenland',
      'en': 'Lakeland',
      'fr': 'Grand-Lac',
      'ja': 'レイクランド',
      'ko': '레이크랜드'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 106
  },
  814: {
    'exVersion': 3,
    'name': {
      'cn': '珂露西亚岛',
      'de': 'Kholusia',
      'en': 'Kholusia',
      'fr': 'Kholusia',
      'ja': 'コルシア島',
      'ko': '콜루시아 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 107
  },
  815: {
    'exVersion': 3,
    'name': {
      'cn': '安穆·艾兰',
      'de': 'Amh Araeng',
      'en': 'Amh Araeng',
      'fr': 'Amh Araeng',
      'ja': 'アム・アレーン',
      'ko': '아므 아랭'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 108
  },
  816: {
    'exVersion': 3,
    'name': {
      'cn': '伊尔美格',
      'de': 'Il Mheg',
      'en': 'Il Mheg',
      'fr': 'Il Mheg',
      'ja': 'イル・メグ',
      'ko': '일 메그'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 109
  },
  817: {
    'exVersion': 3,
    'name': {
      'cn': '拉凯提卡大森林',
      'de': 'Der Große Wald Rak\'tika',
      'en': 'The Rak\'tika Greatwood',
      'fr': 'Rak\'tika',
      'ja': 'ラケティカ大森林',
      'ko': '라케티카 대삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 110
  },
  818: {
    'exVersion': 3,
    'name': {
      'cn': '黑风海',
      'de': 'Tempest',
      'en': 'The Tempest',
      'fr': 'La Tempête',
      'ja': 'テンペスト',
      'ko': '템페스트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 111
  },
  819: {
    'exVersion': 3,
    'name': {
      'cn': '水晶都',
      'de': 'Crystarium',
      'en': 'The Crystarium',
      'fr': 'Cristarium',
      'ja': 'クリスタリウム',
      'ko': '크리스타리움'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 112
  },
  820: {
    'exVersion': 3,
    'name': {
      'cn': '游末邦',
      'de': 'Eulmore',
      'en': 'Eulmore',
      'fr': 'Eulmore',
      'ja': 'ユールモア',
      'ko': '율모어'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 113
  },
  821: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '水妖幻园多恩美格禁园',
      'de': 'Dohn Mheg',
      'en': 'Dohn Mheg',
      'fr': 'Dohn Mheg',
      'ja': '水妖幻園 ドォーヌ・メグ',
      'ko': '도느 메그'
    },
    'offsetX': 0,
    'offsetY': 200,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  822: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '伪造天界格鲁格火山',
      'de': 'Der Gulg',
      'en': 'Mt. Gulg',
      'fr': 'Mont Gulg',
      'ja': '偽造天界 グルグ火山',
      'ko': '굴그 화산'
    },
    'offsetX': -188,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  823: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '文明古迹奇坦那神影洞',
      'de': 'Irrungen der Qitari',
      'en': 'The Qitana Ravel',
      'fr': 'L\'Enchevêtrement des Qitari',
      'ja': '古跡探索 キタンナ神影洞',
      'ko': '키타나 신굴'
    },
    'offsetX': 0,
    'offsetY': -274,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  824: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '青龙镇魂战',
      'de': 'Seelentanz - Seiryu',
      'en': 'The Wreath of Snakes',
      'fr': 'L\'Îlot des Amertumes',
      'ja': '青龍征魂戦',
      'ko': '청룡 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 99
  },
  825: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '青龙诗魂战',
      'de': 'Seelensturm - Seiryu',
      'en': 'The Wreath of Snakes (Extreme)',
      'fr': 'L\'Îlot des Amertumes (extrême)',
      'ja': '極青龍征魂戦',
      'ko': '극 청룡 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 99
  },
  826: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '乐欲之所瓯博讷修道院',
      'de': 'Kloster von Orbonne',
      'en': 'The Orbonne Monastery',
      'fr': 'Le Monastère d\'Orbonne',
      'ja': '楽欲の僧院 オーボンヌ',
      'ko': '오본느 수도원'
    },
    'offsetX': -545,
    'offsetY': -663,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  827: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 丰水之地',
      'de': 'Eureka Hydatos',
      'en': 'The Forbidden Land, Eureka Hydatos',
      'fr': 'Eurêka Hydatos',
      'ja': '禁断の地 エウレカ：ヒュダトス編',
      'ko': '금단의 땅 에우레카: 히다토스편'
    },
    'offsetX': 0,
    'offsetY': 475,
    'sizeFactor': 100,
    'weatherRate': 100
  },
  830: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '英雄挽歌',
      'de': 'Requiem der Helden',
      'en': 'A Requiem for Heroes',
      'fr': 'Un requiem pour les héros',
      'ja': '英雄への鎮魂歌',
      'ko': '영웅을 위한 진혼가'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  831: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '多玛方城战：东风战4人亲友桌（不带食断）',
      'de': '4-Spieler-Mahjong (schnelle Partie, Kuitan deaktiviert)',
      'en': 'Four-player Mahjong (Quick Match, Kuitan Disabled)',
      'fr': 'Mahjong domien<Indent/>: 4 joueurs (partie rapide sans kuitan)',
      'ja': 'ドマ式麻雀：東風戦4人セット卓（クイタン無し）',
      'ko': '작패유희: 동풍전 4인용 탁자(부르기 단요구 없음)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  832: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '空军装甲驾驶员',
      'de': 'Luftwaffe, Feuer frei!',
      'en': 'Air Force One',
      'fr': 'As de l\'air',
      'ja': '出撃！ エアフォースパイロット',
      'ko': '출격! 에어포스 조종사'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  834: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'cn': '风之使者',
      'de': 'Durch den Sturm und zurück',
      'en': 'Messenger of the Winds',
      'fr': 'La Messagère du vent',
      'ja': '来訪せし風の御使',
      'ko': '바람의 어사'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 101
  },
  836: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '避暑离宫马利卡大井',
      'de': 'Malikahs Brunnen',
      'en': 'Malikah\'s Well',
      'fr': 'Le Puits de Malikah',
      'ja': '爽涼離宮 マリカの大井戸',
      'ko': '말리카 큰우물'
    },
    'offsetX': -65,
    'offsetY': -30,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  837: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '遇袭集落水滩村',
      'de': 'Holminster',
      'en': 'Holminster Switch',
      'fr': 'Holminster',
      'ja': '殺戮郷村 ホルミンスター',
      'ko': '홀민스터'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  838: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '末日暗影亚马乌罗提',
      'de': 'Amaurot',
      'en': 'Amaurot',
      'fr': 'Amaurote',
      'ja': '終末幻想 アーモロート',
      'ko': '아모로트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 105
  },
  840: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '异界遗构希尔科斯孪晶塔',
      'de': 'Der Kristallzwilling',
      'en': 'The Twinning',
      'fr': 'La Macle de Syrcus',
      'ja': '異界遺構 シルクス・ツイニング',
      'ko': '쌍둥이 시르쿠스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  841: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '创造机构阿尼德罗学院',
      'de': 'Akadaemia Anyder',
      'en': 'Akadaemia Anyder',
      'fr': 'Akadaemia Anydre',
      'ja': '創造機関 アナイダアカデミア',
      'ko': '애나이더 아카데미아'
    },
    'offsetX': 0,
    'offsetY': 30,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  845: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '缇坦妮雅歼灭战',
      'de': 'Offenbarung - Titania',
      'en': 'The Dancing Plague',
      'fr': 'La Valse du Monarque',
      'ja': 'ティターニア討滅戦',
      'ko': '티타니아 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 103
  },
  846: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '无瑕灵君歼灭战',
      'de': 'Offenbarung - Innozenz',
      'en': 'The Crown of the Immaculate',
      'fr': 'La Couronne de l\'Immaculé',
      'ja': 'イノセンス討滅戦',
      'ko': '이노센스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 104
  },
  847: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '哈迪斯歼灭战',
      'de': 'Offenbarung - Hades',
      'en': 'The Dying Gasp',
      'fr': 'Le Râle de l\'Agonie',
      'ja': 'ハーデス討滅戦',
      'ko': '하데스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 105
  },
  848: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '无瑕灵君歼殛战',
      'de': 'Letzte Läuterung - Innozenz',
      'en': 'The Crown of the Immaculate (Extreme)',
      'fr': 'La Couronne de l\'Immaculé (extrême)',
      'ja': '極イノセンス討滅戦',
      'ko': '극 이노센스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 104
  },
  849: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章1',
      'de': 'Edens Erwachen - Auferstehung',
      'en': 'Eden\'s Gate: Resurrection',
      'fr': 'L\'Éveil d\'Éden - Résurrection',
      'ja': '希望の園エデン：覚醒編1',
      'ko': '희망의 낙원 에덴: 각성편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  850: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章2',
      'de': 'Edens Erwachen - Niederkunft',
      'en': 'Eden\'s Gate: Descent',
      'fr': 'L\'Éveil d\'Éden - Descente',
      'ja': '希望の園エデン：覚醒編2',
      'ko': '희망의 낙원 에덴: 각성편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  851: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章3',
      'de': 'Edens Erwachen - Überflutung',
      'en': 'Eden\'s Gate: Inundation',
      'fr': 'L\'Éveil d\'Éden - Déluge',
      'ja': '希望の園エデン：覚醒編3',
      'ko': '희망의 낙원 에덴: 각성편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  852: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章4',
      'de': 'Edens Erwachen - Beerdigung',
      'en': 'Eden\'s Gate: Sepulture',
      'fr': 'L\'Éveil d\'Éden - Inhumation',
      'ja': '希望の園エデン：覚醒編4',
      'ko': '희망의 낙원 에덴: 각성편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  853: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章1',
      'de': 'Edens Erwachen - Auferstehung (episch)',
      'en': 'Eden\'s Gate: Resurrection (Savage)',
      'fr': 'L\'Éveil d\'Éden - Résurrection (sadique)',
      'ja': '希望の園エデン零式：覚醒編1',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  854: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章2',
      'de': 'Edens Erwachen - Niederkunft (episch)',
      'en': 'Eden\'s Gate: Descent (Savage)',
      'fr': 'L\'Éveil d\'Éden - Descente (sadique)',
      'ja': '希望の園エデン零式：覚醒編2',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  855: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章3',
      'de': 'Edens Erwachen - Überflutung (episch)',
      'en': 'Eden\'s Gate: Inundation (Savage)',
      'fr': 'L\'Éveil d\'Éden - Déluge (sadique)',
      'ja': '希望の園エデン零式：覚醒編3',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  856: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章4',
      'de': 'Edens Erwachen - Beerdigung (episch)',
      'en': 'Eden\'s Gate: Sepulture (Savage)',
      'fr': 'L\'Éveil d\'Éden - Inhumation (sadique)',
      'ja': '希望の園エデン零式：覚醒編4',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  858: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '缇坦妮雅歼殛战',
      'de': 'Letzte Läuterung - Titania',
      'en': 'The Dancing Plague (Extreme)',
      'fr': 'La Valse du Monarque (extrême)',
      'ja': '極ティターニア討滅戦',
      'ko': '극 티타니아 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 103
  },
  859: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '机关、诅咒、剧毒与……',
      'de': 'Der Beichtstuhl von Toupasa dem Älteren',
      'en': 'Legend of the Not-so-hidden Temple',
      'fr': 'Le Confessionnal de Toupasa l\'ancien',
      'ja': '仕掛けと呪いと毒と',
      'ko': '함정과 저주와 독'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 102
  },
  860: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '废都拿巴示艾兰',
      'de': 'Vater und Bruder',
      'en': 'Coming Clean',
      'fr': 'Sur les rails de Nabaath Areng',
      'ja': '廃都ナバスアレン',
      'ko': '나바스아렝 폐허'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 102
  },
  873: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '摇摆的天平',
      'de': 'Ob Mitleid oder Hass',
      'en': 'The Hardened Heart',
      'fr': 'Naissance d\'un bourreau',
      'ja': '揺れる天秤',
      'ko': '흔들리는 천칭'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  874: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '古代大再生魔法',
      'de': 'Alter Zauber',
      'en': 'The Lost and the Found',
      'fr': 'Magie ancestrale',
      'ja': '古の大再生魔法',
      'ko': '고대의 대재생 마법'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 110
  },
  875: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '勇敢的猎人',
      'de': 'Der Legende auf der Spur',
      'en': 'The Hunter\'s Legacy',
      'fr': 'La chasseuse de légende',
      'ja': '勇気の狩人',
      'ko': '용기 있는 사냥꾼'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 63
  },
  876: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '奈贝尔特的后悔',
      'de': 'Ein großes Opfer',
      'en': 'Nyelbert\'s Lament',
      'fr': 'Une cupidité bien généreuse',
      'ja': 'ナイルベルトの後悔',
      'ko': '나일베르트의 후회'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  879: {
    'contentType': 9,
    'exVersion': 3,
    'name': {
      'cn': '梦羽宝境',
      'de': 'Verliese von Lyhe Ghiah',
      'en': 'The Dungeons of Lyhe Ghiah',
      'fr': 'Le Donjon hypogéen du Lyhe Ghiah',
      'ja': '宝物庫 リェー・ギア・ダンジョン',
      'ko': '보물고 리예 기아 지하미궁'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  882: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '复制工厂废墟',
      'de': 'Die kopierte Fabrik',
      'en': 'The Copied Factory',
      'fr': 'La réplique de l\'usine désaffectée',
      'ja': '複製サレタ工場廃墟',
      'ko': '복제된 공장 폐허'
    },
    'offsetX': 610,
    'offsetY': 70,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  884: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '魔法宫殿宇宙宫',
      'de': 'Chateau Cosmea',
      'en': 'The Grand Cosmos',
      'fr': 'Le Cosmos coruscant',
      'ja': '魔法宮殿 グラン・コスモス',
      'ko': '그랑 코스모스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  885: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '哈迪斯孤念歼灭战',
      'de': 'Letzte Läuterung - Hades',
      'en': 'The Minstrel\'s Ballad: Hades\'s Elegy',
      'fr': 'Le Râle de l\'Agonie (extrême)',
      'ja': '極ハーデス討滅戦',
      'ko': '극 하데스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 105
  },
  887: {
    'contentType': 28,
    'exVersion': 3,
    'name': {
      'cn': '亚历山大绝境战',
      'de': 'Alexander (fatal)',
      'en': 'The Epic of Alexander (Ultimate)',
      'fr': 'L\'Odyssée d\'Alexander (fatal)',
      'ja': '絶アレキサンダー討滅戦',
      'ko': '절 알렉산더 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  888: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '昂萨哈凯尔（竞争战）',
      'de': 'Onsal Hakair (Danshig Naadam)',
      'en': 'Onsal Hakair (Danshig Naadam)',
      'fr': 'Onsal Hakair (Danshig Naadam)',
      'ja': 'オンサル・ハカイル (終節戦)',
      'ko': '온살 하카이르(계절끝 합전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 117
  },
  893: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '纯白誓约、漆黑密约',
      'de': 'Der Wolf und der Drachenreiter',
      'en': 'Vows of Virtue, Deeds of Cruelty',
      'fr': 'Vœux de vertu, actes de cruauté',
      'ja': '白き誓約、黒き密約',
      'ko': '하얀 서약, 검은 밀약'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  894: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '我心依旧',
      'de': 'Trubel im Traumland',
      'en': 'As the Heart Bids',
      'fr': 'À l\'écoute de soi',
      'ja': 'この心が望むがままに',
      'ko': '이 마음이 원하는 대로'
    },
    'offsetX': -12,
    'offsetY': 50,
    'sizeFactor': 400,
    'weatherRate': 40
  },
  897: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '红宝石神兵破坏作战',
      'de': 'Rubinfeuer - Entfesselung',
      'en': 'Cinder Drift',
      'fr': 'Les Nuées de Brandons',
      'ja': 'ルビーウェポン破壊作戦',
      'ko': '루비 웨폰 파괴작전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 28
  },
  898: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '黑风海底阿尼德罗追忆馆',
      'de': 'Anamnesis Anyder',
      'en': 'Anamnesis Anyder',
      'fr': 'Anamnesis Anydre',
      'ja': '黒風海底 アニドラス・アナムネーシス',
      'ko': '애니드라스 아남네시스'
    },
    'offsetX': 100,
    'offsetY': -390,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  900: {
    'contentType': 16,
    'exVersion': 0,
    'name': {
      'cn': '出海垂钓',
      'de': 'Auf großer Fahrt',
      'en': 'Ocean Fishing',
      'fr': 'Pêche en mer',
      'ja': 'オーシャンフィッシング',
      'ko': '먼바다 낚시'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 14
  },
  902: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章1',
      'de': 'Edens Resonanz - Entladung',
      'en': 'Eden\'s Verse: Fulmination',
      'fr': 'Les Accords d\'Éden - Fulmination',
      'ja': '希望の園エデン：共鳴編1',
      'ko': '희망의 낙원 에덴: 공명편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  903: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章2',
      'de': 'Edens Resonanz - Raserei',
      'en': 'Eden\'s Verse: Furor',
      'fr': 'Les Accords d\'Éden - Fureur',
      'ja': '希望の園エデン：共鳴編2',
      'ko': '희망의 낙원 에덴: 공명편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  904: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章3',
      'de': 'Edens Resonanz - Bildersturm',
      'en': 'Eden\'s Verse: Iconoclasm',
      'fr': 'Les Accords d\'Éden - Iconoclasme',
      'ja': '希望の園エデン：共鳴編3',
      'ko': '희망의 낙원 에덴: 공명편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  905: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章4',
      'de': 'Edens Resonanz - Erstarrung',
      'en': 'Eden\'s Verse: Refulgence',
      'fr': 'Les Accords d\'Éden - Éclat',
      'ja': '希望の園エデン：共鳴編4',
      'ko': '희망의 낙원 에덴: 공명편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  906: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章1',
      'de': 'Edens Resonanz - Entladung (episch)',
      'en': 'Eden\'s Verse: Fulmination (Savage)',
      'fr': 'Les Accords d\'Éden - Fulmination (sadique)',
      'ja': '希望の園エデン零式：共鳴編1',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  907: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章2',
      'de': 'Edens Resonanz - Raserei (episch)',
      'en': 'Eden\'s Verse: Furor (Savage)',
      'fr': 'Les Accords d\'Éden - Fureur (sadique)',
      'ja': '希望の園エデン零式：共鳴編2',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  908: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章3',
      'de': 'Edens Resonanz - Bildersturm (episch)',
      'en': 'Eden\'s Verse: Iconoclasm (Savage)',
      'fr': 'Les Accords d\'Éden - Iconoclasme (sadique)',
      'ja': '希望の園エデン零式：共鳴編3',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  909: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章4',
      'de': 'Edens Resonanz - Erstarrung (episch)',
      'en': 'Eden\'s Verse: Refulgence (Savage)',
      'fr': 'Les Accords d\'Éden - Éclat (sadique)',
      'ja': '希望の園エデン零式：共鳴編4',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  911: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '博兹雅堡垒蒸发事件',
      'de': 'Der Bozja-Vorfall',
      'en': 'The Bozja Incident',
      'fr': 'Prélude à la catastrophe',
      'ja': 'シタデル・ボズヤ蒸発事変',
      'ko': '보즈야 사건'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 123
  },
  912: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '红宝石神兵狂想作战',
      'de': 'Rubinfeuer - Trauma',
      'en': 'Cinder Drift (Extreme)',
      'fr': 'Les Nuées de Brandons (extrême)',
      'ja': '極ルビーウェポン破壊作戦',
      'ko': '극 루비 웨폰 파괴작전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 28
  },
  913: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '博兹雅堡垒追忆战',
      'de': 'Memoria Misera (extrem)',
      'en': 'Memoria Misera (Extreme)',
      'fr': 'Memoria Misera (extrême)',
      'ja': '極シタデル・ボズヤ追憶戦',
      'ko': '극 보즈야 추억전'
    },
    'offsetX': -35,
    'offsetY': 683,
    'sizeFactor': 400,
    'weatherRate': 123
  },
  914: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '英雄无法安息',
      'de': 'Von schlafenden Helden',
      'en': 'A Sleep Disturbed',
      'fr': 'L\'épreuve ronka',
      'ja': '汝、英雄の眠り妨げるは',
      'ko': '그대, 영웅의 잠을 방해하는가'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  916: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '暗影决战诺弗兰特',
      'de': 'Schlacht um Norvrandt',
      'en': 'The Heroes\' Gauntlet',
      'fr': 'La Traversée de Norvrandt',
      'ja': '漆黒決戦 ノルヴラント',
      'ko': '노르브란트'
    },
    'offsetX': 626,
    'offsetY': -611,
    'sizeFactor': 200,
    'weatherRate': 125
  },
  917: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '人偶军事基地',
      'de': 'Die Puppenfestung',
      'en': 'The Puppets\' Bunker',
      'fr': 'La base militaire des Pantins',
      'ja': '人形タチノ軍事基地',
      'ko': '인형들의 군사 기지'
    },
    'offsetX': 290,
    'offsetY': -190,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  920: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '南方博兹雅战线',
      'de': 'Bozja-Südfront',
      'en': 'The Bozjan Southern Front',
      'fr': 'Front sud de Bozja',
      'ja': '南方ボズヤ戦線',
      'ko': '남부 보즈야 전선'
    },
    'offsetX': -127,
    'offsetY': -424,
    'sizeFactor': 100,
    'weatherRate': 124
  },
  922: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '光之战士歼灭战',
      'de': 'Krieger des Lichts',
      'en': 'The Seat of Sacrifice',
      'fr': 'Le Trône du Sacrifice',
      'ja': 'ウォーリア・オブ・ライト討滅戦',
      'ko': '빛의 전사 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 125
  },
  923: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '光之战士幻耀歼灭战',
      'de': 'Krieger des Lichts (extrem)',
      'en': 'The Seat of Sacrifice (Extreme)',
      'fr': 'Le Trône du Sacrifice (extrême)',
      'ja': '極ウォーリア・オブ・ライト討滅戦',
      'ko': '극 빛의 전사 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 126
  },
  924: {
    'contentType': 9,
    'exVersion': 3,
    'name': {
      'cn': '梦羽宝殿',
      'de': 'Das Karussell von Lyhe Ghiah',
      'en': 'The Shifting Oubliettes of Lyhe Ghiah',
      'fr': 'Le Jardin secret du Lyhe Ghiah',
      'ja': '宝物庫 リェー・ギア・ダンジョン祭殿',
      'ko': '보물고 리예 기아 지하미궁 제전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  925: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '飞翔吧，前往维尔利特！',
      'de': 'Luftangriff auf Werlyt',
      'en': 'Sleep Now in Sapphire',
      'fr': 'Sur la mer de saphir',
      'ja': '飛べ！ ウェルリトへ ',
      'ko': '날아라! 웰리트를 향하여'
    },
    'offsetX': 15,
    'offsetY': -610,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  929: {
    'contentType': 16,
    'exVersion': 1,
    'name': {
      'cn': '天上福地云冠群岛',
      'de': 'Das Diadem - Erschließung',
      'en': 'The Diadem',
      'fr': 'Le Diadème',
      'ja': '雲海採集 ディアデム諸島',
      'ko': '디아뎀 제도'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 68
  },
  930: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '希瓦幻巧战',
      'de': 'Traumprüfung - Shiva',
      'en': 'The Akh Afah Amphitheatre (Unreal)',
      'fr': 'L\'Amphithéâtre d\'Akh Afah (irréel)',
      'ja': '幻シヴァ討滅戦',
      'ko': '환 시바 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  932: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '褪色的记忆',
      'de': 'Verblasste Erinnerungen',
      'en': 'Faded Memories',
      'fr': 'Souvenir périssable',
      'ja': '色あせた記憶',
      'ko': '빛바랜 기억'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 114
  },
  933: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '魔术工房玛托雅工作室',
      'de': 'Matoyas Atelier',
      'en': 'Matoya\'s Relict',
      'fr': 'L\'Atelier abandonné de Matoya',
      'ja': '魔術工房 マトーヤのアトリエ',
      'ko': '마토야의 공방'
    },
    'offsetX': 0,
    'offsetY': -75,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  934: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '绿宝石神兵破坏作战',
      'de': 'Smaragdsturm - Entfesselung',
      'en': 'Castrum Marinum',
      'fr': 'Castrum Marinum',
      'ja': 'エメラルドウェポン破壊作戦',
      'ko': '에메랄드 웨폰 파괴작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  935: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '绿宝石神兵狂想作战',
      'de': 'Smaragdsturm - Trauma',
      'en': 'Castrum Marinum (Extreme)',
      'fr': 'Castrum Marinum (extrême)',
      'ja': '極エメラルドウェポン破壊作戦',
      'ko': '극 에메랄드 웨폰 파괴작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  936: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '女王古殿',
      'de': 'Delubrum Reginae',
      'en': 'Delubrum Reginae',
      'fr': 'Delubrum Reginae',
      'ja': 'グンヒルド・ディルーブラム',
      'ko': '군힐드 사원'
    },
    'offsetX': 0,
    'offsetY': -378,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  937: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '零式女王古殿',
      'de': 'Delubrum Reginae (episch)',
      'en': 'Delubrum Reginae (Savage)',
      'fr': 'Delubrum Reginae (sadique)',
      'ja': 'グンヒルド・ディルーブラム零式',
      'ko': '군힐드 사원(영웅)'
    },
    'offsetX': 0,
    'offsetY': -378,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  938: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '黄金平原帕戈尔赞草原',
      'de': 'Die Goldene Ebene von Paglth\'an',
      'en': 'Paglth\'an',
      'fr': 'La grande prairie de Paglth\'an',
      'ja': '黄金平原 パガルザン',
      'ko': '파글단'
    },
    'offsetX': 415,
    'offsetY': -110,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  940: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '九宫幻卡：官方锦标赛',
      'de': 'Triple Triad: Manderville-Turnier',
      'en': 'Triple Triad Open Tournament',
      'fr': 'Tournoi officiel de Triple Triade',
      'ja': 'トリプルトライアド：オフィシャルトーナメント',
      'ko': '트리플 트라이어드: 공식 토너먼트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 800,
    'weatherRate': 0
  },
  941: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '九宫幻卡：锦标赛对局室',
      'de': 'Triple Triad: Privatturnier',
      'en': 'Triple Triad Invitational Parlor',
      'fr': 'Salle de tournoi libre de Triple Triade',
      'ja': 'トリプルトライアド：カスタムトーナメントルーム',
      'ko': '트리플 트라이어드: 친선 토너먼트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 800,
    'weatherRate': 0
  },
  942: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章1',
      'de': 'Edens Verheißung - Umbra',
      'en': 'Eden\'s Promise: Umbra',
      'fr': 'La Promesse d\'Éden - Nuée',
      'ja': '希望の園エデン：再生編1',
      'ko': '희망의 낙원 에덴: 재생편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  943: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章2',
      'de': 'Edens Verheißung - Litanei',
      'en': 'Eden\'s Promise: Litany',
      'fr': 'La Promesse d\'Éden - Litanie',
      'ja': '希望の園エデン：再生編2',
      'ko': '희망의 낙원 에덴: 재생편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  944: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章3',
      'de': 'Edens Verheißung - Anamorphose',
      'en': 'Eden\'s Promise: Anamorphosis',
      'fr': 'La Promesse d\'Éden - Anamorphose',
      'ja': '希望の園エデン：再生編3',
      'ko': '희망의 낙원 에덴: 재생편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  945: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章4',
      'de': 'Edens Verheißung - Ewigkeit',
      'en': 'Eden\'s Promise: Eternity',
      'fr': 'La Promesse d\'Éden - Éternité',
      'ja': '希望の園エデン：再生編4',
      'ko': '희망의 낙원 에덴: 재생편 4'
    },
    'offsetX': -71,
    'offsetY': 23,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  946: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章1',
      'de': 'Edens Verheißung - Umbra (episch)',
      'en': 'Eden\'s Promise: Umbra (Savage)',
      'fr': 'La Promesse d\'Éden - Nuée (sadique)',
      'ja': '希望の園エデン零式：再生編1',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  947: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章2',
      'de': 'Edens Verheißung - Litanei (episch)',
      'en': 'Eden\'s Promise: Litany (Savage)',
      'fr': 'La Promesse d\'Éden - Litanie (sadique)',
      'ja': '希望の園エデン零式：再生編2',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  948: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章3',
      'de': 'Edens Verheißung - Anamorphose (episch)',
      'en': 'Eden\'s Promise: Anamorphosis (Savage)',
      'fr': 'La Promesse d\'Éden - Anamorphose (sadique)',
      'ja': '希望の園エデン零式：再生編3',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  949: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章4',
      'de': 'Edens Verheißung - Ewigkeit (episch)',
      'en': 'Eden\'s Promise: Eternity (Savage)',
      'fr': 'La Promesse d\'Éden - Éternité (sadique)',
      'ja': '希望の園エデン零式：再生編4',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 75,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  950: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '钻石神兵捕获作战',
      'de': 'Diamantblitz - Entfesselung',
      'en': 'The Cloud Deck',
      'fr': 'Le Tillac des Cirrus',
      'ja': 'ダイヤウェポン捕獲作戦',
      'ko': '다이아몬드 웨폰 포획작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  951: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '钻石神兵狂想作战',
      'de': 'Diamantblitz - Trauma',
      'en': 'The Cloud Deck (Extreme)',
      'fr': 'Le Tillac des Cirrus (extrême)',
      'ja': '極ダイヤウェポン捕獲作戦',
      'ko': '극 다이아몬드 웨폰 포획작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  952: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '异形楼阁佐特塔',
      'de': 'Der Turm von Zot',
      'en': 'The Tower of Zot',
      'fr': 'La tour de Zott',
      'ja': '異形楼閣 ゾットの塔',
      'ko': '조트 탑'
    },
    'offsetX': -50,
    'offsetY': -50,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  953: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '泰坦幻巧战',
      'de': 'Traumprüfung - Titan',
      'en': 'The Navel (Unreal)',
      'fr': 'Le Nombril (irréel)',
      'ja': '幻タイタン討滅戦',
      'ko': '환 타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  954: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '威尔布兰德扬帆起航',
      'de': 'Gute Winde für Vylbrand',
      'en': 'The Great Ship Vylbrand',
      'fr': 'Un navire nommé Vylbrand',
      'ja': 'バイルブランドの船出',
      'ko': '바일브랜드 출항'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  955: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '神佑女王',
      'de': 'Hinab in die Ruinen',
      'en': 'Fit for a Queen',
      'fr': 'Que les Dieux gardent la Reine',
      'ja': 'ゴッド・セイブ・ザ・クイーン',
      'ko': '갓 세이브 더 퀸'
    },
    'offsetX': 0,
    'offsetY': -750,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  956: {
    'exVersion': 4,
    'name': {
      'cn': '迷津',
      'de': 'Labyrinthos',
      'en': 'Labyrinthos',
      'fr': 'Le Labyrinthos',
      'ja': 'ラヴィリンソス',
      'ko': '라비린토스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 131
  },
  957: {
    'exVersion': 4,
    'name': {
      'cn': '萨维奈岛',
      'de': 'Thavnair',
      'en': 'Thavnair',
      'fr': 'Thavnair',
      'ja': 'サベネア島',
      'ko': '사베네어 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 132
  },
  958: {
    'exVersion': 4,
    'name': {
      'cn': '加雷马',
      'de': 'Garlemald',
      'en': 'Garlemald',
      'fr': 'Garlemald',
      'ja': 'ガレマルド',
      'ko': '갈레말드'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 133
  },
  959: {
    'exVersion': 4,
    'name': {
      'cn': '叹息海',
      'de': 'Mare Lamentorum',
      'en': 'Mare Lamentorum',
      'fr': 'Mare Lamentorum',
      'ja': '嘆きの海',
      'ko': '비탄의 바다'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 135
  },
  960: {
    'exVersion': 4,
    'name': {
      'cn': '天外天垓',
      'de': 'Ultima Thule',
      'en': 'Ultima Thule',
      'fr': 'Ultima Thulé',
      'ja': 'ウルティマ・トゥーレ',
      'ko': '울티마 툴레'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 136
  },
  961: {
    'exVersion': 4,
    'name': {
      'cn': '厄尔庇斯',
      'de': 'Elpis',
      'en': 'Elpis',
      'fr': 'Elpis',
      'ja': 'エルピス',
      'ko': '엘피스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 134
  },
  962: {
    'exVersion': 4,
    'name': {
      'cn': '旧萨雷安',
      'de': 'Alt-Sharlayan',
      'en': 'Old Sharlayan',
      'fr': 'Vieille Sharlayan',
      'ja': 'オールド・シャーレアン',
      'ko': '올드 샬레이안'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 137
  },
  963: {
    'exVersion': 4,
    'name': {
      'cn': '拉札罕',
      'de': 'Radz-at-Han',
      'en': 'Radz-at-Han',
      'fr': 'Radz-at-Han',
      'ja': 'ラザハン',
      'ko': '라자한'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 138
  },
  966: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '希望之炮台：“塔”',
      'de': 'Der Turm, Paradigmenbrecher',
      'en': 'The Tower at Paradigm\'s Breach',
      'fr': 'La tour de la Contingence',
      'ja': '希望ノ砲台：「塔」',
      'ko': '희망의 포대: \'탑\''
    },
    'offsetX': 808,
    'offsetY': -772,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  968: {
    'contentType': 28,
    'exVersion': 4,
    'name': {
      'cn': '幻想龙诗绝境战',
      'de': 'Drachenkrieg (fatal)',
      'en': 'Dragonsong\'s Reprise (Ultimate)',
      'fr': 'La Guerre du chant des dragons (fatal)',
      'ja': '絶竜詩戦争',
      'ko': '절 용시전쟁'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  969: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '魔导神门巴别塔',
      'de': 'Der Turm von Babil',
      'en': 'The Tower of Babil',
      'fr': 'La tour de Babil',
      'ja': '魔導神門 バブイルの塔',
      'ko': '바브일 탑'
    },
    'offsetX': 270,
    'offsetY': -300,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  970: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '末日树海万相森国',
      'de': 'Vanaspati',
      'en': 'Vanaspati',
      'fr': 'Vanaspati',
      'ja': '終末樹海 ヴァナスパティ',
      'ko': '바나스파티'
    },
    'offsetX': 280,
    'offsetY': 8,
    'sizeFactor': 200,
    'weatherRate': 141
  },
  972: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '利维亚桑幻巧战',
      'de': 'Traumprüfung - Leviathan',
      'en': 'The <Emphasis>Whorleater</Emphasis> (Unreal)',
      'fr': 'Le Briseur de marées (irréel)',
      'ja': '幻リヴァイアサン討滅戦',
      'ko': '환 리바이어선 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  973: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '最终幻想末世终迹',
      'de': 'Das Sternengrab',
      'en': 'The Dead Ends',
      'fr': 'L\'Issue aux Impasses',
      'ja': '最終幻想 レムナント',
      'ko': '잔해별'
    },
    'offsetX': -310,
    'offsetY': 15,
    'sizeFactor': 200,
    'weatherRate': 144
  },
  974: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '创造环境极北造物院',
      'de': 'Ktisis Hyperboreia',
      'en': 'Ktisis Hyperboreia',
      'fr': 'L\'Hyperborée',
      'ja': '創造環境 ヒュペルボレア造物院',
      'ko': '휘페르보레아 조물원'
    },
    'offsetX': 40,
    'offsetY': -150,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  975: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '扎杜诺尔高原',
      'de': 'Zadnor-Hochebene',
      'en': 'Zadnor',
      'fr': 'Hauts plateaux de Zadnor',
      'ja': 'ザトゥノル高原',
      'ko': '자트노르 고원'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 130
  },
  976: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '乐园都市笑笑镇',
      'de': 'Smileton',
      'en': 'Smileton',
      'fr': 'Risette-sur-lune',
      'ja': '楽園都市 スマイルトン',
      'ko': '스마일턴'
    },
    'offsetX': -22,
    'offsetY': -42,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  977: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '死斗至黎明',
      'de': 'Kampf im Morgengrauen',
      'en': 'Death Unto Dawn',
      'fr': 'Aube meurtrière',
      'ja': '黎明の死闘',
      'ko': '여명의 사투'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 114
  },
  978: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '星海深幽寻因星晶镜',
      'de': 'Das Aitiaskop',
      'en': 'The Aitiascope',
      'fr': 'Le Prisme de l\'Aitia',
      'ja': '星海潜航 アイティオン星晶鏡',
      'ko': '아이티온 별현미경'
    },
    'offsetX': 8,
    'offsetY': -501,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  986: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '电脑梦境斯提格玛四',
      'de': 'Stigma-Holometrie',
      'en': 'The Stigma Dreamscape',
      'fr': 'Rêve électrique de Stigma-4',
      'ja': '電脳夢想 スティグマ・フォー',
      'ko': '스티그마-4'
    },
    'offsetX': 144,
    'offsetY': -14,
    'sizeFactor': 200,
    'weatherRate': 140
  },
  992: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '佐迪亚克歼灭战',
      'de': 'Prophetie - Zodiark',
      'en': 'The Dark Inside',
      'fr': 'Le Cratère des Martyrs',
      'ja': 'ゾディアーク討滅戦',
      'ko': '조디아크 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  993: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '佐迪亚克暝暗歼灭战',
      'de': 'Eschatos - Zodiark',
      'en': 'The Minstrel\'s Ballad: Zodiark\'s Fall',
      'fr': 'Le Cratère des Martyrs (extrême)',
      'ja': '極ゾディアーク討滅戦',
      'ko': '극 조디아크 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  994: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '滑稽灵殿闹鬼盛宴',
      'de': 'Lustiges Bankett',
      'en': 'The Phantoms\' Feast',
      'fr': 'Le banquet cauchemardesque',
      'ja': '道化饗宴 ホーンテッドフィースト',
      'ko': '유령의 연회'
    },
    'offsetX': 20,
    'offsetY': 10,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  995: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '海德林歼灭战',
      'de': 'Prophetie - Hydaelyn',
      'en': 'The Mothercrystal',
      'fr': 'Le Cristal-mère',
      'ja': 'ハイデリン討滅戦',
      'ko': '하이델린 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  996: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '海德林晖光歼灭战',
      'de': 'Eschatos - Hydaelyn',
      'en': 'The Minstrel\'s Ballad: Hydaelyn\'s Call',
      'fr': 'Le Cristal-mère (extrême)',
      'ja': '極ハイデリン討滅戦',
      'ko': '극 하이델린 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  997: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '终结之战',
      'de': 'Prophetie - Endsängerin',
      'en': 'The Final Day',
      'fr': 'Le Répons final',
      'ja': '終焉の戦い',
      'ko': '종언의 결전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 116
  },
  998: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '终极之战',
      'de': 'Eschatos - Endsängerin',
      'en': 'The Minstrel\'s Ballad: Endsinger\'s Aria',
      'fr': 'Le Répons final (extrême)',
      'ja': '終極の戦い',
      'ko': '종극의 결전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 146
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);

/***/ }),

/***/ 102:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {


// EXTERNAL MODULE: ./resources/languages.ts
var languages = __webpack_require__(619);
// EXTERNAL MODULE: ./resources/netregexes.ts
var netregexes = __webpack_require__(622);
// EXTERNAL MODULE: ./resources/not_reached.ts
var not_reached = __webpack_require__(62);
// EXTERNAL MODULE: ./resources/util.ts
var util = __webpack_require__(509);
;// CONCATENATED MODULE: ./resources/party.ts

const emptyRoleToPartyNames = () => {
  return {
    tank: [],
    healer: [],
    dps: [],
    crafter: [],
    gatherer: [],
    none: []
  };
};
class PartyTracker {
  details = [];
  partyNames_ = [];
  partyIds_ = [];
  allianceNames_ = [];
  allianceIds_ = [];
  nameToRole_ = {};
  idToName_ = {};
  roleToPartyNames_ = emptyRoleToPartyNames();

  // Bind this to PartyChanged events.
  onPartyChanged(e) {
    this.reset();
    this.details = e.party;
    for (const p of e.party) {
      this.allianceIds_.push(p.id);
      this.allianceNames_.push(p.name);
      const jobName = util/* default.jobEnumToJob */.Z.jobEnumToJob(p.job);
      const role = util/* default.jobToRole */.Z.jobToRole(jobName);
      this.idToName_[p.id] = p.name;
      this.nameToRole_[p.name] = role;
      if (p.inParty) {
        this.partyIds_.push(p.id);
        this.partyNames_.push(p.name);
        this.roleToPartyNames_[role].push(p.name);
      }
    }
  }
  reset() {
    // original event data
    this.details = [];
    this.partyNames_ = [];
    this.partyIds_ = [];
    this.allianceNames_ = [];
    this.allianceIds_ = [];
    this.nameToRole_ = {};
    this.idToName_ = {};

    // role -> [names] but only for party
    this.roleToPartyNames_ = emptyRoleToPartyNames();
  }

  // returns an array of the names of players in your immediate party
  get partyNames() {
    return this.partyNames_;
  }
  get partyIds() {
    return this.partyIds_;
  }

  // returns an array of the names of players in your alliance
  get allianceNames() {
    return this.allianceNames_;
  }

  // returns an array of the names of tanks in your immediate party
  get tankNames() {
    return this.roleToPartyNames_['tank'];
  }

  // returns an array of the names of healers in your immediate party
  get healerNames() {
    return this.roleToPartyNames_['healer'];
  }

  // returns an array of the names of dps players in your immediate party
  get dpsNames() {
    return this.roleToPartyNames_['dps'];
  }

  // returns true if the named player in your alliance is a particular role
  isRole(name, role) {
    return this.nameToRole_[name] === role;
  }

  // returns true if the named player in your alliance is a tank
  isTank(name) {
    return this.isRole(name, 'tank');
  }

  // returns true if the named player in your alliance is a healer
  isHealer(name) {
    return this.isRole(name, 'healer');
  }

  // returns true if the named player in your alliance is a dps
  isDPS(name) {
    return this.isRole(name, 'dps');
  }

  // returns true if the named player is in your immediate party
  inParty(name) {
    return this.partyNames.includes(name);
  }

  // returns true if the named player is in your alliance
  inAlliance(name) {
    return this.allianceNames.includes(name);
  }

  // for a named player, returns the other tank in your immediate party
  // if named player is not a tank, or there's not exactly two tanks
  // in your immediate party, returns null.
  otherTank(name) {
    const names = this.tankNames;
    if (names.length !== 2) return;
    if (names[0] === name) return names[1];
    if (names[1] === name) return names[0];
  }

  // see: otherTank, but for healers.
  otherHealer(name) {
    const names = this.healerNames;
    if (names.length !== 2) return;
    if (names[0] === name) return names[1];
    if (names[1] === name) return names[0];
  }

  // returns the job name of the specified party member
  jobName(name) {
    const partyIndex = this.partyNames.indexOf(name);
    if (partyIndex < 0) return;
    const job = this.details[partyIndex]?.job;
    if (job === undefined) return;
    return util/* default.jobEnumToJob */.Z.jobEnumToJob(job);
  }
  nameFromId(id) {
    return this.idToName_[id];
  }
}
// EXTERNAL MODULE: ./resources/regexes.ts
var resources_regexes = __webpack_require__(402);
// EXTERNAL MODULE: ./resources/responses.ts
var responses = __webpack_require__(469);
;// CONCATENATED MODULE: ./ui/raidboss/common_replacement.ts
// TODO: maybe this should be structured identically to a timelineReplace section.

// The seal key is kind of a hack because we use it in a lot of different
// contexts and need to correctly grab the name of the zone that is sealed.
// These are some various lookbehinds for those different contexts:
// Regexes for a parsed ACT log line
const parsedLB = '00:0839::';
// Regexes for a network log line
const networkLB = '00\\|[^|]*\\|0839\\|\\|';
// Regex for a regex for a network log line.  <_<
const netRegexLB = '\\\\\\|0839\\\\\\|\\[\\^\\|\\]\\*\\\\\\|';
// A bare parameter (e.g. `X will be sealed off` via `netRegex: { line: 'X will be sealed off' },`)
const paramLB = '^';

// It's awkward to refer to these string keys, so name them as replaceSync[keys.sealKey].
const syncKeys = {
  // Seal is trying to match these types of lines, and is more complicated because it's
  // trying to also capture the area name:
  //   parsed log lines: 00:0839::Something will be sealed off
  //   network log lines: 00|timestamp|0839||Something will be sealed off
  //   NetRegexes: ^^00\|[^|]*\|0839\|[^|]*\|Something will be sealed off.*?\|
  seal: `(?<=${parsedLB}|${networkLB}|${netRegexLB}|${paramLB})([^|:]*) will be sealed off(?: in (?:[0-9]+ seconds)?)?`,
  unseal: 'is no longer sealed',
  engage: 'Engage!'
};
const textKeys = {
  // Match directions in replaceText
  // eg: `(N)`, `(SW)`, `(NE/NW)`, etc.
  E: '(?<= \\(|\\/)E(?=\\)|\\/)',
  N: '(?<= \\(|\\/)N(?=\\)|\\/)',
  S: '(?<= \\(|\\/)S(?=\\)|\\/)',
  W: '(?<= \\(|\\/)W(?=\\)|\\/)',
  NE: '(?<= \\(|\\/)NE(?=\\)|\\/)',
  NW: '(?<= \\(|\\/)NW(?=\\)|\\/)',
  SE: '(?<= \\(|\\/)SE(?=\\)|\\/)',
  SW: '(?<= \\(|\\/)SW(?=\\)|\\/)',
  // Match Roles in replaceText
  // eg: `(Tank)`, `(Healer)`, `(DPS)`, etc
  Tank: '(?<= \\(|\\/)Tanks?(?=\\)|\\/)',
  Healer: '(?<= \\(|\\/)Healers?(?=\\)|\\/)',
  DPS: '(?<= \\(|\\/)DPS(?=\\)|\\/)',
  // Match `--1--` style text.
  Number: '--(\\s*\\d+\\s*)--'
};
const commonReplacement = {
  replaceSync: {
    [syncKeys.seal]: {
      en: '$1 will be sealed off',
      de: 'Noch 15 Sekunden, bis sich (?:(?:der|die|das) )?(?:Zugang zu(?:[rm]| den)? )?$1 schließt',
      fr: 'Fermeture d(?:e|u|es) (?:l\'|la |les? )?$1 dans',
      ja: '$1の封鎖まであと',
      cn: '距$1被封锁还有',
      ko: '15초 후에 $1[이가] 봉쇄됩니다'
    },
    [syncKeys.unseal]: {
      en: 'is no longer sealed',
      de: 'öffnet sich (?:wieder|erneut)',
      fr: 'Ouverture ',
      ja: 'の封鎖が解かれた',
      cn: '的封锁解除了',
      ko: '의 봉쇄가 해제되었습니다'
    },
    [syncKeys.engage]: {
      en: 'Engage!',
      de: 'Start!',
      fr: 'À l\'attaque',
      ja: '戦闘開始！',
      cn: '战斗开始！',
      ko: '전투 시작!'
    }
  },
  replaceText: {
    '--adds spawn--': {
      de: '--Adds erscheinen--',
      fr: '--Apparition d\'adds--',
      ja: '--雑魚出現--',
      cn: '--小怪出现--',
      ko: '--쫄 소환--'
    },
    '--adds targetable--': {
      de: '--Adds anvisierbar--',
      fr: '--Adds ciblables--',
      ja: '--雑魚ターゲット可能--',
      cn: '--小怪可选中--',
      ko: '--쫄 타겟 가능--'
    },
    '--center--': {
      de: '--Mitte--',
      fr: '--Centre--',
      ja: '--センター--',
      cn: '--中央--',
      ko: '--중앙--'
    },
    '\\(center\\)': {
      de: '(Mitte)',
      fr: '(Centre)',
      ja: '(センター)',
      cn: '(中央)',
      ko: '(중앙)'
    },
    '--clones appear--': {
      de: '--Klone erscheinen--',
      fr: '--Apparition des clones--',
      ja: '--幻影出現--',
      cn: '--幻影出现--',
      ko: '--분신 소환--'
    },
    '--corner--': {
      de: '--Ecke--',
      fr: '--Coin--',
      ja: '--コーナー--',
      cn: '--角落--',
      ko: '--구석--'
    },
    '--dps burn--': {
      de: '--DPS burn--',
      fr: '--Burn dps--',
      ja: '--火力出せ--',
      cn: '--转火--',
      ko: '--딜 체크--'
    },
    '--east--': {
      de: '--Osten--',
      fr: '--Est--',
      ja: '--東--',
      cn: '--东--',
      ko: '--동쪽--'
    },
    '\\(east\\)': {
      de: '(Osten)',
      fr: '(Est)',
      ja: '(東)',
      cn: '(东)',
      ko: '(동쪽)'
    },
    'Enrage': {
      de: 'Finalangriff',
      fr: 'Enrage',
      ja: '時間切れ',
      cn: '狂暴',
      ko: '전멸기'
    },
    '--frozen--': {
      de: '--eingefroren--',
      fr: '--Gelé--',
      ja: '--凍結--',
      cn: '--冻结--',
      ko: '--빙결--'
    },
    '--in--': {
      de: '--Rein--',
      fr: '--Intérieur--',
      ja: '--中--',
      cn: '--内--',
      ko: '--안--'
    },
    '\\(In\\)': {
      de: '(Rein)',
      fr: '(Intérieur)',
      ja: '(中)',
      cn: '(内)',
      ko: '(안)'
    },
    '\\(inner\\)': {
      de: '(innen)',
      fr: '(intérieur)',
      ja: '(中)',
      cn: '(内)',
      ko: '(안)'
    },
    '--jump--': {
      de: '--Sprung--',
      fr: '--Saut--',
      ja: '--ジャンプ--',
      cn: '--跳--',
      ko: '--점프--'
    },
    '--knockback--': {
      de: '--Rückstoß--',
      fr: '--Poussée--',
      ja: '--ノックバック--',
      cn: '--击退--',
      ko: '--넉백--'
    },
    '--middle--': {
      de: '--Mitte--',
      fr: '--Milieu--',
      ja: '--中央--',
      cn: '--中间--',
      ko: '--중앙--'
    },
    '\\(middle\\)': {
      de: '(Mitte)',
      fr: '(Milieu)',
      ja: '(中央)',
      cn: '(中间)',
      ko: '(중앙)'
    },
    '--north--': {
      de: '--Norden--',
      fr: '--Nord--',
      ja: '--北--',
      cn: '--北--',
      ko: '--북쪽--'
    },
    '\\(north\\)': {
      de: '(Norden)',
      fr: '(Nord)',
      ja: '(北)',
      cn: '(北)',
      ko: '(북쪽)'
    },
    '--northeast--': {
      de: '--Nordosten--',
      fr: '--Nord-Est--',
      ja: '--北東--',
      cn: '--东北--',
      ko: '--북동--'
    },
    '--northwest--': {
      de: '--Nordwesten--',
      fr: '--Nord-Ouest--',
      ja: '--北西--',
      cn: '--西北--',
      ko: '--북서--'
    },
    '--out--': {
      de: '--Raus--',
      fr: '--Extérieur--',
      ja: '--外--',
      cn: '--外--',
      ko: '--밖--'
    },
    '\\(Out\\)': {
      de: '(Raus)',
      fr: '(Extérieur)',
      ja: '(外)',
      cn: '(外)',
      ko: '(밖)'
    },
    '\\(outer\\)': {
      de: '(außen)',
      fr: '(extérieur)',
      ja: '(外)',
      cn: '(外)',
      ko: '(밖)'
    },
    '\\(outside\\)': {
      de: '(Draußen)',
      fr: '(À l\'extérieur)',
      ja: '(外)',
      cn: '(外面)',
      ko: '(바깥)'
    },
    '--rotate--': {
      de: '--rotieren--',
      fr: '--rotation--',
      ja: '--回転--',
      cn: '--旋转--',
      ko: '--회전--'
    },
    '--south--': {
      de: '--Süden--',
      fr: '--Sud--',
      ja: '--南--',
      cn: '--南--',
      ko: '--남쪽--'
    },
    '\\(south\\)': {
      de: '(Süden)',
      fr: '(Sud)',
      ja: '(南)',
      cn: '(南)',
      ko: '(남쪽)'
    },
    '--southeast--': {
      de: '--Südosten--',
      fr: '--Sud-Est--',
      ja: '--南東--',
      cn: '--东南--',
      ko: '--남동--'
    },
    '--southwest--': {
      de: '--Südwesten--',
      fr: '--Sud-Ouest--',
      ja: '--南西--',
      cn: '--西南--',
      ko: '--남서--'
    },
    '--split--': {
      de: '--teilen--',
      fr: '--division--',
      ja: '--分裂--',
      cn: '--分裂--',
      ko: '--분열--'
    },
    '--stun--': {
      de: '--Betäubung--',
      fr: '--Étourdissement--',
      ja: '--スタン--',
      cn: '--击晕--',
      ko: '--기절--'
    },
    '--sync--': {
      de: '--synchronisation--',
      fr: '--synchronisation--',
      ja: '--シンク--',
      cn: '--同步化--',
      ko: '--동기화--'
    },
    '--([0-9]+x )?targetable--': {
      de: '--$1anvisierbar--',
      fr: '--$1ciblable--',
      ja: '--$1ターゲット可能--',
      cn: '--$1可选中--',
      ko: '--$1타겟 가능--'
    },
    '--teleport--': {
      de: '--teleportation--',
      fr: '--téléportation--',
      ja: '--テレポート--',
      cn: '--传送--',
      ko: '--순간 이동--'
    },
    '--untargetable--': {
      de: '--nich anvisierbar--',
      fr: '--non ciblable--',
      ja: '--ターゲット不可--',
      cn: '--无法选中--',
      ko: '--타겟 불가능--'
    },
    '--west--': {
      de: '--Westen--',
      fr: '--Ouest--',
      ja: '--西--',
      cn: '--西--',
      ko: '--서쪽--'
    },
    [textKeys.E]: {
      de: 'O',
      fr: 'E',
      ja: '東',
      cn: '东',
      ko: '동'
    },
    [textKeys.N]: {
      de: 'N',
      fr: 'N',
      ja: '北',
      cn: '北',
      ko: '북'
    },
    [textKeys.S]: {
      de: 'S',
      fr: 'S',
      ja: '南',
      cn: '南',
      ko: '남'
    },
    [textKeys.W]: {
      de: 'W',
      fr: 'O',
      ja: '西',
      cn: '西',
      ko: '서'
    },
    [textKeys.NE]: {
      de: 'NO',
      fr: 'NE',
      ja: '北東',
      cn: '东北',
      ko: '북동'
    },
    [textKeys.NW]: {
      de: 'NW',
      fr: 'NO',
      ja: '北西',
      cn: '西北',
      ko: '북서'
    },
    [textKeys.SE]: {
      de: 'SO',
      fr: 'SE',
      ja: '南東',
      cn: '东南',
      ko: '남동'
    },
    [textKeys.SW]: {
      de: 'SW',
      fr: 'SO',
      ja: '南西',
      cn: '西南',
      ko: '남서'
    },
    [textKeys.Tank]: {
      de: 'Tank',
      fr: 'Tank',
      ja: 'タンク',
      cn: '坦克',
      ko: '탱커'
    },
    [textKeys.Healer]: {
      de: 'Heiler',
      fr: 'Healer',
      ja: 'ヒーラー',
      cn: '治疗',
      ko: '힐러'
    },
    [textKeys.DPS]: {
      de: 'DPS',
      fr: 'DPS',
      ja: 'DPS',
      cn: 'DPS',
      ko: '딜러'
    },
    [textKeys.Number]: {
      de: '--$1--',
      fr: '--$1--',
      ja: '--$1--',
      cn: '--$1--',
      ko: '--$1--'
    }
  }
};

// Keys into commonReplacement objects that represent "partial" translations,
// in the sense that even if it applies, there still needs to be another
// translation for it to be complete.  These keys should be exactly the same
// as the keys from the commonReplacement block above.  These are used for
// timeline regexes only.
const partialCommonTimelineReplacementKeys = [
// Because the zone name needs to be translated here, this is partial.
syncKeys.seal,
// Directions
textKeys.E, textKeys.N, textKeys.S, textKeys.W, textKeys.NE, textKeys.NW, textKeys.SE, textKeys.SW,
// Roles
textKeys.Tank, textKeys.Healer, textKeys.DPS];

// Same as the timeline version above, but only for trigger regexes.
const partialCommonTriggerReplacementKeys = [
// Because the zone name needs to be translated here, this is partial.
syncKeys.seal];
;// CONCATENATED MODULE: ./resources/translations.ts




// Fill in LocaleRegex so that things like LocaleRegex.countdownStart.de is a valid regex.
const localeLines = {
  countdownStart: {
    en: 'Battle commencing in (?<time>\\y{Float}) seconds! \\((?<player>.*?)\\)',
    de: 'Noch (?<time>\\y{Float}) Sekunden bis Kampfbeginn! \\((?<player>.*?)\\)',
    fr: 'Début du combat dans (?<time>\\y{Float}) secondes[ ]?! \\((?<player>.*?)\\)',
    ja: '戦闘開始まで(?<time>\\y{Float})秒！ （(?<player>.*?)）',
    cn: '距离战斗开始还有(?<time>\\y{Float})秒！ （(?<player>.*?)）',
    ko: '전투 시작 (?<time>\\y{Float})초 전! \\((?<player>.*?)\\)'
  },
  countdownEngage: {
    en: 'Engage!',
    de: 'Start!',
    fr: 'À l\'attaque[ ]?!',
    ja: '戦闘開始！',
    cn: '战斗开始！',
    ko: '전투 시작!'
  },
  countdownCancel: {
    en: 'Countdown canceled by (?<player>\\y{Name})',
    de: '(?<player>\\y{Name}) hat den Countdown abgebrochen',
    fr: 'Le compte à rebours a été interrompu par (?<player>\\y{Name})[ ]?\\.',
    ja: '(?<player>\\y{Name})により、戦闘開始カウントがキャンセルされました。',
    cn: '(?<player>\\y{Name})取消了战斗开始倒计时。',
    ko: '(?<player>\\y{Name}) 님이 초읽기를 취소했습니다\\.'
  },
  areaSeal: {
    en: '(?<area>.*?) will be sealed off in (?<time>\\y{Float}) seconds!',
    de: 'Noch (?<time>\\y{Float}) Sekunden, bis sich (?<area>.*?) schließt',
    fr: 'Fermeture (?<area>.*?) dans (?<time>\\y{Float}) secondes[ ]?\\.',
    ja: '(?<area>.*?)の封鎖まであと(?<time>\\y{Float})秒',
    cn: '距(?<area>.*?)被封锁还有(?<time>\\y{Float})秒',
    ko: '(?<time>\\y{Float})초 후에 (?<area>.*?)(이|가) 봉쇄됩니다\\.'
  },
  areaUnseal: {
    en: '(?<area>.*?) is no longer sealed.',
    de: '(?<area>.*?) öffnet sich erneut.',
    fr: 'Ouverture (?<area>.*?)[ ]?!',
    ja: '(?<area>.*?)の封鎖が解かれた……',
    cn: '(?<area>.*?)的封锁解除了',
    ko: '(?<area>.*?)의 봉쇄가 해제되었습니다\\.'
  },
  // Recipe name always start with \ue0bb
  // HQ icon is \ue03c
  craftingStart: {
    en: 'You begin synthesizing (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
    de: 'Du hast begonnen, durch Synthese (?<count>(ein(e|es|em|er)?|\\d+) )?\ue0bb(?<recipe>.*) herzustellen\\.',
    fr: 'Vous commencez à fabriquer (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(×(?<count>\\d+))?の製作を開始した。',
    cn: '(?<player>\\y{Name})开始制作“\ue0bb(?<recipe>.*)”(×(?<count>\\d+))?。',
    ko: '\ue0bb(?<recipe>.*)(×(?<count>\\d+)개)? 제작을 시작합니다\\.'
  },
  trialCraftingStart: {
    en: 'You begin trial synthesis of \ue0bb(?<recipe>.*)\\.',
    de: 'Du hast mit der Testsynthese von \ue0bb(?<recipe>.*) begonnen\\.',
    fr: 'Vous commencez une synthèse d\'essai pour une? \ue0bb(?<recipe>.*)\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習を開始した。',
    cn: '(?<player>\\y{Name})开始练习制作\ue0bb(?<recipe>.*)。',
    ko: '\ue0bb(?<recipe>.*) 제작 연습을 시작합니다\\.'
  },
  craftingFinish: {
    en: 'You synthesize (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
    de: 'Du hast erfolgreich (?<count>(ein(e|es|em|er)?|\\d+) )?(?<recipe>.*)(\ue03c)? hergestellt\\.',
    fr: 'Vous fabriquez (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+))?を完成させた！',
    cn: '(?<player>\\y{Name})制作“\ue0bb(?<recipe>.*)(\ue03c)?”(×(?<count>\\d+))?成功！',
    ko: '(?<player>\\y{Name}) 님이 \ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+)개)?(을|를) 완성했습니다!'
  },
  trialCraftingFinish: {
    en: 'Your trial synthesis of \ue0bb(?<recipe>.*) proved a success!',
    de: 'Die Testsynthese von \ue0bb(?<recipe>.*) war erfolgreich!',
    fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) a été couronnée de succès!',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に成功した！',
    cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)成功了！',
    ko: '\ue0bb(?<recipe>.*) 제작 연습에 성공했습니다!'
  },
  craftingFail: {
    en: 'Your synthesis fails!',
    de: 'Deine Synthese ist fehlgeschlagen!',
    fr: 'La synthèse échoue\\.{3}',
    ja: '(?<player>\\y{Name})は製作に失敗した……',
    cn: '(?<player>\\y{Name})制作失败了……',
    ko: '제작에 실패했습니다……\\.'
  },
  trialCraftingFail: {
    en: 'Your trial synthesis of \ue0bb(?<recipe>.*) failed\\.{3}',
    de: 'Die Testsynthese von \ue0bb(?<recipe>.*) ist fehlgeschlagen\\.{3}',
    fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) s\'est soldée par un échec\\.{3}',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に失敗した……',
    cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)失败了……',
    ko: '\ue0bb(?<recipe>.*) 제작 연습에 실패했습니다……\\.'
  },
  craftingCancel: {
    en: 'You cancel the synthesis\\.',
    de: 'Du hast die Synthese abgebrochen\\.',
    fr: 'La synthèse est annulée\\.',
    ja: '(?<player>\\y{Name})は製作を中止した。',
    cn: '(?<player>\\y{Name})中止了制作作业。',
    ko: '제작을 중지했습니다\\.'
  },
  trialCraftingCancel: {
    en: 'You abandoned trial synthesis\\.',
    de: 'Testsynthese abgebrochen\\.',
    fr: 'Vous avez interrompu la synthèse d\'essai\\.',
    ja: '(?<player>\\y{Name})は製作練習を中止した。',
    cn: '(?<player>\\y{Name})停止了练习。',
    ko: '제작 연습을 중지했습니다\\.'
  }
};
class RegexSet {
  get localeRegex() {
    if (this.regexes) return this.regexes;
    this.regexes = this.buildLocaleRegexes(localeLines, s => resources_regexes/* default.gameLog */.Z.gameLog({
      line: `${s}.*?`
    }));
    return this.regexes;
  }
  get localeNetRegex() {
    if (this.netRegexes) return this.netRegexes;
    this.netRegexes = this.buildLocaleRegexes(localeLines, s => netregexes/* default.gameLog */.ZP.gameLog({
      line: `${s}[^|]*?`
    }));
    return this.netRegexes;
  }
  buildLocaleRegexes(locales, builder) {
    return Object.fromEntries(Object.entries(locales).map(([key, lines]) => [key, this.buildLocaleRegex(lines, builder)]));
  }
  buildLocaleRegex(lines, builder) {
    const regexEn = builder(lines.en);
    return {
      en: regexEn,
      de: lines.de !== undefined ? builder(lines.de) : regexEn,
      fr: lines.fr !== undefined ? builder(lines.fr) : regexEn,
      ja: lines.ja !== undefined ? builder(lines.ja) : regexEn,
      cn: lines.cn !== undefined ? builder(lines.cn) : regexEn,
      ko: lines.ko !== undefined ? builder(lines.ko) : regexEn
    };
  }
}
const regexSet = new RegexSet();
const LocaleRegex = regexSet.localeRegex;
const LocaleNetRegex = regexSet.localeNetRegex;

// Translate a trigger or timeline regex (replaceSync) or timeline text (replaceText),
// returning the text and whether or not it can be considered "translated".
// Note, this won't catch anything that needs multiple translations, but will catch
// anything from common translations that are partial (e.g. a seal regex needs
// a zone name to be considered a full translation.
const translateWithReplacements = (text, replaceKey, replaceLang, replacements) => {
  // Special cases for empty and "not empty".
  if (text === '' || text === '[^:]+' || text === '[^|]+') return {
    text: text,
    wasTranslated: true
  };

  // All regex replacements are always global.
  const isGlobal = replaceKey === 'replaceSync';
  let wasTranslated = false;
  for (const r of replacements ?? []) {
    if (r.locale && r.locale !== replaceLang) continue;
    const reps = r[replaceKey];
    if (!reps) continue;
    for (const [key, value] of Object.entries(reps)) {
      const regex = isGlobal ? resources_regexes/* default.parseGlobal */.Z.parseGlobal(key) : resources_regexes/* default.parse */.Z.parse(key);
      if (text.match(regex)) wasTranslated = true;
      text = text.replace(regex, value);
    }
  }

  // Common Replacements
  const replacement = commonReplacement[replaceKey];
  for (const [key, value] of Object.entries(replacement ?? {})) {
    const repl = value[replaceLang];
    if (repl === undefined) continue;
    const regex = isGlobal ? resources_regexes/* default.parseGlobal */.Z.parseGlobal(key) : resources_regexes/* default.parse */.Z.parse(key);
    const partialKeys = replaceKey === 'replaceSync' ? partialCommonTriggerReplacementKeys : partialCommonTimelineReplacementKeys;
    if (text.match(regex)) {
      // Consider any partial translations as "not found" (e.g. a seal
      // message that still needs the zone name to be translated to be
      // considered fully translated).
      let isPartial = false;
      for (const partialKey of partialKeys) {
        if (resources_regexes/* default.parseGlobal */.Z.parseGlobal(partialKey).test(key)) {
          isPartial = true;
          break;
        }
      }
      if (!isPartial) wasTranslated = true;
    }
    text = text.replace(regex, repl);
  }
  return {
    text,
    wasTranslated
  };
};

// Translates a timeline or trigger regex for a given language.
const translateRegex = (text, replaceLang, replacements) => {
  if (typeof text === 'string') return translateWithReplacements(text, 'replaceSync', replaceLang, replacements).text;
  return translateWithReplacements(text.source, 'replaceSync', replaceLang, replacements).text;
};

// Translates a timeline text for a given language.
const translateText = (text, replaceLang, replacements) => translateWithReplacements(text, 'replaceText', replaceLang, replacements).text;
const translateRegexBuildParam = (params, replaceLang, replacements) => {
  return translateRegexBuildParamAnon(params, replaceLang, replacements);
};
const translateRegexBuildParamAnon = (anonParams, replaceLang, replacements) => {
  let missingFields = undefined;
  let wasTranslated = true;

  // TODO: it's probably ok that this isn't a deep copy because we don't
  // modify string[] directly, but it probably should be anyway.
  const params = {
    ...anonParams
  };
  for (const key of netregexes/* keysThatRequireTranslation */._1) {
    const value = anonParams[key];
    if (typeof value === 'boolean' || value === undefined) continue;
    // TODO: ideally, it'd be nice to assign directly back to params[key] instead of
    // cheating and assigning back through anonParams.  The reason this is mostly
    // ok is that if params[key] is a string it only gets assigned a string,
    // and if it is a string[] it only gets assigned a string[], so the type can't
    // change.  It might be possible to assign to params[key] if we make
    // timestamp a string | string[]?
    if (typeof value === 'string') {
      const result = translateWithReplacements(value, 'replaceSync', replaceLang, replacements);
      params[key] = result.text;
      wasTranslated = wasTranslated && result.wasTranslated;
      if (!result.wasTranslated) (missingFields ??= []).push(key);
    } else {
      params[key] = value.map(x => {
        if (typeof x !== 'string') return x;
        const result = translateWithReplacements(x, 'replaceSync', replaceLang, replacements);
        wasTranslated = wasTranslated && result.wasTranslated;
        if (!result.wasTranslated) (missingFields ??= []).push(key);
        return result.text;
      });
    }
  }
  return {
    params,
    wasTranslated,
    missingFields
  };
};
// EXTERNAL MODULE: ./resources/user_config.ts
var user_config = __webpack_require__(456);
// EXTERNAL MODULE: ./ui/raidboss/data/raidboss_manifest.txt + 602 modules
var raidboss_manifest = __webpack_require__(987);
;// CONCATENATED MODULE: ./ui/raidboss/raidboss_options.ts


// This file defines the base options that raidboss expects to see.

// Backwards compat for this old style of overriding triggers.
// TODO: we should probably deprecate and remove this.
// These options are ones that are not auto-defined by raidboss_config.js.
const defaultRaidbossNonConfigOptions = {
  PlayerNicks: {},
  InfoSound: '../../resources/sounds/freesound/percussion_hit.webm',
  AlertSound: '../../resources/sounds/BigWigs/Alert.webm',
  AlarmSound: '../../resources/sounds/BigWigs/Alarm.webm',
  LongSound: '../../resources/sounds/BigWigs/Long.webm',
  PullSound: '../../resources/sounds/freesound/sonar.webm',
  AudioAllowed: true,
  DisabledTriggers: {},
  PerTriggerAutoConfig: {},
  PerTriggerSetAutoConfig: {},
  PerTriggerOptions: {},
  PerZoneTimelineConfig: {},
  TriggerSetConfig: {},
  Triggers: [],
  IsRemoteRaidboss: false,
  TransformTts: t => t
};

// TODO: figure out how to get this type from raidboss_config??
// These values are overwritten and are just here for typing.
const defaultRaidbossConfigOptions = {
  DefaultAlertOutput: 'textAndSound',
  AlertsLanguage: undefined,
  TimelineLanguage: undefined,
  TimelineEnabled: true,
  AlertsEnabled: true,
  ShowTimerBarsAtSeconds: 30,
  KeepExpiredTimerBarsForSeconds: 0.7,
  BarExpiresSoonSeconds: 6,
  MaxNumberOfTimerBars: 6,
  DisplayAlarmTextForSeconds: 3,
  DisplayAlertTextForSeconds: 3,
  DisplayInfoTextForSeconds: 3,
  AlarmSoundVolume: 1,
  AlertSoundVolume: 1,
  InfoSoundVolume: 1,
  LongSoundVolume: 1,
  PullSoundVolume: 1,
  RumbleEnabled: false,
  InfoRumbleDuration: 400,
  InfoRumbleWeak: 0.5,
  InfoRumbleStrong: 0,
  AlertRumbleDuration: 500,
  AlertRumbleWeak: 0,
  AlertRumbleStrong: 0.5,
  AlarmRumbleDuration: 750,
  AlarmRumbleWeak: 0.75,
  AlarmRumbleStrong: 0.75
};
// See user/raidboss-example.js for documentation.
const Options = {
  ...user_config/* default.getDefaultBaseOptions */.Z.getDefaultBaseOptions(),
  ...defaultRaidbossNonConfigOptions,
  ...defaultRaidbossConfigOptions
};
/* harmony default export */ const raidboss_options = (Options);
;// CONCATENATED MODULE: ./ui/raidboss/timeline_parser.ts




// This class reads the format of ACT Timeline plugin, described in
// docs/TimelineGuide.md
class TimelineParser {
  // A set of names which will not be notified about.
  ignores = {};
  // Sorted by event occurrence time.
  events = [];
  // Sorted by event occurrence time.
  texts = [];
  // Sorted by sync.start time.
  syncStarts = [];
  // Sorted by sync.end time.
  syncEnds = [];
  // Sorted by event occurrence time.
  forceJumps = [];
  // Sorted by line.
  errors = [];
  // Map of encountered label names to their time.
  labelToTime = {};
  // Map of encountered syncs to the label they are jumping to.
  labelToSync = {};
  constructor(text, replacements, triggers, styles, options, zoneId) {
    this.options = options ?? raidboss_options;
    this.perTriggerAutoConfig = this.options.PerTriggerAutoConfig;
    this.replacements = replacements;
    this.timelineConfig = typeof zoneId === 'number' ? this.options.PerZoneTimelineConfig[zoneId] ?? {} : {};
    for (const text of this.timelineConfig.Ignore ?? []) this.ignores[text] = true;
    let uniqueId = 0;
    for (const event of this.timelineConfig.Add ?? []) {
      this.events.push({
        id: `${++uniqueId}`,
        time: event.time,
        name: event.text,
        text: event.text,
        duration: event.duration,
        activeTime: 0,
        sortKey: 0
      });
    }
    this.parse(text, triggers, styles ?? [], uniqueId);
  }
  parse(text, triggers, styles, initialId) {
    let uniqueid = initialId;
    const texts = {};
    const regexes = {
      comment: /^\s*#/,
      commentLine: /#.*$/,
      durationCommand: /(?:[^#]*?\s)?(?<text>duration\s+(?<seconds>[0-9]+(?:\.[0-9]+)?))(\s.*)?$/,
      ignore: /^hideall\s+\"(?<id>[^"]+)\"(?:\s*#.*)?$/,
      jumpCommand: /(?:[^#]*?\s)?(?<text>(?<command>(?:force|)jump)\s+(?:"(?<label>\w*)"|(?<seconds>[0-9]+(?:\.[0-9]+)?)))(?:\s.*)?$/,
      label: /^(?<time>[0-9]+(?:\.[0-9]+)?)\s+(?<text>label\s+"(?<label>\w*)")\s*$/,
      line: /^(?<text>(?<time>[0-9]+(?:\.[0-9]+)?)\s+"(?<name>.*?)")(\s+(.*))?/,
      popupText: /^(?<type>info|alert|alarm)text\s+\"(?<id>[^"]+)\"\s+before\s+(?<beforeSeconds>-?[0-9]+(?:\.[0-9]+)?)(?:\s+\"(?<text>[^"]+)\")?$/,
      soundAlert: /^define\s+soundalert\s+"[^"]*"\s+"[^"]*"$/,
      speaker: /define speaker "[^"]*"(\s+"[^"]*")?\s+(-?[0-9]+(?:\.[0-9]+)?)\s+(-?[0-9]+(?:\.[0-9]+)?)/,
      syncCommand: /(?:[^#]*?\s)?(?<text>sync\s*\/(?<regex>.*)\/)(?<args>\s.*)?$/,
      tts: /^alertall\s+"(?<id>[^"]*)"\s+before\s+(?<beforeSeconds>-?[0-9]+(?:\.[0-9]+)?)\s+(?<command>sound|speak\s+"[^"]*")\s+"(?<text>[^"]*)"$/,
      windowCommand: /(?:[^#]*?\s)?(?<text>window\s+(?:(?<start>[0-9]+(?:\.[0-9]+)?),)?(?<end>[0-9]+(?:\.[0-9]+)?))(?:\s.*)?$/
    };

    // Make all regexes case insensitive, and parse any special \y{} groups.
    for (const trigger of triggers ?? []) {
      if (trigger.regex) trigger.regex = resources_regexes/* default.parse */.Z.parse(trigger.regex);
    }
    const lines = text.split('\n');
    let lineNumber = 0;
    for (let line of lines) {
      ++lineNumber;
      line = line.trim();
      // Drop comments and empty lines.
      if (!line || regexes.comment.test(line)) continue;
      const originalLine = line;
      let match = regexes.ignore.exec(line);
      if (match && match['groups']) {
        const ignore = match['groups'];
        if (ignore.id !== undefined) this.ignores[ignore.id] = true;
        continue;
      }
      match = regexes.tts.exec(line);
      if (match && match['groups']) {
        const tts = match['groups'];
        if (tts.id === undefined || tts.beforeSeconds === undefined || tts.command === undefined) throw new not_reached/* UnreachableCode */.$();
        // TODO: Support alert sounds?
        if (tts.command === 'sound') continue;
        const ttsItems = texts[tts.id] || [];
        texts[tts.id] = ttsItems;
        ttsItems.push({
          type: 'tts',
          secondsBefore: parseFloat(tts.beforeSeconds),
          text: tts.text ?? tts.id
        });
        continue;
      }
      match = regexes.soundAlert.exec(line);
      if (match) continue;
      match = regexes.speaker.exec(line);
      if (match) continue;
      match = regexes.popupText.exec(line);
      if (match && match['groups']) {
        const popupText = match['groups'];
        if (popupText.type === undefined || popupText.id === undefined || popupText.beforeSeconds === undefined) throw new not_reached/* UnreachableCode */.$();
        const popupTextItems = texts[popupText.id] || [];
        texts[popupText.id] = popupTextItems;
        const type = popupText.type;
        if (type !== 'info' && type !== 'alert' && type !== 'alarm') continue;
        popupTextItems.push({
          type: type,
          secondsBefore: parseFloat(popupText.beforeSeconds),
          text: popupText.text ?? popupText.id
        });
        continue;
      }
      match = regexes.label.exec(line);
      if (match && match['groups']) {
        const parsedLine = match['groups'];
        if (parsedLine.time === undefined || parsedLine.label === undefined) throw new not_reached/* UnreachableCode */.$();
        const seconds = parseFloat(parsedLine.time);
        const label = parsedLine.label;
        this.labelToTime[label] = seconds;
        continue;
      }
      match = regexes.line.exec(line);
      if (!(match && match['groups'])) {
        this.errors.push({
          lineNumber: lineNumber,
          line: originalLine,
          error: 'Invalid format'
        });
        continue;
      }
      const parsedLine = match['groups'];
      // Technically the name can be empty
      if (parsedLine.text === undefined || parsedLine.time === undefined || parsedLine.name === undefined) throw new not_reached/* UnreachableCode */.$();
      line = line.replace(parsedLine.text, '').trim();
      // There can be # in the ability name, but probably not in the regex.
      line = line.replace(regexes.commentLine, '').trim();
      const seconds = parseFloat(parsedLine.time);
      const e = {
        id: `${++uniqueid}`,
        time: seconds,
        // The original ability name in the timeline.  Used for hideall, infotext, etc.
        name: parsedLine.name,
        // The text to display.  Not used for any logic.
        text: this.GetReplacedText(parsedLine.name),
        activeTime: 0,
        lineNumber: lineNumber,
        sortKey: 0
      };
      if (line) {
        let commandMatch = regexes.durationCommand.exec(line);
        if (commandMatch && commandMatch['groups']) {
          const durationCommand = commandMatch['groups'];
          if (durationCommand.text === undefined || durationCommand.seconds === undefined) throw new not_reached/* UnreachableCode */.$();
          line = line.replace(durationCommand.text, '').trim();
          e.duration = parseFloat(durationCommand.seconds);
        }
        commandMatch = regexes.syncCommand.exec(line);
        if (commandMatch && commandMatch['groups']) {
          const syncCommand = commandMatch['groups'];
          if (syncCommand.text === undefined || syncCommand.regex === undefined) throw new not_reached/* UnreachableCode */.$();
          line = line.replace(syncCommand.text, '').trim();
          const sync = {
            id: uniqueid,
            origRegexStr: syncCommand.regex,
            regex: resources_regexes/* default.parse */.Z.parse(this.GetReplacedSync(syncCommand.regex)),
            start: seconds - 2.5,
            end: seconds + 2.5,
            time: seconds,
            lineNumber: lineNumber,
            event: e
          };
          e.sync = sync;
          if (syncCommand.args !== undefined) {
            let argMatch = regexes.windowCommand.exec(syncCommand.args);
            if (argMatch && argMatch['groups']) {
              const windowCommand = argMatch['groups'];
              if (windowCommand.text === undefined || windowCommand.end === undefined) throw new not_reached/* UnreachableCode */.$();
              line = line.replace(windowCommand.text, '').trim();
              if (windowCommand.start !== undefined) {
                sync.start = seconds - parseFloat(windowCommand.start);
                sync.end = seconds + parseFloat(windowCommand.end);
              } else {
                sync.start = seconds - parseFloat(windowCommand.end) / 2;
                sync.end = seconds + parseFloat(windowCommand.end) / 2;
              }
            }
            argMatch = regexes.jumpCommand.exec(syncCommand.args);
            if (argMatch && argMatch['groups']) {
              const jumpCommand = argMatch['groups'];
              if (jumpCommand.text === undefined) throw new not_reached/* UnreachableCode */.$();
              line = line.replace(jumpCommand.text, '').trim();
              if (jumpCommand.seconds !== undefined) sync.jump = parseFloat(jumpCommand.seconds);else if (jumpCommand.label !== undefined) (this.labelToSync[jumpCommand.label] ??= []).push(sync);else throw new not_reached/* UnreachableCode */.$();
              if (jumpCommand.command === 'forcejump') sync.jumpType = 'force';else sync.jumpType = 'normal';
            }
          }
          this.syncStarts.push(sync);
          this.syncEnds.push(sync);
          if (sync.jumpType === 'force') this.forceJumps.push(sync);
        }
      }
      // If there's text left that isn't a comment then we didn't parse that text so report it.
      if (line && !regexes.comment.exec(line)) {
        this.errors.push({
          lineNumber: lineNumber,
          line: originalLine,
          error: 'Extra text'
        });
      } else {
        this.events.push(e);
      }
    }

    // Validate that all timeline triggers match something.
    for (const trigger of triggers ?? []) {
      let found = false;
      for (const event of this.events) {
        if (trigger.regex && trigger.regex.test(event.name)) {
          found = true;
          break;
        }
      }
      if (!found) {
        const text = `No match for timeline trigger ${trigger.regex?.source ?? ''} in ${trigger.id ?? ''}`;
        this.errors.push({
          error: text
        });
        console.error(`*** ERROR: ${text}`);
      }
    }

    // Validate that all the jumps go to labels that exist.
    for (const [label, syncs] of Object.entries(this.labelToSync)) {
      const destination = this.labelToTime[label];
      if (destination === undefined) {
        const text = `No label named ${label} found to jump to`;
        for (const sync of syncs) {
          this.errors.push({
            error: text,
            lineNumber: sync.lineNumber
          });
        }
        continue;
      }
      for (const sync of syncs) sync.jump = destination;
    }
    for (const e of this.events) {
      for (const matchedTextEvent of texts[e.name] ?? []) {
        const type = matchedTextEvent.type;
        if (type !== 'info' && type !== 'alert' && type !== 'alarm') continue;
        this.texts.push({
          type: type,
          time: e.time - (matchedTextEvent.secondsBefore || 0),
          text: matchedTextEvent.text ?? ''
        });
      }

      // Rather than matching triggers at run time, pre-match all the triggers
      // against timeline text and insert them as text events to run.
      for (const trigger of triggers ?? []) {
        const m = trigger.regex?.exec(e.name);
        if (!m) continue;

        // TODO: beforeSeconds should support being a function.
        const autoConfig = trigger.id !== undefined && this.perTriggerAutoConfig[trigger.id] || {};
        const beforeSeconds = autoConfig['BeforeSeconds'] ?? trigger.beforeSeconds;

        // TODO: also put these before any forcejump as well; this will solve
        // having to care about this at runtime.
        // e.g. if the beforeSeconds would put the text prior to the jump destination
        this.texts.push({
          type: 'trigger',
          time: e.time - (beforeSeconds || 0),
          trigger: trigger,
          matches: m
        });
      }
      for (const style of styles ?? []) {
        if (!style.regex.test(e.name)) continue;
        e.style = style.style;
      }
    }

    // Sort by time, but when the time is the same, sort by file order.
    // Then assign a sortKey to each event so that we can maintain that order.
    this.events.sort((a, b) => {
      if (a.time === b.time) return parseInt(a.id) - parseInt(b.id);
      return a.time - b.time;
    });
    this.events.forEach((event, idx) => event.sortKey = idx);
    this.texts.sort((a, b) => {
      return a.time - b.time;
    });
    this.syncStarts.sort((a, b) => {
      return a.start - b.start;
    });
    this.syncEnds.sort((a, b) => {
      return a.end - b.end;
    });
    this.forceJumps.sort((a, b) => {
      return a.time - b.time;
    });
  }
  GetReplacedText(text) {
    // Anything in the timeline config takes precedence over timelineReplace sections in
    // the trigger file.  It is also a full replacement, vs the regex-style GetReplacedHelper.
    const rename = this.timelineConfig?.Rename?.[text];
    if (rename !== undefined) return rename;
    const replaceLang = this.options.TimelineLanguage ?? this.options.ParserLanguage ?? 'en';
    return translateText(text, replaceLang, this.replacements);
  }
  GetReplacedSync(sync) {
    const replaceLang = this.options.ParserLanguage ?? 'en';
    return translateRegex(sync, replaceLang, this.replacements);
  }
  GetMissingTranslationsToIgnore() {
    return ['--Reset--', '--sync--', 'Start', '^ ?21:', '^( ?257)? 101:', '^(\\(\\?\\<timestamp\\>\\^\\.\\{14\\}\\)) (1B|21|23):', '^(\\^\\.\\{14\\})? ?(1B|21|23):', '^::\\y{AbilityCode}:$', '^\\.\\*$', '^ 1\\[56\\]:\\[\\^:\\]\\*:\\[\\^:\\]\\*:', '^( ?260)? 104:'].map(x => resources_regexes/* default.parse */.Z.parse(x));
  }

  // Utility function.  This could be a function on TimelineParser, but it seems weird to
  // store all of the original timeline texts unnecessarily when only config/utilities need it.
  static Translate(timeline, timelineText, syncErrors, textErrors) {
    const lineToText = {};
    const lineToSync = {};
    for (const event of timeline.events) {
      if (!event.lineNumber) continue;
      lineToText[event.lineNumber] = event;
    }
    for (const event of timeline.syncStarts) lineToSync[event.lineNumber] = event;

    // Combine replaced lines with errors.
    const timelineLines = timelineText.split(/\n/);
    const translatedLines = [];
    timelineLines.forEach((timelineLine, idx) => {
      const lineNumber = idx + 1;
      let line = timelineLine.trim();
      const lineText = lineToText[lineNumber];
      if (lineText) line = line.replace(` "${lineText.name}"`, ` "${lineText.text}"`);
      const lineSync = lineToSync[lineNumber];
      if (lineSync) line = line.replace(`sync /${lineSync.origRegexStr}/`, `sync /${lineSync.regex.source}/`);
      if (syncErrors?.[lineNumber]) line += ' #MISSINGSYNC';
      if (textErrors?.[lineNumber]) line += ' #MISSINGTEXT';
      translatedLines.push(line);
    });
    return translatedLines;
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/raidboss_config.ts











const kOptionKeys = {
  output: 'Output',
  duration: 'Duration',
  beforeSeconds: 'BeforeSeconds',
  delayAdjust: 'DelayAdjust',
  outputStrings: 'OutputStrings',
  // folder for all trigger options
  triggers: 'triggers',
  // folder for all trigger set options
  triggerSets: 'triggerSets',
  // folder for options in trigger set config ui
  triggerSetConfig: 'TriggerSetConfig'
};
// No sound only option, because that's silly.
const kTriggerOptions = {
  default: {
    label: {
      en: '✔ Defaults',
      de: '✔ Standards',
      fr: '✔ Défauts',
      ja: '✔ 初期設定',
      cn: '✔ 默认设置',
      ko: '✔ 기본'
    }
  },
  textAndSound: {
    label: {
      en: '🆙🔊 Text and Sound',
      de: '🆙🔊 Text und Ton',
      fr: '🆙🔊 Texte et son',
      ja: '🆙🔊 テキストと音声',
      cn: '🆙🔊 文本显示与提示音',
      ko: '🆙🔊 텍스트와 소리'
    }
  },
  ttsAndText: {
    label: {
      en: '🆙💬 Text and TTS',
      de: '🆙💬 Text und TTS',
      fr: '🆙💬 Texte et TTS',
      ja: '🆙💬 テキストとTTS',
      cn: '🆙💬 文本显示与TTS',
      ko: '🆙💬 텍스트와 TTS'
    }
  },
  ttsOnly: {
    label: {
      en: '💬 TTS Only',
      de: '💬 Nur TTS',
      fr: '💬 TTS Seulement',
      ja: '💬 TTSのみ',
      cn: '💬 只使用TTS',
      ko: '💬 TTS만'
    }
  },
  textOnly: {
    label: {
      en: '🆙 Text Only',
      de: '🆙 Nur Text',
      fr: '🆙 Texte seulement',
      ja: '🆙 テキストのみ',
      cn: '🆙 只使用文本显示',
      ko: '🆙 텍스트만'
    }
  },
  disabled: {
    label: {
      en: '❌ Disabled',
      de: '❌ Deaktiviert',
      fr: '❌ Désactivé',
      ja: '❌ 無効',
      cn: '❌ 禁用',
      ko: '❌ 비활성화'
    }
  }
};
const triggerSoundOptions = kTriggerOptions;
const kDetailKeys = {
  'triggerRegex': {
    label: {
      en: 'regex',
      de: 'regex',
      fr: 'regex',
      ja: '正規表現',
      cn: '正则表达式',
      ko: '정규식'
    },
    cls: 'regex-text',
    debugOnly: true
  },
  'triggerNetRegex': {
    label: {
      en: 'netregex',
      de: 'netregex',
      fr: 'netregex',
      ja: 'ネット正規表現',
      cn: '网络日志正则表达式',
      ko: '정규표현식'
    },
    cls: 'regex-text',
    debugOnly: true
  },
  'timelineRegex': {
    label: {
      en: 'timeline',
      de: 'timeline',
      fr: 'timeline',
      ja: 'タイムライン',
      cn: '时间轴',
      ko: '타임라인'
    },
    cls: 'regex-text',
    debugOnly: true
  },
  'beforeSeconds': {
    label: {
      en: 'before (sec)',
      de: 'Vorher (Sekunden)',
      fr: 'avant (seconde)',
      ja: 'その前に (秒)',
      cn: '提前 (秒)',
      ko: '앞당김 (초)'
    },
    cls: 'before-seconds-text',
    generatedManually: true
  },
  'condition': {
    label: {
      en: 'condition',
      de: 'condition',
      fr: 'condition',
      ja: '条件',
      cn: '条件',
      ko: '조건'
    },
    cls: 'condition-text',
    debugOnly: true
  },
  'delayAdjust': {
    label: {
      // Note: delay adjusting is both dangerous (delays can be functional in terms of
      // needing to happen after/before a particular time to collect the state of the world)
      // as well as confusing (you can adjust some but not many things negatively as
      // delay can't go below zero). Therefore, this is a developer/debug mode only for
      // people who know what they're doing.
      en: 'DEBUG delay adjust (sec)',
      de: 'DEBUG Verzögerungseinstellung (sec)',
      cn: 'DEBUG 延时调整 (秒)',
      ko: '"디버그" 딜레이 조절 (초)'
    },
    cls: 'delay-adjust-text',
    generatedManually: true,
    debugOnly: true
  },
  'duration': {
    label: {
      en: 'duration (sec)',
      de: 'Dauer (Sekunden)',
      fr: 'Durée (secondes)',
      ja: '存続時間 (秒)',
      cn: '显示时长 (秒)',
      ko: '지속 시간 (초)'
    },
    cls: 'duration-text',
    generatedManually: true
  },
  'preRun': {
    label: {
      en: 'preRun',
      de: 'preRun',
      fr: 'preRun',
      ja: 'プレ実行',
      cn: '预运行',
      ko: '사전 실행'
    },
    cls: 'prerun-text',
    debugOnly: true
  },
  'alarmText': {
    label: {
      en: 'alarm',
      de: 'alarm',
      fr: 'alarme',
      ja: '警報',
      cn: '致命级',
      ko: '경고'
    },
    cls: 'alarm-text'
  },
  'alertText': {
    label: {
      en: 'alert',
      de: 'alert',
      fr: 'alerte',
      ja: '警告',
      cn: '严重级',
      ko: '주의'
    },
    cls: 'alert-text'
  },
  'infoText': {
    label: {
      en: 'info',
      de: 'info',
      fr: 'info',
      ja: '情報',
      cn: '一般级',
      ko: '안내'
    },
    cls: 'info-text'
  },
  'tts': {
    label: {
      en: 'tts',
      de: 'tts',
      fr: 'tts',
      ja: 'TTS',
      cn: 'TTS',
      ko: 'TTS'
    },
    cls: 'tts-text'
  },
  'sound': {
    label: {
      en: 'sound',
      de: 'sound',
      fr: 'son',
      ja: '音声',
      cn: '提示音',
      ko: '소리'
    },
    cls: 'sound-text'
  },
  'run': {
    label: {
      en: 'run',
      de: 'run',
      fr: 'run',
      ja: '実行',
      cn: '运行',
      ko: '실행'
    },
    cls: 'run-text',
    debugOnly: true
  }
};

// Ordered set of headers in the timeline edit table.
const kTimelineTableHeaders = {
  shouldDisplayText: {
    en: 'Show',
    de: 'Anzeigen',
    fr: 'Afficher',
    ja: '表示',
    cn: '显示',
    ko: '표시'
  },
  text: {
    en: 'Timeline Text',
    de: 'Timeline Text',
    fr: 'Texte de la timeline',
    ja: 'タイムラインテキスト',
    cn: '时间轴文本',
    ko: '타임라인 텍스트'
  },
  overrideText: {
    en: 'Rename',
    de: 'Umbenennen',
    fr: 'Renommer',
    ja: 'テキスト変更',
    cn: '修改文本',
    ko: '텍스트 변경'
  }
};
const detailKeys = kDetailKeys;
const kMiscTranslations = {
  // Shows up for un-set values.
  valueDefault: {
    en: '(default)',
    de: '(Standard)',
    fr: '(Défaut)',
    ja: '(初期値)',
    cn: '(默认值)',
    ko: '(기본값)'
  },
  // Shown when the UI can't decipher the output of a function.
  valueIsFunction: {
    en: '(function)',
    de: '(Funktion)',
    fr: '(Fonction)',
    ja: '(関数)',
    cn: '(函数)',
    ko: '(함수)'
  },
  // Warning label for triggers without ids or overridden triggers.
  warning: {
    en: '⚠️ warning',
    de: '⚠️ Warnung',
    fr: '⚠️ Attention',
    ja: '⚠️ 警告',
    cn: '⚠️ 警告',
    ko: '⚠️ 주의'
  },
  // Shows up for triggers without ids.
  missingId: {
    en: 'missing id field',
    de: 'Fehlendes ID Feld',
    fr: 'Champ ID manquant',
    ja: 'idがありません',
    cn: '缺少id属性',
    ko: 'ID 필드값 없음'
  },
  // Shows up for triggers that are overridden by other triggers.
  overriddenByFile: {
    en: 'overridden by "${file}"',
    de: 'Überschrieben durch "${file}"',
    fr: 'Écrasé(e) par "${file}"',
    ja: '"${file}"に上書きました',
    cn: '被"${file}"文件覆盖',
    ko: '"${file}" 파일에서 덮어씌움'
  },
  // Opens trigger file on Github.
  viewTriggerSource: {
    en: 'View Trigger Source',
    de: 'Zeige Trigger Quelle',
    fr: 'Afficher la source du Trigger',
    ja: 'トリガーのコードを表示',
    cn: '显示触发器源码',
    ko: '트리거 소스코드 보기'
  },
  // The header for the editing timeline section inside a trigger file.
  editTimeline: {
    en: 'Edit Timeline',
    de: 'Timeline bearbeiten',
    fr: 'Éditer la timeline',
    ja: 'タイムラインを編集',
    cn: '编辑时间轴',
    ko: '타임라인 편집'
  },
  // The header inside the Edit Timeline section on top of the reference timeline text.
  timelineListing: {
    en: 'Reference Text (uneditable)',
    de: 'Referenztext (nicht editierbar)',
    fr: 'Texte de référence (non éditable)',
    cn: '参考文本 (不可编辑)',
    ko: '원본 타임라인 (수정 불가능)'
  },
  // The header inside the Edit Timeline section on top of the add entries section.
  addCustomTimelineEntries: {
    en: 'Add Custom Timeline Entries',
    de: 'Eigene Timeline Einträge hinzufügen',
    fr: 'Ajouter une entrée de timeline personnalisée',
    cn: '添加自定义时间轴条目',
    ko: '사용자 지정 타임라인 항목 추가'
  },
  // The button text for the Edit Timeline add entries section.
  addMoreRows: {
    en: 'Add more rows',
    de: 'Mehr Reihen hinzufügen',
    fr: 'Ajouter une ligne',
    cn: '添加更多行',
    ko: '행 추가'
  },
  customEntryTime: {
    en: 'Time',
    de: 'Zeit',
    fr: 'Temps',
    cn: '时间',
    ko: '시간'
  },
  customEntryText: {
    en: 'Text',
    de: 'Text',
    fr: 'Texte',
    cn: '文本',
    ko: '텍스트'
  },
  customEntryDuration: {
    en: 'Duration (seconds)',
    de: 'Dauer (Sekunden)',
    fr: 'Durée (s)',
    cn: '显示时长 (秒)',
    ko: '지속시간 (초)'
  },
  customEntryRemove: {
    en: 'Remove',
    de: 'Entfernen',
    fr: 'Supprimer',
    cn: '移除',
    ko: '삭제'
  }
};
const validDurationOrUndefined = valEntry => {
  if (typeof valEntry !== 'string' && typeof valEntry !== 'number') return undefined;
  const val = parseFloat(valEntry.toString());
  if (!isNaN(val) && val >= 0) return val;
  return undefined;
};
const validDelayAdjustOrUndefined = valEntry => {
  if (typeof valEntry !== 'string' && typeof valEntry !== 'number') return undefined;
  const val = parseFloat(valEntry.toString());
  if (!isNaN(val)) return val;
  return undefined;
};
const canBeConfigured = trig => !trig.isMissingId && trig.overriddenByFile === undefined;
const addTriggerDetail = (container, labelText, detailText, detailCls) => {
  const label = document.createElement('div');
  label.innerText = labelText;
  label.classList.add('trigger-label');
  container.appendChild(label);
  const detail = document.createElement('div');
  detail.classList.add('trigger-detail');
  detail.innerText = detailText;
  container.appendChild(detail);
  if (detailCls) detail.classList.add(...detailCls);
};

// This is used both for top level Options and for PerTriggerAutoConfig settings.
// Unfortunately due to poor decisions in the past, PerTriggerOptions has different
// fields here.  This should be fixed.
const setOptionsFromOutputValue = (value, options) => {
  if (value === 'default') {
    // Nothing.
  } else if (value === 'textAndSound') {
    options.TextAlertsEnabled = true;
    options.SoundAlertsEnabled = true;
    options.SpokenAlertsEnabled = false;
  } else if (value === 'ttsAndText') {
    options.TextAlertsEnabled = true;
    options.SoundAlertsEnabled = true;
    options.SpokenAlertsEnabled = true;
  } else if (value === 'ttsOnly') {
    options.TextAlertsEnabled = false;
    options.SoundAlertsEnabled = true;
    options.SpokenAlertsEnabled = true;
  } else if (value === 'textOnly') {
    options.TextAlertsEnabled = true;
    options.SoundAlertsEnabled = false;
    options.SpokenAlertsEnabled = false;
  } else if (value === 'disabled') {
    options.TextAlertsEnabled = false;
    options.SoundAlertsEnabled = false;
    options.SpokenAlertsEnabled = false;
  } else {
    console.error(`unknown output type: ${value.toString()}`);
  }
};

// Helper for doing nothing during trigger eval, but still recording any
// calls to `output.responseOutputStrings = x;` via callback.
class DoNothingFuncProxy {
  constructor(outputStringsCallback) {
    return new Proxy(this, {
      set(_target, property, value) {
        if (property === 'responseOutputStrings') {
          // TODO: need some way of verifying that a value is an OutputStrings.
          outputStringsCallback(value);
          return true;
        }

        // Ignore other property setting here.
        return false;
      },
      get(_target, _name) {
        return () => {/* noop */};
      }
    });
  }
}
const makeLink = href => {
  return `<a href="${href}" target="_blank">${href}</a>`;
};
const langOrEn = lang => {
  return typeof lang === 'string' && (0,languages/* isLang */.jd)(lang) ? lang : 'en';
};
class RaidbossConfigurator {
  constructor(cactbotConfigurator) {
    this.base = cactbotConfigurator;

    // TODO: is it worth adding the complexity to reflect this change in triggers that use it?
    // This is probably where using something like vue or react would be easier.
    // For the moment, folks can just reload, for real.
    this.alertsLang = langOrEn(this.base.getOption('raidboss', 'AlertsLanguage', this.base.lang));
    this.timelineLang = langOrEn(this.base.getOption('raidboss', 'TimelineLanguage', this.base.lang));
  }
  buildUI(container, raidbossFiles, userOptions) {
    const fileMap = this.processRaidbossFiles(raidbossFiles, userOptions);
    const expansionDivs = {};
    for (const [key, info] of Object.entries(fileMap)) {
      // "expansion" here is technically section, which includes "general triggers"
      // and one section per user file.
      const expansion = info.section;

      // This isn't perfect, but skip trigger sets that are no-ops.
      const hasTriggers = Object.keys(info.triggers ?? []).length !== 0;
      const hasTimeline = info.triggerSet.timeline !== undefined;
      const hasTriggerSetConfig = (info.triggerSet.config ?? []).length > 0;
      if (!hasTriggers && !hasTimeline && !hasTriggerSetConfig) continue;
      let expansionDiv = expansionDivs[expansion];
      if (!expansionDiv) {
        const expansionContainer = document.createElement('div');
        expansionContainer.classList.add('trigger-expansion-container', 'collapsed');
        container.appendChild(expansionContainer);
        const expansionHeader = document.createElement('div');
        expansionHeader.classList.add('trigger-expansion-header');
        expansionHeader.onclick = () => {
          expansionContainer.classList.toggle('collapsed');
        };
        expansionHeader.innerText = expansion;
        expansionContainer.appendChild(expansionHeader);
        expansionDiv = expansionDivs[expansion] = expansionContainer;
      }
      const triggerContainer = document.createElement('div');
      triggerContainer.classList.add('trigger-file-container', 'collapsed');
      expansionDiv.appendChild(triggerContainer);
      const headerDiv = document.createElement('div');
      headerDiv.classList.add('trigger-file-header');
      headerDiv.onclick = () => {
        triggerContainer.classList.toggle('collapsed');
      };
      const parts = [info.title, info.type, info.prefix];
      for (const part of parts) {
        if (part === undefined) continue;
        const partDiv = document.createElement('div');
        partDiv.classList.add('trigger-file-header-part');
        // Use innerHTML here because of <Emphasis>Whorleater</Emphasis>.
        partDiv.innerHTML = part;
        headerDiv.appendChild(partDiv);
      }
      triggerContainer.appendChild(headerDiv);

      // TODO: print a warning if config exists without triggerset id??
      if (info.triggerSet.id !== undefined) {
        const triggerSetConfig = document.createElement('div');
        triggerSetConfig.classList.add('overlay-options');
        triggerContainer.appendChild(triggerSetConfig);
        const triggerSetAlertOutput = {
          ...defaultTriggerSetAlertOutput,
          id: kOptionKeys.output,
          default: this.base.getStringOption('raidboss', defaultAlertOutput.id, defaultAlertOutput.default.toString())
        };
        this.base.buildConfigEntry(userOptions, triggerSetConfig, triggerSetAlertOutput, 'raidboss', [kOptionKeys.triggerSets, info.triggerSet.id]);
        for (const opt of info.triggerSet.config ?? []) {
          if (!this.base.developerOptions && opt.debugOnly) continue;
          this.base.buildConfigEntry(userOptions, triggerSetConfig, opt, 'raidboss', [kOptionKeys.triggerSetConfig, info.triggerSet.id]);
        }
      }

      // Timeline editing is tied to a single, specific zoneId per file for now.
      // We could add more indirection (via fileKey?) and look up zoneId -> fileKey[]
      // and fileKey -> timeline edits if needed.
      if (info.triggerSet.timeline !== undefined && typeof info.zoneId === 'number') this.buildTimelineUIContainer(info.zoneId, info.triggerSet, triggerContainer, userOptions);
      const triggerOptions = document.createElement('div');
      triggerOptions.classList.add('trigger-file-options');
      triggerContainer.appendChild(triggerOptions);
      for (const [trigId, trig] of Object.entries(info.triggers ?? {})) {
        // Don't construct triggers that won't show anything.
        let hasOutputFunc = false;
        for (const func of responses/* triggerOutputFunctions */.ug) {
          if (func in trig) {
            hasOutputFunc = true;
            break;
          }
        }
        if (!hasOutputFunc && !this.base.developerOptions) continue;
        const triggerDiv = document.createElement('div');
        triggerDiv.classList.add('trigger');

        // Build the trigger label.
        const triggerId = document.createElement('div');
        triggerId.classList.add('trigger-id');
        triggerId.innerHTML = trig.isMissingId ? '(???)' : trigId;
        triggerId.classList.add('trigger-id');
        triggerDiv.appendChild(triggerId);

        // Build the trigger comment
        if (trig.comment) {
          const trigComment = trig.comment[this.base.lang] ?? trig.comment?.en ?? '';
          const triggerCommentDiv = document.createElement('div');
          triggerCommentDiv.innerHTML = trigComment;
          triggerCommentDiv.classList.add('comment');
          triggerDiv.appendChild(triggerCommentDiv);
        }
        triggerOptions.appendChild(triggerDiv);

        // Container for the right side ui (select boxes, all of the info).
        const triggerDetails = document.createElement('div');
        triggerDetails.classList.add('trigger-details');
        triggerOptions.appendChild(triggerDetails);
        if (canBeConfigured(trig)) triggerDetails.appendChild(this.buildTriggerOptions(trig, triggerDiv));
        if (trig.isMissingId) {
          addTriggerDetail(triggerDetails, this.base.translate(kMiscTranslations.warning), this.base.translate(kMiscTranslations.missingId));
        }
        if (trig.overriddenByFile !== undefined) {
          const baseText = this.base.translate(kMiscTranslations.overriddenByFile);
          const detailText = baseText.replace('${file}', trig.overriddenByFile);
          addTriggerDetail(triggerDetails, this.base.translate(kMiscTranslations.warning), detailText);
        }

        // Append some details about the trigger so it's more obvious what it is.
        for (const [detailStringKey, opt] of Object.entries(detailKeys)) {
          // Object.entries coerces to a string, but the detailKeys definition makes this true.
          const detailKey = detailStringKey;
          if (opt.generatedManually) continue;
          if (!this.base.developerOptions && opt.debugOnly) continue;
          const trigOutput = trig.configOutput?.[detailKey];
          const trigFunc = trig[detailKey];
          if (trigFunc === undefined || trigFunc === null) continue;
          const detailCls = [opt.cls];
          let detailText;
          if (trigOutput !== undefined) {
            detailText = trigOutput;
          } else if (typeof trigFunc === 'function') {
            detailText = this.base.translate(kMiscTranslations.valueIsFunction);
            detailCls.push('function-text');
          } else {
            detailText = trigFunc.toString();
          }
          addTriggerDetail(triggerDetails, this.base.translate(opt.label), detailText, detailCls);
        }
        if (!canBeConfigured(trig)) continue;

        // Add beforeSeconds manually for timeline triggers.
        if (trig.isTimelineTrigger) {
          const detailKey = 'beforeSeconds';
          const optionKey = kOptionKeys.beforeSeconds;
          const label = document.createElement('div');
          label.innerText = this.base.translate(kDetailKeys[detailKey].label);
          label.classList.add('trigger-label');
          triggerDetails.appendChild(label);
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-before-seconds');
          const input = document.createElement('input');
          div.appendChild(input);
          input.type = 'text';
          input.step = 'any';

          // Say "(default)" for more complicated things like functions.
          let defaultValue = this.base.translate(kMiscTranslations.valueDefault);
          if (trig.beforeSeconds === undefined) defaultValue = '0';else if (typeof trig.beforeSeconds === 'number') defaultValue = trig.beforeSeconds.toString();
          input.placeholder = defaultValue;
          input.value = this.base.getStringOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], '');
          const setFunc = () => {
            const val = validDurationOrUndefined(input.value) || '';
            this.base.setOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], val);
          };
          input.onchange = setFunc;
          input.oninput = setFunc;
          triggerDetails.appendChild(div);
        }

        // Add delay adjust manually, as this isn't a trigger field.
        if (this.base.developerOptions) {
          const detailKey = 'delayAdjust';
          const optionKey = kOptionKeys.delayAdjust;
          const label = document.createElement('div');
          label.innerText = this.base.translate(kDetailKeys[detailKey].label);
          label.classList.add('trigger-label');
          triggerDetails.appendChild(label);
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-delay-adjust');
          const input = document.createElement('input');
          div.appendChild(input);
          input.type = 'text';
          input.step = 'any';
          input.placeholder = `0`;
          input.value = this.base.getStringOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], '');
          const setFunc = () => {
            const val = validDelayAdjustOrUndefined(input.value) || '';
            this.base.setOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], val);
          };
          input.onchange = setFunc;
          input.oninput = setFunc;
          triggerDetails.appendChild(div);
        }

        // Add duration manually with an input to override.
        if (hasOutputFunc) {
          const detailKey = 'duration';
          const optionKey = kOptionKeys.duration;
          const label = document.createElement('div');
          label.innerText = this.base.translate(kDetailKeys[detailKey].label);
          label.classList.add('trigger-label');
          triggerDetails.appendChild(label);
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-duration');
          const input = document.createElement('input');
          div.appendChild(input);
          input.type = 'text';
          input.step = 'any';
          if (typeof trig.durationSeconds === 'number') input.placeholder = `${trig.durationSeconds}`;else input.placeholder = this.base.translate(kMiscTranslations.valueDefault);
          input.value = this.base.getStringOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], '');
          const setFunc = () => {
            const val = validDurationOrUndefined(input.value) || '';
            this.base.setOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], val);
          };
          input.onchange = setFunc;
          input.oninput = setFunc;
          triggerDetails.appendChild(div);
        }

        // Add output strings manually
        const outputStrings = trig.outputStrings || {};
        for (const [key, outputString] of Object.entries(outputStrings)) {
          const optionKey = kOptionKeys.outputStrings;
          const template = typeof outputString === 'string' ? outputString : this.base.translate(outputString);
          const label = document.createElement('div');
          label.innerText = key;
          label.classList.add('trigger-outputstring-label');
          triggerDetails.appendChild(label);
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-outputstring');
          const input = document.createElement('input');
          div.appendChild(input);
          input.type = 'text';
          input.placeholder = template;
          input.value = this.base.getStringOption('raidboss', [kOptionKeys.triggers, trigId, optionKey, key], '');
          const setFunc = () => this.base.setOption('raidboss', [kOptionKeys.triggers, trigId, optionKey, key], input.value);
          input.onchange = setFunc;
          input.oninput = setFunc;
          triggerDetails.appendChild(div);
        }
        const label = document.createElement('div');
        triggerDetails.appendChild(label);
        const path = key.split('-');
        const [p0, p1, p2] = path;
        if (p0 !== undefined && p1 !== undefined && p2 !== undefined) {
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-source');
          const baseUrl = 'https://github.com/quisquous/cactbot/blob/triggers';
          let urlFilepath;
          if (path.length === 3) {
            // 00-misc/general.js
            urlFilepath = `${p0}-${p1}/${[...path].slice(2).join('-')}`;
          } else {
            // 02-arr/raids/t1.js
            urlFilepath = `${p0}-${p1}/${p2}/${[...path].slice(3).join('-')}`;
          }
          const escapedTriggerId = trigId.replace(/'/g, '\\\'');
          const uriComponent = encodeURIComponent(`id: '${escapedTriggerId}'`).replace(/'/g, '%27');
          const urlString = `${baseUrl}/${urlFilepath}.js#:~:text=${uriComponent}`;
          div.innerHTML = `<a href="${urlString}" target="_blank">(${this.base.translate(kMiscTranslations.viewTriggerSource)})</a>`;
          triggerDetails.appendChild(div);
        }
      }
    }
  }

  // Build the top level timeline editing expandable container.
  buildTimelineUIContainer(zoneId, set, parent, options) {
    const container = document.createElement('div');
    container.classList.add('timeline-edit-container', 'collapsed');
    parent.appendChild(container);
    let hasEverBeenExpanded = false;
    const headerDiv = document.createElement('div');
    headerDiv.classList.add('timeline-edit-header');
    headerDiv.onclick = () => {
      container.classList.toggle('collapsed');
      // Build the rest of this UI on demand lazily.
      if (!hasEverBeenExpanded) {
        const text = this.timelineTextFromSet(set);
        const timeline = new TimelineParser(text, set.timelineReplace ?? [], [], [], options);
        this.buildTimelineListingUI(timeline, text, container);
        this.buildTimelineAddUI(zoneId, container);
        this.buildTimelineTextUI(zoneId, timeline, container);
      }
      hasEverBeenExpanded = true;
    };
    headerDiv.innerText = this.base.translate(kMiscTranslations.editTimeline);
    container.appendChild(headerDiv);
  }
  timelineTextFromSet(set) {
    let text = '';

    // Recursively turn the timeline array into a string.
    const addTimeline = obj => {
      if (obj === undefined) return;
      if (Array.isArray(obj)) {
        for (const objVal of obj) addTimeline(objVal);
      } else if (typeof obj === 'function') {
        // Hack, pass blank data in, as we don't have a real data here.
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        const blankData = {};
        try {
          addTimeline(obj(blankData));
        } catch (e) {
          // Do nothing if this fails.
          // Functions are pretty uncommon in built-in timelines.
          // If user functions do funky things, those extra lines will be skipped.
        }
      } else if (typeof obj === 'string') {
        text = `${text}\n${obj}`;
      }
    };
    addTimeline(set.timeline);
    return text;
  }
  buildTimelineListingUI(timeline, timelineText, parent) {
    const header = document.createElement('div');
    header.classList.add('timeline-listing-header');
    header.innerText = this.base.translate(kMiscTranslations.timelineListing);
    parent.appendChild(header);

    // Add timeline text itself
    const scroller = document.createElement('div');
    scroller.classList.add('timeline-scroller');
    parent.appendChild(scroller);
    const timelineContents = document.createElement('pre');
    scroller.classList.add('timeline-scroller-contents');
    scroller.appendChild(timelineContents);
    const translated = TimelineParser.Translate(timeline, timelineText);
    timelineContents.innerText = translated.join('\n');
  }
  buildTimelineAddUI(zoneId, parent) {
    const addId = ['timeline', zoneId.toString(), 'add'];
    const header = document.createElement('div');
    header.classList.add('timeline-add-header');
    header.innerText = this.base.translate(kMiscTranslations.addCustomTimelineEntries);
    parent.appendChild(header);
    const container = document.createElement('div');
    container.classList.add('timeline-add-container');
    parent.appendChild(container);
    const headerTime = document.createElement('div');
    headerTime.innerText = this.base.translate(kMiscTranslations.customEntryTime);
    container.appendChild(headerTime);
    const headerText = document.createElement('div');
    headerText.innerText = this.base.translate(kMiscTranslations.customEntryText);
    container.appendChild(headerText);
    const headerDuration = document.createElement('div');
    headerDuration.innerText = this.base.translate(kMiscTranslations.customEntryDuration);
    container.appendChild(headerDuration);

    // Spacer div in the grid for Remove, which needs no header.
    container.appendChild(document.createElement('div'));

    // Get the current SavedConfigEntry for these saved entries.
    // We will modify `rows` in place and then store it back as needed.
    const defaultRow = {
      time: '',
      text: ''
    };
    const defaultValue = [defaultRow];
    const rowsOrObj = this.base.getJsonOption('raidboss', addId, defaultValue);
    const rows = Array.isArray(rowsOrObj) ? rowsOrObj : defaultValue;
    const storeRows = () => this.base.setJsonOption('raidboss', addId, rows);
    const addRow = obj => {
      const setFunc = () => {
        obj.time = timeInput.value;
        obj.text = textInput.value;
        obj.duration = durationInput.value;
        storeRows();
      };
      const timeInput = document.createElement('input');
      timeInput.type = 'text';
      if (typeof obj.time === 'string') timeInput.value = obj.time;
      timeInput.classList.add('timeline-add-row-time');
      timeInput.onchange = setFunc;
      timeInput.oninput = setFunc;
      container.appendChild(timeInput);
      const textInput = document.createElement('input');
      textInput.type = 'text';
      if (typeof obj.text === 'string') textInput.value = obj.text;
      textInput.classList.add('timeline-add-row-text');
      textInput.onchange = setFunc;
      textInput.oninput = setFunc;
      container.appendChild(textInput);
      const durationInput = document.createElement('input');
      durationInput.type = 'text';
      if (typeof obj.duration === 'string') durationInput.value = obj.duration;
      durationInput.classList.add('timeline-add-row-duration');
      durationInput.onchange = setFunc;
      durationInput.oninput = setFunc;
      container.appendChild(durationInput);
      const remove = document.createElement('button');
      remove.classList.add('timeline-add-row-remove');
      remove.innerText = this.base.translate(kMiscTranslations.customEntryRemove);
      container.appendChild(remove);
      remove.addEventListener('click', () => {
        container.removeChild(timeInput);
        container.removeChild(textInput);
        container.removeChild(durationInput);
        container.removeChild(remove);

        // Update rows in place, as it has been captured by a closure above.
        const idx = rows.indexOf(obj);
        if (idx === -1) {
          console.error(`Failed to remove row`);
          return;
        }
        rows.splice(idx, 1);
        storeRows();
      });
    };
    const addMoreRows = document.createElement('button');
    addMoreRows.classList.add('timeline-add-button');
    addMoreRows.innerText = this.base.translate(kMiscTranslations.addMoreRows);
    addMoreRows.addEventListener('click', () => {
      // No need to call storeRows here.  Blank rows will only get saved
      // if somebody makes other changes.
      const obj = {
        ...defaultRow
      };
      rows.push(obj);
      addRow(obj);
    });
    parent.appendChild(addMoreRows);
    for (const row of rows) {
      if (typeof row !== 'object' || Array.isArray(row)) continue;
      addRow(row);
    }
  }
  buildTimelineTextUI(zoneId, timeline, parent) {
    const container = document.createElement('div');
    container.classList.add('timeline-text-container');
    parent.appendChild(container);
    for (const header of Object.values(kTimelineTableHeaders)) {
      const div = document.createElement('div');
      div.innerText = this.base.translate(header);
      container.appendChild(div);
    }
    const uniqEvents = {};
    for (const event of timeline.events) {
      if (event.name in uniqEvents) continue;
      if (event.name in timeline.ignores) continue;
      // name = original timeline text
      // text = replaced text in current language
      uniqEvents[event.name] = event.text;
    }
    const keys = Object.keys(uniqEvents).sort();
    for (const key of keys) {
      const event = uniqEvents[key];
      if (event === undefined) continue;
      const checkInput = document.createElement('input');
      checkInput.classList.add('timeline-text-enable');
      checkInput.type = 'checkbox';
      container.appendChild(checkInput);

      // Enable/disable here behaves identically to `hideall "key"`, where this text will
      // not be shown, but timeline triggers related to it will still fire.
      const enableId = ['timeline', zoneId.toString(), 'enable', key];
      const defaultValue = true;
      checkInput.checked = this.base.getBooleanOption('raidboss', enableId, defaultValue);
      checkInput.onchange = () => this.base.setOption('raidboss', enableId, checkInput.checked);
      const timelineText = document.createElement('div');
      timelineText.classList.add('timeline-text-text');
      timelineText.innerHTML = event;
      container.appendChild(timelineText);
      const textInput = document.createElement('input');
      textInput.type = 'text';
      textInput.classList.add('timeline-text-edit');
      textInput.placeholder = event;

      // Any changes are tied to the original timeline text (key), but the config ui will
      // display the current language's text with replacements (event) as the placeholder above.
      const textId = ['timeline', zoneId.toString(), 'globalReplace', key];
      textInput.value = this.base.getStringOption('raidboss', textId, '');
      const setFunc = () => this.base.setOption('raidboss', textId, textInput.value);
      textInput.onchange = setFunc;
      textInput.oninput = setFunc;
      container.appendChild(textInput);
    }
  }

  // This duplicates the raidboss function of the same name.
  valueOrFunction(f, data, matches, output) {
    const result = typeof f === 'function' ? f(data, matches, output) : f;
    if (result !== Object(result)) return result;
    if (typeof result !== 'object' || result === null) return result;
    if (result[this.alertsLang] !== undefined) return this.valueOrFunction(result[this.alertsLang], data, matches, output);
    if (result[this.timelineLang] !== undefined) return this.valueOrFunction(result[this.timelineLang], data, matches, output);
    // For partially localized results where this localization doesn't
    // exist, prefer English over nothing.
    return this.valueOrFunction(result['en'], data, matches, output);
  }
  processTrigger(trig, set) {
    // TODO: with some hackiness (e.g. regexes?) we could figure out which
    // output string came from which alert type (alarm, alert, info, tts).
    // See `makeOutput` comments for why this needs a type assertion to be an Output.
    const fakeOutputProxy = new DoNothingFuncProxy(outputStrings => {
      trig.outputStrings = trig.outputStrings || {};
      Object.assign(trig.outputStrings, outputStrings);
    });
    const baseFakeData = {
      me: '',
      job: 'NONE',
      role: 'none',
      party: new PartyTracker(),
      lang: this.base.lang,
      currentHP: 1000,
      options: this.base.configOptions,
      inCombat: true,
      triggerSetConfig: {},
      ShortName: x => x ?? '???',
      StopCombat: () => {/* noop */},
      ParseLocaleFloat: parseFloat,
      CanStun: () => false,
      CanSilence: () => false,
      CanSleep: () => false,
      CanCleanse: () => false,
      CanFeint: () => false,
      CanAddle: () => false,
      parserLang: this.base.lang,
      displayLang: this.base.lang
    };
    const partialFakeDataEntries = [{
      me: 'Tini Poutini',
      job: 'GNB',
      role: 'tank'
    }, {
      me: 'Potato Chippy',
      job: 'WHM',
      role: 'healer'
    }, {
      me: 'Tater Tot',
      job: 'BLM',
      role: 'dps'
    }, {
      me: 'Hash Brown',
      job: 'DRG',
      role: 'dps'
    }, {
      me: 'Aloo Gobi',
      job: 'BLU',
      role: 'dps'
    }];
    const fakeDataEntries = partialFakeDataEntries.map(x => {
      return Object.assign({}, x, baseFakeData);
    });
    const firstData = fakeDataEntries[0];
    if (!firstData) throw new not_reached/* UnreachableCode */.$();
    const kFakeMatches = {
      // TODO: really should convert all triggers to use regexes.js.
      // Mooooost triggers use matches[1] to be a name.
      1: firstData.me,
      sourceId: '41234567',
      source: 'Enemy',
      id: '1234',
      ability: 'Ability',
      targetId: '1234567',
      target: firstData.me,
      flags: '',
      x: '100',
      y: '100',
      z: '0',
      heading: '0',
      npcId: '',
      effect: 'Effect',
      duration: '30',
      code: '00',
      line: '',
      name: 'Name'
    };
    const output = {};
    const outputKeys = ['alarmText', 'alertText', 'infoText', 'tts', 'sound'];
    // Try to determine some sample output?
    // This could get much more complicated if we wanted it to.
    const evalTrigger = (trig, key, data) => {
      try {
        const result = this.valueOrFunction(trig[key], data, kFakeMatches, fakeOutputProxy);
        if (result === null || result === undefined) return false;

        // Super hack:
        const resultStr = result.toString();
        if (resultStr.includes('undefined') || resultStr.includes('NaN')) return false;
        output[key] = resultStr;
        return true;
      } catch (e) {
        // This is all totally bogus.  Many triggers assume fields on data
        // are properly defined when these calls happen, so will throw errors.
        // So just silently ignore.
        return false;
      }
    };

    // Handle 'response' first.
    if (trig.response) {
      const r = trig.response;
      for (const data of fakeDataEntries) {
        try {
          // Can't use ValueOrFunction here as r returns a non-localizable object.
          // FIXME: this hackily replicates some raidboss logic too.
          let response = r;
          while (typeof response === 'function') {
            // TODO: check if this has builtInResponseStr first.
            response = response(data, kFakeMatches, fakeOutputProxy);
          }
          if (!response) continue;
          if (!trig.outputStrings) {
            for (const key of outputKeys) evalTrigger(response, key, data);
          }
          break;
        } catch (e) {
          continue;
        }
      }
    }

    // Only evaluate fields if there are not outputStrings.
    // outputStrings will indicate more clearly what the trigger says.
    if (!trig.outputStrings) {
      for (const key of outputKeys) {
        if (!(key in trig)) continue;
        for (const data of fakeDataEntries) {
          if (evalTrigger(trig, key, data)) break;
        }
      }
    }
    trig.configOutput = output;

    // TODO: this shows the regexes in the display language.
    // Should we show them in the parser language instead?
    const lang = this.base.lang;
    const getRegex = () => {
      const regex = trig.regex;
      if (regex === undefined) return;
      return resources_regexes/* default.parse */.Z.parse(translateRegex(regex, lang, set.timelineReplace));
    };
    const getNetRegex = () => {
      const regex = trig.netRegex;
      if (regex === undefined) return;
      if (regex instanceof RegExp) return resources_regexes/* default.parse */.Z.parse(translateRegex(regex, lang, set.timelineReplace));
      if (trig.type === undefined) return;
      return resources_regexes/* default.parse */.Z.parse((0,netregexes/* buildNetRegexForTrigger */.BW)(trig.type, translateRegexBuildParam(regex, lang, set.timelineReplace).params));
    };
    if (trig.isTimelineTrigger) {
      trig.timelineRegex = getRegex();
    } else {
      trig.triggerRegex = getRegex();
      trig.triggerNetRegex = getNetRegex();
    }
    return trig;
  }
  processRaidbossFiles(files, userOptions) {
    // `files` is map of filename => triggerSet (for trigger files)
    // `map` is a sorted map of shortened zone key => { various fields, triggerSet }
    const triggerFiles = {};
    const timelineFiles = {};
    for (const [filename, triggerSetOrString] of Object.entries(files)) {
      if (typeof triggerSetOrString === 'string') timelineFiles[filename] = triggerSetOrString;else triggerFiles[filename] = triggerSetOrString;
    }
    const map = this.base.processFiles(triggerFiles, userOptions.Triggers);
    let triggerIdx = 0;

    // While walking through triggers, record any previous triggers with the same
    // id so that the ui can disable overriding information.
    const previousTriggerWithId = {};
    for (const item of Object.values(map)) {
      // TODO: maybe each trigger set needs a zone name, and we should
      // use that instead of the filename???
      const rawTriggers = {
        trigger: [],
        timeline: []
      };
      const triggerSet = item.triggerSet;
      if (triggerSet.triggers) rawTriggers.trigger.push(...triggerSet.triggers);
      if (triggerSet.timelineTriggers) rawTriggers.timeline.push(...triggerSet.timelineTriggers);
      if (!triggerSet.isUserTriggerSet && triggerSet.filename !== undefined) flattenTimeline(triggerSet, triggerSet.filename, timelineFiles);
      item.triggers = {};
      for (const [key, triggerArr] of Object.entries(rawTriggers)) {
        for (const baseTrig of triggerArr) {
          const trig = baseTrig;
          triggerIdx++;
          if (trig.id === undefined) {
            // Give triggers with no id some "unique" string so that they can
            // still be added to the set and show up in the ui.
            trig.id = `!!NoIdTrigger${triggerIdx}`;
            trig.isMissingId = true;
          }

          // Track if this trigger overrides any previous trigger.
          const previous = previousTriggerWithId[trig.id];
          if (previous) previous.overriddenByFile = triggerSet.filename;
          previousTriggerWithId[trig.id] = trig;
          trig.isTimelineTrigger = key === 'timeline';
          // Also, if a user has two of the same id in the same triggerSet (?!)
          // then only the second trigger will show up.
          item.triggers[trig.id] = this.processTrigger(trig, triggerSet);
        }
      }
    }
    return map;
  }
  buildTriggerOptions(trig, labelDiv) {
    // This shouldn't happen, as all triggers should be processed with a unique id.
    const trigId = trig.id;
    if (trigId === undefined) throw new not_reached/* UnreachableCode */.$();
    const optionKey = kOptionKeys.output;
    const div = document.createElement('div');
    div.classList.add('trigger-options');
    const updateLabel = input => {
      if (input.value === 'hidden' || input.value === 'disabled') labelDiv.classList.add('disabled');else labelDiv.classList.remove('disabled');
    };
    const input = document.createElement('select');
    div.appendChild(input);
    const selectValue = this.base.getOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], 'default');
    for (const [key, opt] of Object.entries(triggerSoundOptions)) {
      // Hide debug only options unless they are selected.
      // Otherwise, it will look weird to pick something like 'Disabled',
      // but then not show it when developer options are turned off.
      if (!this.base.developerOptions && opt.debugOnly && key !== selectValue) continue;
      const elem = document.createElement('option');
      elem.innerHTML = this.base.translate(opt.label);
      elem.value = key;
      elem.selected = key === selectValue;
      input.appendChild(elem);
      updateLabel(input);
      input.onchange = () => {
        updateLabel(input);
        let value = input.value;
        if (value.includes('default')) value = 'default';
        this.base.setOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], input.value);
      };
    }
    return div;
  }
}
const flattenTimeline = (set, filename, files) => {
  // Convert set.timelineFile to set.timeline.
  if (set.timelineFile === undefined) return;
  const lastIndex = Math.max(filename.lastIndexOf('/'), filename.lastIndexOf('\\'));
  // If lastIndex === -1, truncate name to the empty string.
  // if lastIndex > -1, truncate name after the final slash.
  const dir = filename.slice(0, Math.max(0, lastIndex + 1));
  const timelineFile = `${dir}${set.timelineFile}`;
  delete set.timelineFile;
  if (!(timelineFile in files)) {
    console.log(`ERROR: '${filename}' specifies non-existent timeline file '${timelineFile}'.`);
    return;
  }

  // set.timeline is processed recursively.
  set.timeline = [set.timeline, files[timelineFile]];
};

// Raidboss needs to do some extra processing of user files.
const userFileHandler = (name, files, baseOptions, basePath) => {
  // TODO: Rewrite user_config to be templated on option type so that this function knows
  // what type of options it is using.
  if (!baseOptions.Triggers) return;
  for (const baseTriggerSet of baseOptions.Triggers) {
    const set = baseTriggerSet;

    // Annotate triggers with where they came from.  Note, options is passed in repeatedly
    // as multiple sets of user files add triggers, so only process each file once.
    if (set.isUserTriggerSet) continue;

    // `filename` here is just cosmetic for better debug printing to make it more clear
    // where a trigger or an override is coming from.
    set.filename = `${basePath}${name}`;
    set.isUserTriggerSet = true;
    flattenTimeline(set, name, files);
  }
};
const processPerTriggerAutoConfig = (options, savedConfig) => {
  // raidboss will look up this.options.PerTriggerAutoConfig to find these values.
  const optionName = 'PerTriggerAutoConfig';
  const perTriggerAutoConfig = options[optionName] ??= {};
  if (typeof savedConfig !== 'object' || Array.isArray(savedConfig)) return;
  const triggers = savedConfig[kOptionKeys.triggers];
  if (typeof triggers !== 'object' || Array.isArray(triggers)) return;
  const outputObjs = {};
  const keys = Object.keys(kTriggerOptions);
  for (const key of keys) {
    const obj = outputObjs[key] = {};
    setOptionsFromOutputValue(key, obj);
  }
  for (const [id, entry] of Object.entries(triggers)) {
    if (typeof entry !== 'object' || Array.isArray(entry)) return;
    const autoConfig = {};
    const output = entry[kOptionKeys.output];
    if (typeof output === 'string') Object.assign(autoConfig, outputObjs[output]);
    const duration = validDurationOrUndefined(entry[kOptionKeys.duration]);
    if (duration) autoConfig[kOptionKeys.duration] = duration;
    const beforeSeconds = validDurationOrUndefined(entry[kOptionKeys.beforeSeconds]);
    if (beforeSeconds) autoConfig[kOptionKeys.beforeSeconds] = beforeSeconds;
    const delayAdjustSeconds = validDelayAdjustOrUndefined(entry[kOptionKeys.delayAdjust]);
    if (delayAdjustSeconds) autoConfig[kOptionKeys.delayAdjust] = delayAdjustSeconds;
    const outputStrings = entry[kOptionKeys.outputStrings];
    // Validate that the SavedConfigEntry is an an object with string values,
    // which is a subset of the OutputStrings type.
    if ((entry => {
      if (typeof entry !== 'object' || Array.isArray(entry)) return false;
      for (const value of Object.values(entry)) {
        if (typeof value !== 'string') return false;
      }
      return true;
    })(outputStrings)) autoConfig[kOptionKeys.outputStrings] = outputStrings;
    if (typeof output === 'string' || duration || outputStrings !== undefined) perTriggerAutoConfig[id] = autoConfig;
  }
};
const processPerTriggerSetAutoConfig = (options, savedConfig) => {
  // raidboss will look up this.options.PerTriggerSetAutoConfig to find these values.
  const optionName = 'PerTriggerSetAutoConfig';
  const perTriggerSetAutoConfig = options[optionName] ??= {};
  if (typeof savedConfig !== 'object' || Array.isArray(savedConfig)) return;
  const triggerSets = savedConfig[kOptionKeys.triggerSets];
  if (typeof triggerSets !== 'object' || Array.isArray(triggerSets)) return;
  const outputObjs = {};
  const keys = Object.keys(kTriggerOptions);
  for (const key of keys) {
    const obj = outputObjs[key] = {};
    setOptionsFromOutputValue(key, obj);
  }
  for (const [id, entry] of Object.entries(triggerSets)) {
    if (typeof entry !== 'object' || Array.isArray(entry)) return;
    const output = entry[kOptionKeys.output];
    if (typeof output === 'string') perTriggerSetAutoConfig[id] = {
      ...outputObjs[output]
    };
  }
};
const processPerZoneTimelineConfig = (options, savedConfig) => {
  const optionName = 'PerZoneTimelineConfig';
  // SavedConfig uses this key structure:
  // * 'timeline', zoneId (as string), 'enable', text, boolean
  // * 'timeline', zoneId (as string), 'globalReplace', text, string
  // ...and this function transforms it into a `PerZoneTimelineConfig`.

  const perZoneTimelineConfig = options[optionName] ??= {};
  if (typeof savedConfig !== 'object' || Array.isArray(savedConfig)) return;
  const timeline = savedConfig['timeline'];
  if (typeof timeline !== 'object' || Array.isArray(timeline)) return;
  for (const [zoneKey, zoneEntry] of Object.entries(timeline)) {
    const zoneId = parseInt(zoneKey);
    if (!zoneId) continue;
    const timelineConfig = perZoneTimelineConfig[zoneId] ??= {};
    if (typeof zoneEntry !== 'object' || Array.isArray(zoneEntry)) continue;
    const enableEntry = zoneEntry['enable'];
    const replaceEntry = zoneEntry['globalReplace'];
    const addEntry = zoneEntry['add'];
    if (typeof enableEntry === 'object' && !Array.isArray(enableEntry)) {
      for (const [key, value] of Object.entries(enableEntry)) {
        if (typeof value === 'boolean' && !value) (timelineConfig.Ignore ??= []).push(key);
      }
    }
    if (typeof replaceEntry === 'object' && !Array.isArray(replaceEntry)) {
      for (const [key, value] of Object.entries(replaceEntry)) {
        if (typeof value === 'string') (timelineConfig.Rename ??= {})[key] = value;
      }
    }
    if (addEntry !== undefined && typeof addEntry === 'object' && Array.isArray(addEntry)) {
      for (const row of addEntry) {
        if (typeof row !== 'object' || Array.isArray(row)) continue;
        const time = typeof row.time === 'string' ? parseFloat(row.time) : NaN;
        const text = typeof row.text === 'string' ? row.text : '';
        const durationOrNaN = typeof row.duration === 'string' ? parseFloat(row.duration) : NaN;
        const duration = isNaN(durationOrNaN) ? undefined : durationOrNaN;
        if (text.trim() === '' || isNaN(time)) continue;
        (timelineConfig.Add ??= []).push({
          time,
          text,
          duration
        });
      }
    }
  }
};
const processTriggerSetConfig = (options, savedConfig) => {
  // Note: this function is just for providing the raw values for TriggerSetConfig.
  // popuptext handles the loading of triggersets at runtime (maybe this should be merged?)
  // and so it has to do the work of using this info to set defaults, apply overrides, and
  // run setter functions via `processOptions`.
  const optionName = 'TriggerSetConfig';
  const outputTriggerSetConfig = options[optionName] ??= {};
  if (typeof savedConfig !== 'object' || Array.isArray(savedConfig)) return;

  // raidboss > TriggerSetConfig > [triggerSetId] > [key] > [leaf ConfigValue]
  const triggerSetConfig = savedConfig[kOptionKeys.triggerSetConfig];
  if (triggerSetConfig === undefined || typeof triggerSetConfig !== 'object' || Array.isArray(triggerSetConfig)) return;
  for (const [triggerSetId, configDict] of Object.entries(triggerSetConfig)) {
    if (typeof configDict !== 'object' || Array.isArray(configDict)) continue;
    for (const [key, value] of Object.entries(configDict)) {
      if (typeof value !== 'boolean' && typeof value !== 'string' && typeof value !== 'number') continue;
      (outputTriggerSetConfig[triggerSetId] ??= {})[key] = value;
    }
  }
};

// Reused for both top level UI and trigger set config UI.
const defaultAlertOutput = {
  id: 'DefaultAlertOutput',
  name: {
    en: 'Default alert output',
    de: 'Standard Alert Ausgabe',
    fr: 'Alerte par défaut',
    ja: '警告情報出力既定値',
    cn: '默认触发器提示输出模式',
    ko: '기본 알람 출력 방식'
  },
  type: 'select',
  options: {
    en: {
      '🆙🔊 Text and Sound': 'textAndSound',
      '🆙💬 Text and TTS': 'ttsAndText',
      '💬 TTS Only': 'ttsOnly',
      '🆙 Text Only': 'textOnly',
      '❌ Disabled': 'disabled'
    },
    de: {
      '🆙🔊 Text und Ton': 'textAndSound',
      '🆙💬 Text und TTS': 'ttsAndText',
      '💬 Nur TTS': 'ttsOnly',
      '🆙 Nur Text': 'textOnly',
      '❌ Deaktiviert': 'disabled'
    },
    fr: {
      '🆙🔊 Texte et son': 'textAndSound',
      '🆙💬 Texte et TTS': 'ttsAndText',
      '💬 TTS seulement': 'ttsOnly',
      '🆙 Texte seulement': 'textOnly',
      '❌ Désactivé': 'disabled'
    },
    ja: {
      '🆙🔊 テキストと音声': 'textAndSound',
      '🆙💬 テキストとTTS': 'ttsAndText',
      '💬 TTSのみ': 'ttsOnly',
      '🆙 テキストのみ': 'textOnly',
      '❌ 無効': 'disabled'
    },
    cn: {
      '🆙🔊 文本显示与提示音': 'textAndSound',
      '🆙💬 文本显示与TTS': 'ttsAndText',
      '💬 只使用TTS': 'ttsOnly',
      '🆙 只使用文本显示': 'textOnly',
      '❌ 禁用': 'disabled'
    },
    ko: {
      '🆙🔊 텍스트와 소리': 'textAndSound',
      '🆙💬 텍스트와 TTS': 'ttsAndText',
      '💬 TTS만': 'ttsOnly',
      '🆙 텍스트만': 'textOnly',
      '❌ 비활성화': 'disabled'
    }
  },
  default: 'textAndSound',
  setterFunc: setOptionsFromOutputValue
};
const defaultTriggerSetAlertOutput = {
  ...defaultAlertOutput,
  name: {
    en: 'Default trigger set alert output',
    de: 'Standard trigger-Set Alert Ausgabe',
    cn: '默认触发器集合提示输出模式',
    ko: '기본 트리거 세트 알람 출력 방식'
  }
};
const templateOptions = {
  buildExtraUI: (base, container) => {
    const builder = new RaidbossConfigurator(base);
    const userOptions = {
      ...raidboss_options
    };
    user_config/* default.loadUserFiles */.Z.loadUserFiles('raidboss', userOptions, () => {
      builder.buildUI(container, raidboss_manifest/* default */.Z, userOptions);
    }, false);
  },
  processExtraOptions: (baseOptions, savedConfig) => {
    // TODO: Rewrite user_config to be templated on option type so that this function knows
    // what type of options it is using.  Without this, perTriggerAutoConfig is unknown.
    const options = baseOptions;
    processPerTriggerAutoConfig(options, savedConfig);
    processPerTriggerSetAutoConfig(options, savedConfig);
    processPerZoneTimelineConfig(options, savedConfig);
    processTriggerSetConfig(options, savedConfig);
  },
  options: [{
    id: 'Coverage',
    name: {
      en: 'Supported content (latest version)',
      de: 'Unterstützte Inhalte (aktuellste Version)',
      fr: 'Contenu supporté (dernière version)',
      ja: '対応コンテンツ一覧 (最新バージョン)',
      cn: '支持副本一览 (含未发布更新)',
      ko: '지원하는 컨텐츠 (릴리즈버전보다 최신)'
    },
    type: 'html',
    html: {
      // TODO: it'd be nice if OverlayPlugin could open links on the system outside of ACT.
      en: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=en'),
      de: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=de'),
      fr: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=fr'),
      ja: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=ja'),
      cn: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=cn'),
      ko: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=ko')
    },
    default: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=en')
  }, {
    id: 'Debug',
    name: {
      en: 'Enable debug mode',
      de: 'Aktiviere Debugmodus',
      fr: 'Activer le mode debug',
      ja: 'デバッグモードを有効にする',
      cn: '启用调试模式',
      ko: '디버그 모드 활성화'
    },
    type: 'checkbox',
    debugOnly: true,
    default: false
  }, defaultAlertOutput, {
    id: 'AlertsLanguage',
    name: {
      en: 'Alerts language',
      de: 'Alert Sprache',
      fr: 'Langue des alertes',
      ja: '警告情報の言語',
      cn: '触发器提示语言',
      ko: '알람 언어'
    },
    type: 'select',
    options: {
      en: {
        'Use Display Language': 'default',
        'English (en)': 'en',
        'Chinese (cn)': 'cn',
        'German (de)': 'de',
        'French (fr)': 'fr',
        'Japanese (ja)': 'ja',
        'Korean (ko)': 'ko'
      },
      fr: {
        'Utiliser la langue d\'affichage': 'default',
        'Anglais (en)': 'en',
        'Chinois (cn)': 'cn',
        'Allemand (de)': 'de',
        'Français (fr)': 'fr',
        'Japonais (ja)': 'ja',
        'Coréen (ko)': 'ko'
      },
      ja: {
        '表示言語既定値': 'default',
        '英語 (en)': 'en',
        '中国語 (cn)': 'cn',
        'ドイツ語 (de)': 'de',
        'フランス語 (fr)': 'fr',
        '日本語 (ja)': 'ja',
        '韓国語 (ko)': 'ko'
      },
      cn: {
        '使用显示语言': 'default',
        '英文 (en)': 'en',
        '中文 (cn)': 'cn',
        '德文 (de)': 'de',
        '法文 (fr)': 'fr',
        '日文 (ja)': 'ja',
        '韩文 (ko)': 'ko'
      },
      ko: {
        '주 사용 언어 사용': 'default',
        '영어 (en)': 'en',
        '중국어 (cn)': 'cn',
        '독일어 (de)': 'de',
        '프랑스어 (fr)': 'fr',
        '일본어 (ja)': 'ja',
        '한국어 (ko)': 'ko'
      }
    },
    default: 'default',
    debug: true,
    setterFunc: value => {
      if (typeof value !== 'string') return;
      if (value === 'default') return;
      return value;
    }
  }, {
    id: 'TimelineLanguage',
    name: {
      en: 'Timeline language',
      de: 'Timeline Sprache',
      fr: 'Langue de la timeline',
      ja: 'タイムラインの言語',
      cn: '时间轴文本的语言',
      ko: '타임라인 언어'
    },
    type: 'select',
    options: {
      en: {
        'Use FFXIV Plugin Language': 'default',
        'English (en)': 'en',
        'Chinese (cn)': 'cn',
        'German (de)': 'de',
        'French (fr)': 'fr',
        'Japanese (ja)': 'ja',
        'Korean (ko)': 'ko'
      },
      de: {
        'Benutze FFXIV Plugin Sprache': 'default',
        'Englisch (en)': 'en',
        'Chinesisch (cn)': 'cn',
        'Deutsch (de)': 'de',
        'Französisch (fr)': 'fr',
        'Japanisch (ja)': 'ja',
        'Koreanisch (ko)': 'ko'
      },
      fr: {
        'Utiliser la langue du Plugin FFXIV': 'default',
        'Anglais (en)': 'en',
        'Chinois (cn)': 'cn',
        'Allemand (de)': 'de',
        'Français (fr)': 'fr',
        'Japonais (ja)': 'ja',
        'Coréen (ko)': 'ko'
      },
      ja: {
        'FFXIV Pluginの言語設定': 'default',
        '英語 (en)': 'en',
        '中国語 (cn)': 'cn',
        'ドイツ語 (de)': 'de',
        'フランス語 (fr)': 'fr',
        '日本語 (ja)': 'ja',
        '韓国語 (ko)': 'ko'
      },
      cn: {
        '使用最终幻想XIV解析插件设置的语言': 'default',
        '英文 (en)': 'en',
        '中文 (cn)': 'cn',
        '德文 (de)': 'de',
        '法文 (fr)': 'fr',
        '日文 (ja)': 'ja',
        '韩文 (ko)': 'ko'
      },
      ko: {
        'FFXIV Plugin 언어 사용': 'default',
        '영어 (en)': 'en',
        '중국어 (cn)': 'cn',
        '독일어 (de)': 'de',
        '프랑스어 (fr)': 'fr',
        '일본어 (ja)': 'ja',
        '한국어 (ko)': 'ko'
      }
    },
    default: 'default',
    debug: true,
    setterFunc: value => {
      if (typeof value !== 'string') return;
      if (value === 'default') return;
      return value;
    }
  }, {
    id: 'Skin',
    name: {
      en: 'Raidboss Skin',
      de: 'Raidboss Skin',
      fr: 'Raidboss Skin',
      ja: 'Raidbossのスキン',
      cn: 'Raidboss皮肤',
      ko: 'Raidboss 스킨'
    },
    type: 'select',
    options: {
      en: {
        'Default': 'default',
        'lippe': 'lippe',
        'jwidea': 'jwidea',
        'dorgrin': 'dorgrin'
      },
      de: {
        'Default': 'default',
        'lippe': 'lippe',
        'jwidea': 'jwidea',
        'dorgrin': 'dorgrin'
      },
      fr: {
        'Défaut': 'default',
        'lippe': 'lippe',
        'jwidea': 'jwidea',
        'dorgrin': 'dorgrin'
      },
      ja: {
        '初期設定': 'default',
        'lippe': 'lippe',
        'jwidea': 'jwidea',
        'dorgrin': 'dorgrin'
      },
      cn: {
        '默认': 'default',
        'lippe': 'lippe',
        'jwidea': 'jwidea',
        'dorgrin': 'dorgrin'
      },
      ko: {
        '기본': 'default',
        'lippe': 'lippe',
        'jwidea': 'jwidea',
        'dorgrin': 'dorgrin'
      }
    },
    default: 'default'
  }, {
    id: 'TimelineEnabled',
    name: {
      en: 'Timeline enabled',
      de: 'Timeline aktiviert',
      fr: 'Timeline activée',
      ja: 'タイムラインを有効にする',
      cn: '启用时间轴',
      ko: '타임라인 활성화'
    },
    type: 'checkbox',
    default: true
  }, {
    id: 'AlertsEnabled',
    name: {
      en: 'Alerts enabled',
      de: 'Alerts aktiviert',
      fr: 'Alertes activées',
      ja: '警告情報を有効にする',
      cn: '启用触发器提示',
      ko: '알람 활성화'
    },
    type: 'checkbox',
    default: true
  }, {
    id: 'ShowTimerBarsAtSeconds',
    name: {
      en: 'Timer bar show window (seconds)',
      de: 'Timer-Bar Anzeigedauer (in Sekunden)',
      fr: 'Fenêtre d\'affichage de la barre de temps (secondes)',
      ja: 'タイムバーに時間表示 (秒)',
      cn: '计时条显示时长 (秒)',
      ko: '타임라인을 표시할 기준 시간 (초 이하)'
    },
    type: 'float',
    default: 30
  }, {
    id: 'KeepExpiredTimerBarsForSeconds',
    name: {
      en: 'Keep expired timer bar (seconds)',
      de: 'Behalte abgelaufene Timer-Bar (in Sekunden)',
      fr: 'Garder la barre de temps expirée (secondes)',
      ja: '終了したタイムバーが消えるまでの待ち時間 (秒)',
      cn: '归零计时条滞留时长 (秒)',
      ko: '만료된 타임라인이 사라지기까지의 시간 (초)'
    },
    type: 'float',
    default: 0.7
  }, {
    id: 'BarExpiresSoonSeconds',
    name: {
      en: 'Time to recolor timer as expiring soon (seconds)',
      de: 'Zeit bis ein bald auslaufender Timer umgefärbt wird (in Sekunden)',
      fr: 'Recolorisation de la barre de temps avant expiration (secondes)',
      ja: 'タイムバーが終了前に再度色付けの残り時間 (秒)',
      cn: '倒计时小于该值时当前计时条变色 (秒)',
      ko: '타임라인의 색상을 바꿀 기준 시간 (초 이하)'
    },
    type: 'integer',
    default: 6
  }, {
    id: 'MaxNumberOfTimerBars',
    name: {
      en: 'Max number of timer bars',
      de: 'Max Anzahl an Timer-Bars',
      fr: 'Nombre max de barres de temps',
      ja: 'タイムバーの最大数',
      cn: '计时条最大数量',
      ko: '표시할 타임라인의 최대 개수'
    },
    type: 'integer',
    default: 6
  }, {
    id: 'DisplayAlarmTextForSeconds',
    name: {
      en: 'Alarm text display duration (seconds)',
      de: 'Alarm-Text Anzeigedauer (in Sekunden)',
      fr: 'Durée d\'affichage du texte d\'alarme (secondes)',
      ja: '警報テキスト表示時間の長さ (秒)',
      cn: '致命级提示文本显示时长 (秒)',
      ko: '경고 텍스트를 표시할 시간 (초)'
    },
    type: 'float',
    default: 3
  }, {
    id: 'DisplayAlertTextForSeconds',
    name: {
      en: 'Alert text display duration (seconds)',
      de: 'Alert-Text Anzeigedauer (in Sekunden)',
      fr: 'Durée d\'affichage du texte d\'alerte (secondes)',
      ja: '警告テキスト表示時間の長さ (秒)',
      cn: '严重级提示文本显示时长 (秒)',
      ko: '주의 텍스트를 표시할 시간 (초)'
    },
    type: 'float',
    default: 3
  }, {
    id: 'DisplayInfoTextForSeconds',
    name: {
      en: 'Info text display duration (seconds)',
      de: 'Info-Text Anzeigedauer (in Sekunden)',
      fr: 'Durée d\'affichage du texte d\'information (secondes)',
      ja: '情報テキスト表示時間の長さ (秒)',
      cn: '一般级提示文本显示时长 (秒)',
      ko: '안내 텍스트를 표시할 시간 (초)'
    },
    type: 'float',
    default: 3
  }, {
    id: 'AlarmSoundVolume',
    name: {
      en: 'Alarm sound volume (0-1)',
      de: 'Alarm Lautstärke (0-1)',
      fr: 'Volume de l\'alarme (0-1)',
      ja: '警報音声の音量 (0-1)',
      cn: '致命级提示音量 (0-1)',
      ko: '경고 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'AlertSoundVolume',
    name: {
      en: 'Alert sound volume (0-1)',
      de: 'Alert Lautstärke (0-1)',
      fr: 'Volume de l\'alerte (0-1)',
      ja: '警告音声の音量 (0-1)',
      cn: '严重级提示音量 (0-1)',
      ko: '주의 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'InfoSoundVolume',
    name: {
      en: 'Info sound volume (0-1)',
      de: 'Info Lautstärke (0-1)',
      fr: 'Volume de l\'info (0-1)',
      ja: '情報音声の音量 (0-1)',
      cn: '一般级提示音量 (0-1)',
      ko: '안내 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'LongSoundVolume',
    name: {
      en: 'Long sound volume (0-1)',
      de: 'Langer Ton Lautstärke (0-1)',
      fr: 'Volume du son long (0-1)',
      ja: '長い音声の音量 (0-1)',
      cn: '长提示音量 (0-1)',
      ko: '긴 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'PullSoundVolume',
    name: {
      en: 'Pull sound volume (0-1)',
      de: 'Pull Lautstärke (0-1)',
      fr: 'Volume du son de pull (0-1)',
      ja: 'タゲ取る効果音の音量 (0-1)',
      cn: '开怪提示音量 (0-1)',
      ko: '풀링 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'RumbleEnabled',
    name: {
      en: 'Enable gamepad rumble for triggers',
      de: 'Gamepad-Vibration für Trigger aktivieren',
      fr: 'Activer la vibration de la manette de jeu pour les triggers',
      ja: 'トリガーによるゲームパッド振動を有効にする',
      cn: '触发器活动时使手柄振动',
      ko: '트리거에 대해 게임패드 진동 활성화'
    },
    type: 'checkbox',
    default: false
  }, {
    id: 'InfoRumbleDuration',
    name: {
      en: 'Duration (milliseconds) of rumble for info triggers',
      de: 'Zeit (in Millisekunden) der Vibration bei info trigger',
      fr: 'Durée (millisecondes) de la vibration pour les triggers d\'informations',
      ja: '情報トリガーによる振動の長さ (ミリ秒)',
      cn: '一般级触发器振动时长 (毫秒)',
      ko: '안내 트리거의 진동 지속 시간 (밀리초)'
    },
    type: 'float',
    default: 400
  }, {
    id: 'InfoRumbleWeak',
    name: {
      en: 'Magnitude (0-1) of weak rumble for info triggers',
      de: 'Stärke (0-1) der leichten Vibration bei info trigger',
      fr: 'Intensité de la vibration faible pour les triggers d\'informations (0-1)',
      ja: '情報トリガーによる振動にモーターの弱い方の強さ (0-1)',
      cn: '一般级触发器弱电机振动强度 (0-1)',
      ko: '안내 트리거의 약한 진동 세기 (0-1)'
    },
    type: 'float',
    default: 0.5
  }, {
    id: 'InfoRumbleStrong',
    name: {
      en: 'Magnitude (0-1) of strong rumble for info triggers',
      de: 'Stärke (0-1) der starken Vibration bei info trigger',
      fr: 'Intensité de la vibration forte pour les triggers d\'informations (0-1)',
      ja: '情報トリガーによる振動にモーターの強い方の強さ (0-1)',
      cn: '一般级触发器强电机振动强度 (0-1)',
      ko: '안내 트리거의 강한 진동 세기 (0-1)'
    },
    type: 'float',
    default: 0
  }, {
    id: 'AlertRumbleDuration',
    name: {
      en: 'Duration (milliseconds) of rumble for alert triggers',
      de: 'Zeit (in Millisekunden) der Vibration bei alert trigger',
      fr: 'Durée (millisecondes) de la vibration pour les triggers d\'alertes',
      ja: '警告トリガーによる振動の長さ (ミリ秒)',
      cn: '严重级触发器振动时长 (毫秒)',
      ko: '주의 트리거의 진동 지속 시간 (밀리초)'
    },
    type: 'float',
    default: 500
  }, {
    id: 'AlertRumbleWeak',
    name: {
      en: 'Magnitude (0-1) of weak rumble for alert triggers',
      de: 'Stärke (0-1) der leichten Vibration bei alert trigger',
      fr: 'Intensité de la vibration faible pour les triggers d\'alertes (0-1)',
      ja: '警告トリガーによる振動にモーターの弱い方の強さ (0-1)',
      cn: '严重级触发器弱电机振动强度 (0-1)',
      ko: '주의 트리거의 약한 진동 세기 (0-1)'
    },
    type: 'float',
    default: 0
  }, {
    id: 'AlertRumbleStrong',
    name: {
      en: 'Magnitude (0-1) of strong rumble for alert triggers',
      de: 'Stärke (0-1) der starken Vibration bei alert trigger',
      fr: 'Intensité de la vibration forte pour les triggers d\'alertes (0-1)',
      ja: '警告トリガーによる振動にモーターの強い方の強さ (0-1)',
      cn: '严重级触发器强电机振动强度 (0-1)',
      ko: '주의 트리거의 강한 진동 세기 (0-1)'
    },
    type: 'float',
    default: 0.5
  }, {
    id: 'AlarmRumbleDuration',
    name: {
      en: 'Duration (milliseconds) of rumble for alarm triggers',
      de: 'Zeit (in Millisekunden) der Vibration bei alarm trigger',
      fr: 'Durée (millisecondes) de la vibration pour les triggers d\'alarmes',
      ja: '警報トリガーによる振動の長さ (ミリ秒)',
      cn: '致命级触发器振动时长 (毫秒)',
      ko: '경고 트리거의 진동 지속 시간 (밀리초)'
    },
    type: 'float',
    default: 750
  }, {
    id: 'AlarmRumbleWeak',
    name: {
      en: 'Magnitude (0-1) of weak rumble for alarm triggers',
      de: 'Stärke (0-1) der leichten Vibration bei alarm trigger',
      fr: 'Intensité de la vibration faible pour les triggers d\'alarmes (0-1)',
      ja: '警報トリガーによる振動にモーターの弱い方の強さ (0-1)',
      cn: '致命级触发器弱电机振动强度 (0-1)',
      ko: '경고 트리거의 약한 진동 세기 (0-1)'
    },
    type: 'float',
    default: 0.75
  }, {
    id: 'AlarmRumbleStrong',
    name: {
      en: 'Magnitude (0-1) of strong rumble for alarm triggers',
      de: 'Stärke (0-1) der starken Vibration bei alarm trigger',
      fr: 'Intensité de la vibration forte pour les triggers d\'alarmes (0-1)',
      ja: '警報トリガーによる振動にモーターの強い方の強さ (0-1)',
      cn: '致命级触发器强电机振动强度 (0-1)',
      ko: '경고 트리거의 강한 진동 세기 (0-1)'
    },
    type: 'float',
    default: 0.75
  }]
};
user_config/* default.registerOptions */.Z.registerOptions('raidboss', templateOptions, userFileHandler);
;// CONCATENATED MODULE: ./resources/stringhandlers.ts
class StringFuncs {
  static zeroPad(str, len = 2) {
    return `${str}`.padStart(len, '0');
  }
  static toProperCase(str) {
    return str.replace(/([^\W_]+[^\s-]*) */g, txt => {
      return txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase();
    });
  }
  static leftExtendStr(str, length, padChar = ' ') {
    if (str === undefined) return '';
    if (length === undefined) return str;
    return str.padStart(length, padChar);
  }
  static rightExtendStr(str, length, padChar = ' ') {
    if (str === undefined) return '';
    if (length === undefined) return str;
    return str.padEnd(length, padChar);
  }
}
/* harmony default export */ const stringhandlers = (StringFuncs);
;// CONCATENATED MODULE: ./resources/datetime.ts


// For performance reasons to prevent re-calculating this every single line,
// store already calculated values
const tzOffsetMap = {};
class DateTimeFuncs {
  static getTimezoneOffsetMillis(timeString) {
    const timezoneOffsetString = timeString.slice(-6);
    const mappedValue = tzOffsetMap[timezoneOffsetString];
    if (mappedValue) return mappedValue;
    const defaultOffset = new Date().getTimezoneOffset() * 1000;
    if (timezoneOffsetString === undefined) return defaultOffset;
    const operator = timezoneOffsetString[0];
    if (operator !== '+' && operator !== '-') return defaultOffset;
    const timezoneOffsetParts = timezoneOffsetString.slice(1).split(':');
    const hoursString = timezoneOffsetParts[0];
    const minutesString = timezoneOffsetParts[1];
    if (hoursString === undefined || minutesString === undefined) return defaultOffset;
    const hours = parseInt(hoursString);
    const minutes = parseInt(minutesString);
    const tzOffset = (hours * 60 + minutes) * 60 * 1000 * (operator === '-' ? -1 : 1);
    tzOffsetMap[timezoneOffsetString] = tzOffset;
    return tzOffset;
  }
  static timeToString(time, includeMillis = true) {
    const negative = time < 0 ? '-' : '';
    time = Math.abs(time);
    const millisNum = time % 1000;
    const secsNum = (time % (60 * 1000) - millisNum) / 1000;
    // Milliseconds
    const millis = `00${millisNum}`.slice(-3);
    const secs = `0${secsNum}`.slice(-2);
    const mins = `0${((time % (60 * 60 * 1000) - millisNum) / 1000 - secsNum) / 60}`.slice(-2);
    return `${negative + mins}:${secs}${includeMillis ? `.${millis}` : ''}`;
  }
  static timeToTimeString(time, tzOffsetMillis, includeMillis = false) {
    return this.dateObjectToTimeString(new Date(time), tzOffsetMillis, includeMillis);
  }
  static timeStringToDateString(time, tzOffsetMillis) {
    return this.dateObjectToDateString(new Date(time), tzOffsetMillis);
  }
  static dateObjectToDateString(date, tzOffsetMillis) {
    const convDate = new Date(date.getTime() + tzOffsetMillis);
    const year = convDate.getUTCFullYear();
    const month = stringhandlers.leftExtendStr((convDate.getUTCMonth() + 1).toString(), 2, '0');
    const day = stringhandlers.leftExtendStr(convDate.getUTCDate().toString(), 2, '0');
    return `${year}-${month}-${day}`;
  }
  static dateObjectToTimeString(date, tzOffsetMillis, includeMillis = true) {
    const convDate = new Date(date.getTime() + tzOffsetMillis);
    const hour = stringhandlers.leftExtendStr(convDate.getUTCHours().toString(), 2, '0');
    const minute = stringhandlers.leftExtendStr(convDate.getUTCMinutes().toString(), 2, '0');
    const second = stringhandlers.leftExtendStr(convDate.getUTCSeconds().toString(), 2, '0');
    let ret = `${hour}:${minute}:${second}`;
    if (includeMillis) ret = `${ret}.${stringhandlers.leftExtendStr(convDate.getUTCMilliseconds().toString(), 3, '0')}`;
    return ret;
  }
  static msToDuration(ms) {
    const tmp = DateTimeFuncs.timeToString(ms, false);
    return `${tmp.replace(':', 'm')}s`;
  }
  static dateTimeToString(time, tzOffsetMillis, includeMillis = false) {
    const date = new Date(time);
    const dateString = this.dateObjectToDateString(date, tzOffsetMillis);
    const timeString = this.dateObjectToTimeString(date, tzOffsetMillis, includeMillis);
    return `${dateString} ${timeString}`;
  }
}
// EXTERNAL MODULE: ./resources/overlay_plugin_api.ts
var overlay_plugin_api = __webpack_require__(959);
;// CONCATENATED MODULE: ./resources/pet_names.ts
// Auto-generated from gen_pet_names.ts
// DO NOT EDIT THIS FILE DIRECTLY

const data = {
  'cn': ['绿宝石兽', '黄宝石兽', '朝日小仙女', '夕月小仙女', '车式浮空炮塔', '象式浮空炮塔', '亚灵神巴哈姆特', '亚灵神不死鸟', '炽天使', '月长宝石兽', '英雄的掠影', '后式自走人偶', '分身', '宝石兽', '红宝石兽', '伊弗利特之灵', '泰坦之灵', '迦楼罗之灵', '红宝石伊弗利特', '黄宝石泰坦', '绿宝石迦楼罗', '琥珀宝石兽'],
  'de': ['Smaragd-Karfunkel', 'Topas-Karfunkel', 'Eos', 'Selene', 'Selbstschuss-Gyrocopter TURM', 'Selbstschuss-Gyrocopter LÄUFER', 'Demi-Bahamut', 'Demi-Phönix', 'Seraph', 'Mondstein-Karfunkel', 'Schattenschemen', 'Automaton DAME', 'Gedoppeltes Ich', 'Karfunkel', 'Rubin-Karfunkel', 'Ifrit-Egi', 'Titan-Egi', 'Garuda-Egi', 'Rubin-Ifrit', 'Topas-Titan', 'Smaragd-Garuda', 'Bernstein-Karfunkel', 'Obsidian-Karfunkel'],
  'en': ['Emerald Carbuncle', 'Topaz Carbuncle', 'Eos', 'Selene', 'Rook Autoturret', 'Bishop Autoturret', 'Demi-Bahamut', 'Demi-Phoenix', 'Seraph', 'Moonstone Carbuncle', 'Esteem', 'Automaton Queen', 'Bunshin', 'Carbuncle', 'Ruby Carbuncle', 'Ifrit-Egi', 'Titan-Egi', 'Garuda-Egi', 'Ruby Ifrit', 'Topaz Titan', 'Emerald Garuda', 'Amber Carbuncle', 'Obsidian Carbuncle'],
  'fr': ['Carbuncle émeraude', 'Carbuncle topaze', 'Eos', 'Selene', 'Auto-tourelle Tour', 'Auto-tourelle Fou', 'Demi-Bahamut', 'Demi-Phénix', 'Séraphin', 'Carbuncle hécatolite', 'Estime', 'Automate Reine', 'Ombre', 'Carbuncle', 'Carbuncle rubis', 'Ifrit-Egi', 'Titan-Egi', 'Garuda-Egi', 'Ifrit rubis', 'Titan topaze', 'Garuda émeraude', 'Carbuncle ambre', 'Carbuncle obsidienne'],
  'ja': ['カーバンクル・エメラルド', 'カーバンクル・トパーズ', 'フェアリー・エオス', 'フェアリー・セレネ', 'オートタレット・ルーク', 'オートタレット・ビショップ', 'デミ・バハムート', 'デミ・フェニックス', 'セラフィム', 'カーバンクル・ムーンストーン', '英雄の影身', 'オートマトン・クイーン', '分身', 'カーバンクル', 'カーバンクル・ルビー', 'イフリート・エギ', 'タイタン・エギ', 'ガルーダ・エギ', 'イフリート・ルビー', 'タイタン・トパーズ', 'ガルーダ・エメラルド', 'カーバンクル・アンバー', 'カーバンクル・オブシダン'],
  'ko': ['카벙클 에메랄드', '카벙클 토파즈', '요정 에오스', '요정 셀레네', '자동포탑 룩', '자동포탑 비숍', '데미바하무트', '데미피닉스', '세라핌', '카벙클 문스톤', '영웅의 환영', '자동인형 퀸', '분신', '카벙클', '카벙클 루비', '이프리트 에기', '타이탄 에기', '가루다 에기', '이프리트 루비', '타이탄 토파즈', '가루다 에메랄드', '카벙클 앰버']
};
/* harmony default export */ const pet_names = (data);
;// CONCATENATED MODULE: ./resources/world_id.ts
// Auto-generated from world_id.ts
// DO NOT EDIT THIS FILE DIRECTLY

const worldNameToWorld = name => {
  return Object.values(world_id_data).find(world => {
    if (world.name === name) {
      return true;
    }
  });
};
const world_id_data = {
  '0': {
    'id': 0,
    'internalName': 'crossworld',
    'name': 'Dev',
    'region': 0,
    'userType': 0
  },
  '1': {
    'id': 1,
    'internalName': 'reserved1',
    'name': 'Dev',
    'region': 0,
    'userType': 0
  },
  '2': {
    'id': 2,
    'internalName': 'c-contents',
    'name': 'c-contents',
    'region': 1,
    'userType': 0
  },
  '3': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 3,
    'internalName': 'c-whiteae',
    'name': 'c-whiteae',
    'region': 1,
    'userType': 1
  },
  '4': {
    'id': 4,
    'internalName': 'c-baudinii',
    'name': 'c-baudinii',
    'region': 1,
    'userType': 0
  },
  '5': {
    'id': 5,
    'internalName': 'c-contents2',
    'name': 'c-contents2',
    'region': 1,
    'userType': 0
  },
  '6': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 6,
    'internalName': 'c-funereus',
    'name': 'c-funereus',
    'region': 1,
    'userType': 1
  },
  '16': {
    'id': 16,
    'internalName': 'konconv',
    'name': 'konconv',
    'region': 1,
    'userType': 0
  },
  '21': {
    'dataCenter': {
      'id': 9,
      'name': 'Materia'
    },
    'id': 21,
    'internalName': 'Ravana',
    'name': 'Ravana',
    'region': 1,
    'userType': 7
  },
  '22': {
    'dataCenter': {
      'id': 9,
      'name': 'Materia'
    },
    'id': 22,
    'internalName': 'Bismarck',
    'name': 'Bismarck',
    'region': 1,
    'userType': 7
  },
  '23': {
    'dataCenter': {
      'id': 3,
      'name': 'Mana'
    },
    'id': 23,
    'internalName': 'Asura',
    'name': 'Asura',
    'region': 1,
    'userType': 1
  },
  '24': {
    'dataCenter': {
      'id': 10,
      'name': 'Meteor'
    },
    'id': 24,
    'internalName': 'Belias',
    'name': 'Belias',
    'region': 1,
    'userType': 1
  },
  '25': {
    'id': 25,
    'internalName': 'Chaos',
    'name': 'Chaos',
    'region': 1,
    'userType': 1
  },
  '26': {
    'id': 26,
    'internalName': 'Hecatoncheir',
    'name': 'Hecatoncheir',
    'region': 1,
    'userType': 1
  },
  '27': {
    'id': 27,
    'internalName': 'Moomba',
    'name': 'Moomba',
    'region': 1,
    'userType': 1
  },
  '28': {
    'dataCenter': {
      'id': 3,
      'name': 'Mana'
    },
    'id': 28,
    'internalName': 'Pandaemonium',
    'name': 'Pandaemonium',
    'region': 1,
    'userType': 1
  },
  '29': {
    'dataCenter': {
      'id': 10,
      'name': 'Meteor'
    },
    'id': 29,
    'internalName': 'Shinryu',
    'name': 'Shinryu',
    'region': 1,
    'userType': 1
  },
  '30': {
    'dataCenter': {
      'id': 10,
      'name': 'Meteor'
    },
    'id': 30,
    'internalName': 'Unicorn',
    'name': 'Unicorn',
    'region': 1,
    'userType': 1
  },
  '31': {
    'dataCenter': {
      'id': 10,
      'name': 'Meteor'
    },
    'id': 31,
    'internalName': 'Yojimbo',
    'name': 'Yojimbo',
    'region': 1,
    'userType': 1
  },
  '32': {
    'dataCenter': {
      'id': 10,
      'name': 'Meteor'
    },
    'id': 32,
    'internalName': 'Zeromus',
    'name': 'Zeromus',
    'region': 1,
    'userType': 1
  },
  '33': {
    'dataCenter': {
      'id': 7,
      'name': 'Light'
    },
    'id': 33,
    'internalName': 'Twintania',
    'name': 'Twintania',
    'region': 1,
    'userType': 5
  },
  '34': {
    'dataCenter': {
      'id': 8,
      'name': 'Crystal'
    },
    'id': 34,
    'internalName': 'Brynhildr',
    'name': 'Brynhildr',
    'region': 1,
    'userType': 3
  },
  '35': {
    'dataCenter': {
      'id': 5,
      'name': 'Primal'
    },
    'id': 35,
    'internalName': 'Famfrit',
    'name': 'Famfrit',
    'region': 1,
    'userType': 3
  },
  '36': {
    'dataCenter': {
      'id': 7,
      'name': 'Light'
    },
    'id': 36,
    'internalName': 'Lich',
    'name': 'Lich',
    'region': 1,
    'userType': 5
  },
  '37': {
    'dataCenter': {
      'id': 8,
      'name': 'Crystal'
    },
    'id': 37,
    'internalName': 'Mateus',
    'name': 'Mateus',
    'region': 1,
    'userType': 3
  },
  '38': {
    'id': 38,
    'internalName': 'Shemhazai',
    'name': 'Shemhazai',
    'region': 1,
    'userType': 3
  },
  '39': {
    'dataCenter': {
      'id': 6,
      'name': 'Chaos'
    },
    'id': 39,
    'internalName': 'Omega',
    'name': 'Omega',
    'region': 1,
    'userType': 5
  },
  '40': {
    'dataCenter': {
      'id': 4,
      'name': 'Aether'
    },
    'id': 40,
    'internalName': 'Jenova',
    'name': 'Jenova',
    'region': 1,
    'userType': 3
  },
  '41': {
    'dataCenter': {
      'id': 8,
      'name': 'Crystal'
    },
    'id': 41,
    'internalName': 'Zalera',
    'name': 'Zalera',
    'region': 1,
    'userType': 3
  },
  '42': {
    'dataCenter': {
      'id': 7,
      'name': 'Light'
    },
    'id': 42,
    'internalName': 'Zodiark',
    'name': 'Zodiark',
    'region': 1,
    'userType': 5
  },
  '43': {
    'dataCenter': {
      'id': 2,
      'name': 'Gaia'
    },
    'id': 43,
    'internalName': 'Alexander',
    'name': 'Alexander',
    'region': 1,
    'userType': 1
  },
  '44': {
    'dataCenter': {
      'id': 3,
      'name': 'Mana'
    },
    'id': 44,
    'internalName': 'Anima',
    'name': 'Anima',
    'region': 1,
    'userType': 1
  },
  '45': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 45,
    'internalName': 'Carbuncle',
    'name': 'Carbuncle',
    'region': 1,
    'userType': 1
  },
  '46': {
    'dataCenter': {
      'id': 2,
      'name': 'Gaia'
    },
    'id': 46,
    'internalName': 'Fenrir',
    'name': 'Fenrir',
    'region': 1,
    'userType': 1
  },
  '47': {
    'dataCenter': {
      'id': 3,
      'name': 'Mana'
    },
    'id': 47,
    'internalName': 'Hades',
    'name': 'Hades',
    'region': 1,
    'userType': 1
  },
  '48': {
    'dataCenter': {
      'id': 3,
      'name': 'Mana'
    },
    'id': 48,
    'internalName': 'Ixion',
    'name': 'Ixion',
    'region': 1,
    'userType': 1
  },
  '49': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 49,
    'internalName': 'Kujata',
    'name': 'Kujata',
    'region': 1,
    'userType': 1
  },
  '50': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 50,
    'internalName': 'Typhon',
    'name': 'Typhon',
    'region': 1,
    'userType': 1
  },
  '51': {
    'dataCenter': {
      'id': 2,
      'name': 'Gaia'
    },
    'id': 51,
    'internalName': 'Ultima',
    'name': 'Ultima',
    'region': 1,
    'userType': 1
  },
  '52': {
    'dataCenter': {
      'id': 10,
      'name': 'Meteor'
    },
    'id': 52,
    'internalName': 'Valefor',
    'name': 'Valefor',
    'region': 1,
    'userType': 1
  },
  '53': {
    'dataCenter': {
      'id': 5,
      'name': 'Primal'
    },
    'id': 53,
    'internalName': 'Exodus',
    'name': 'Exodus',
    'region': 1,
    'userType': 3
  },
  '54': {
    'dataCenter': {
      'id': 4,
      'name': 'Aether'
    },
    'id': 54,
    'internalName': 'Faerie',
    'name': 'Faerie',
    'region': 1,
    'userType': 3
  },
  '55': {
    'dataCenter': {
      'id': 5,
      'name': 'Primal'
    },
    'id': 55,
    'internalName': 'Lamia',
    'name': 'Lamia',
    'region': 1,
    'userType': 3
  },
  '56': {
    'dataCenter': {
      'id': 7,
      'name': 'Light'
    },
    'id': 56,
    'internalName': 'Phoenix',
    'name': 'Phoenix',
    'region': 1,
    'userType': 5
  },
  '57': {
    'dataCenter': {
      'id': 4,
      'name': 'Aether'
    },
    'id': 57,
    'internalName': 'Siren',
    'name': 'Siren',
    'region': 1,
    'userType': 3
  },
  '58': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 58,
    'internalName': 'Garuda',
    'name': 'Garuda',
    'region': 1,
    'userType': 1
  },
  '59': {
    'dataCenter': {
      'id': 2,
      'name': 'Gaia'
    },
    'id': 59,
    'internalName': 'Ifrit',
    'name': 'Ifrit',
    'region': 1,
    'userType': 1
  },
  '60': {
    'dataCenter': {
      'id': 10,
      'name': 'Meteor'
    },
    'id': 60,
    'internalName': 'Ramuh',
    'name': 'Ramuh',
    'region': 1,
    'userType': 1
  },
  '61': {
    'dataCenter': {
      'id': 3,
      'name': 'Mana'
    },
    'id': 61,
    'internalName': 'Titan',
    'name': 'Titan',
    'region': 1,
    'userType': 1
  },
  '62': {
    'dataCenter': {
      'id': 8,
      'name': 'Crystal'
    },
    'id': 62,
    'internalName': 'Diabolos',
    'name': 'Diabolos',
    'region': 1,
    'userType': 3
  },
  '63': {
    'dataCenter': {
      'id': 4,
      'name': 'Aether'
    },
    'id': 63,
    'internalName': 'Gilgamesh',
    'name': 'Gilgamesh',
    'region': 1,
    'userType': 3
  },
  '64': {
    'dataCenter': {
      'id': 5,
      'name': 'Primal'
    },
    'id': 64,
    'internalName': 'Leviathan',
    'name': 'Leviathan',
    'region': 1,
    'userType': 3
  },
  '65': {
    'dataCenter': {
      'id': 4,
      'name': 'Aether'
    },
    'id': 65,
    'internalName': 'Midgardsormr',
    'name': 'Midgardsormr',
    'region': 1,
    'userType': 3
  },
  '66': {
    'dataCenter': {
      'id': 7,
      'name': 'Light'
    },
    'id': 66,
    'internalName': 'Odin',
    'name': 'Odin',
    'region': 1,
    'userType': 5
  },
  '67': {
    'dataCenter': {
      'id': 7,
      'name': 'Light'
    },
    'id': 67,
    'internalName': 'Shiva',
    'name': 'Shiva',
    'region': 1,
    'userType': 5
  },
  '68': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 68,
    'internalName': 'Atomos',
    'name': 'Atomos',
    'region': 1,
    'userType': 1
  },
  '69': {
    'dataCenter': {
      'id': 2,
      'name': 'Gaia'
    },
    'id': 69,
    'internalName': 'Bahamut',
    'name': 'Bahamut',
    'region': 1,
    'userType': 1
  },
  '70': {
    'dataCenter': {
      'id': 3,
      'name': 'Mana'
    },
    'id': 70,
    'internalName': 'Chocobo',
    'name': 'Chocobo',
    'region': 1,
    'userType': 1
  },
  '71': {
    'dataCenter': {
      'id': 6,
      'name': 'Chaos'
    },
    'id': 71,
    'internalName': 'Moogle',
    'name': 'Moogle',
    'region': 1,
    'userType': 5
  },
  '72': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 72,
    'internalName': 'Tonberry',
    'name': 'Tonberry',
    'region': 1,
    'userType': 1
  },
  '73': {
    'dataCenter': {
      'id': 4,
      'name': 'Aether'
    },
    'id': 73,
    'internalName': 'Adamantoise',
    'name': 'Adamantoise',
    'region': 1,
    'userType': 3
  },
  '74': {
    'dataCenter': {
      'id': 8,
      'name': 'Crystal'
    },
    'id': 74,
    'internalName': 'Coeurl',
    'name': 'Coeurl',
    'region': 1,
    'userType': 3
  },
  '75': {
    'dataCenter': {
      'id': 8,
      'name': 'Crystal'
    },
    'id': 75,
    'internalName': 'Malboro',
    'name': 'Malboro',
    'region': 1,
    'userType': 3
  },
  '76': {
    'dataCenter': {
      'id': 2,
      'name': 'Gaia'
    },
    'id': 76,
    'internalName': 'Tiamat',
    'name': 'Tiamat',
    'region': 1,
    'userType': 1
  },
  '77': {
    'dataCenter': {
      'id': 5,
      'name': 'Primal'
    },
    'id': 77,
    'internalName': 'Ultros',
    'name': 'Ultros',
    'region': 1,
    'userType': 3
  },
  '78': {
    'dataCenter': {
      'id': 5,
      'name': 'Primal'
    },
    'id': 78,
    'internalName': 'Behemoth',
    'name': 'Behemoth',
    'region': 1,
    'userType': 3
  },
  '79': {
    'dataCenter': {
      'id': 4,
      'name': 'Aether'
    },
    'id': 79,
    'internalName': 'Cactuar',
    'name': 'Cactuar',
    'region': 1,
    'userType': 3
  },
  '80': {
    'dataCenter': {
      'id': 6,
      'name': 'Chaos'
    },
    'id': 80,
    'internalName': 'Cerberus',
    'name': 'Cerberus',
    'region': 1,
    'userType': 5
  },
  '81': {
    'dataCenter': {
      'id': 8,
      'name': 'Crystal'
    },
    'id': 81,
    'internalName': 'Goblin',
    'name': 'Goblin',
    'region': 1,
    'userType': 3
  },
  '82': {
    'dataCenter': {
      'id': 10,
      'name': 'Meteor'
    },
    'id': 82,
    'internalName': 'Mandragora',
    'name': 'Mandragora',
    'region': 1,
    'userType': 1
  },
  '83': {
    'dataCenter': {
      'id': 6,
      'name': 'Chaos'
    },
    'id': 83,
    'internalName': 'Louisoix',
    'name': 'Louisoix',
    'region': 1,
    'userType': 5
  },
  '84': {
    'id': 84,
    'internalName': 'Syldra',
    'name': 'Syldra',
    'region': 1,
    'userType': 5
  },
  '85': {
    'dataCenter': {
      'id': 6,
      'name': 'Chaos'
    },
    'id': 85,
    'internalName': 'Spriggan',
    'name': 'Spriggan',
    'region': 1,
    'userType': 5
  },
  '86': {
    'dataCenter': {
      'id': 9,
      'name': 'Materia'
    },
    'id': 86,
    'internalName': 'Sephirot',
    'name': 'Sephirot',
    'region': 1,
    'userType': 7
  },
  '87': {
    'dataCenter': {
      'id': 9,
      'name': 'Materia'
    },
    'id': 87,
    'internalName': 'Sophia',
    'name': 'Sophia',
    'region': 1,
    'userType': 7
  },
  '88': {
    'dataCenter': {
      'id': 9,
      'name': 'Materia'
    },
    'id': 88,
    'internalName': 'Zurvan',
    'name': 'Zurvan',
    'region': 1,
    'userType': 7
  },
  '90': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 90,
    'internalName': 'Aegis',
    'name': 'Aegis',
    'region': 1,
    'userType': 2
  },
  '91': {
    'dataCenter': {
      'id': 8,
      'name': 'Crystal'
    },
    'id': 91,
    'internalName': 'Balmung',
    'name': 'Balmung',
    'region': 1,
    'userType': 4
  },
  '92': {
    'dataCenter': {
      'id': 2,
      'name': 'Gaia'
    },
    'id': 92,
    'internalName': 'Durandal',
    'name': 'Durandal',
    'region': 1,
    'userType': 2
  },
  '93': {
    'dataCenter': {
      'id': 5,
      'name': 'Primal'
    },
    'id': 93,
    'internalName': 'Excalibur',
    'name': 'Excalibur',
    'region': 1,
    'userType': 4
  },
  '94': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 94,
    'internalName': 'Gungnir',
    'name': 'Gungnir',
    'region': 1,
    'userType': 2
  },
  '95': {
    'dataCenter': {
      'id': 5,
      'name': 'Primal'
    },
    'id': 95,
    'internalName': 'Hyperion',
    'name': 'Hyperion',
    'region': 1,
    'userType': 4
  },
  '96': {
    'dataCenter': {
      'id': 3,
      'name': 'Mana'
    },
    'id': 96,
    'internalName': 'Masamune',
    'name': 'Masamune',
    'region': 1,
    'userType': 2
  },
  '97': {
    'dataCenter': {
      'id': 6,
      'name': 'Chaos'
    },
    'id': 97,
    'internalName': 'Ragnarok',
    'name': 'Ragnarok',
    'region': 1,
    'userType': 6
  },
  '98': {
    'dataCenter': {
      'id': 2,
      'name': 'Gaia'
    },
    'id': 98,
    'internalName': 'Ridill',
    'name': 'Ridill',
    'region': 1,
    'userType': 2
  },
  '99': {
    'dataCenter': {
      'id': 4,
      'name': 'Aether'
    },
    'id': 99,
    'internalName': 'Sargatanas',
    'name': 'Sargatanas',
    'region': 1,
    'userType': 4
  },
  '100': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 100,
    'internalName': 'dev_test',
    'name': 'dev_test',
    'region': 1,
    'userType': 0
  },
  '101': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 101,
    'internalName': 'zone_test',
    'name': 'zone_test',
    'region': 1,
    'userType': 0
  },
  '102': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 102,
    'internalName': 'trs_test',
    'name': 'trs_test',
    'region': 1,
    'userType': 0
  },
  '103': {
    'id': 103,
    'internalName': 'contents_test',
    'name': 'contents_test',
    'region': 1,
    'userType': 0
  },
  '110': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 110,
    'internalName': 'b-tirica',
    'name': 'b-tirica',
    'region': 1,
    'userType': 1
  },
  '111': {
    'id': 111,
    'internalName': 'b-contents',
    'name': 'b-contents',
    'region': 1,
    'userType': 0
  },
  '112': {
    'dataCenter': {
      'id': 4,
      'name': 'Aether'
    },
    'id': 112,
    'internalName': 'b-chiriri',
    'name': 'b-chiriri',
    'region': 1,
    'userType': 3
  },
  '113': {
    'id': 113,
    'internalName': 'b-contents2',
    'name': 'b-contents2',
    'region': 1,
    'userType': 0
  },
  '114': {
    'dataCenter': {
      'id': 2,
      'name': 'Gaia'
    },
    'id': 114,
    'internalName': 'b-jugularis',
    'name': 'b-jugularis',
    'region': 1,
    'userType': 1
  },
  '115': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 115,
    'internalName': 'e-regia',
    'name': 'e-regia',
    'region': 1,
    'userType': 1
  },
  '116': {
    'dataCenter': {
      'id': 4,
      'name': 'Aether'
    },
    'id': 116,
    'internalName': 'e-pialii',
    'name': 'e-pialii',
    'region': 1,
    'userType': 3
  },
  '117': {
    'id': 117,
    'internalName': 'e-contents',
    'name': 'e-contents',
    'region': 1,
    'userType': 0
  },
  '118': {
    'id': 118,
    'internalName': 'e-contents2',
    'name': 'e-contents2',
    'region': 1,
    'userType': 0
  },
  '119': {
    'dataCenter': {
      'id': 1,
      'name': 'Elemental'
    },
    'id': 119,
    'internalName': 'e-coloria',
    'name': 'e-coloria',
    'region': 1,
    'userType': 1
  }
};
/* harmony default export */ const world_id = ((/* unused pure expression or super */ null && (world_id_data)));
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/CombatantState.ts

class CombatantState {
  constructor(props, targetable) {
    Object.assign(this, props);

    // Force these values to something sane in case they're not in `props`
    this.CurrentHP ??= 0;
    this.MaxHP ??= 0;
    this.CurrentMP ??= 0;
    this.MaxMP ??= 0;
    this.PosX ??= 0;
    this.PosY ??= 0;
    this.PosZ ??= 0;
    this.Heading ??= 0;
    this.targetable = targetable;
  }
  partialClone(props) {
    return new CombatantState({
      ...this,
      ...props
    }, this.targetable);
  }
  fullClone() {
    return new CombatantState({
      ...this
    }, this.targetable);
  }
  setName(name) {
    // Sometimes network lines arrive after the combatant has been cleared
    // from memory in the client, so the network line will have a valid ID
    // but the name will be blank. Since we're tracking the name for the
    // entire fight and not on a state-by-state basis, we don't want to
    // blank out a name in this case.
    // If a combatant actually has a blank name, that's still allowed by
    // the constructor.
    if (name === '') return;
    const parts = name.split('(');
    this.Name = parts[0] ?? '';
    if (parts.length > 1) {
      const worldName = parts[1]?.replace(/\)$/, '');
      if (worldName !== undefined) {
        const world = worldNameToWorld(worldName);
        if (world !== undefined) this.WorldID = world.id;
      }
    }
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/Combatant.ts


class Combatant {
  tempStates = {};
  states = {};
  // State indexes are stored both in forward and reverse sequence
  // This prevents having to clone the array and reverse it every frame of playback,
  // or alternatively to have to loop through the array in reverse to find the target
  // timestamp. A slight increase in memory usage of 2-3kb to make the code
  // more readable.
  stateIndexes = [];
  reverseStateIndexes = [];
  get firstStateTimestamp() {
    const firstIndex = this.stateIndexes[0];
    if (firstIndex === undefined) throw new not_reached/* UnreachableCode */.$();
    return firstIndex;
  }
  get lastStateTimestamp() {
    const lastIndex = this.stateIndexes.slice(-1)[0];
    if (lastIndex === undefined) throw new not_reached/* UnreachableCode */.$();
    return lastIndex;
  }
  get firstState() {
    const firstStateIndex = this.firstStateTimestamp;
    return this.getState(firstStateIndex);
  }
  setState(state, timestamp) {
    return this.states[timestamp] = state;
  }
  hasState(timestamp) {
    return this.states[timestamp] !== undefined;
  }
  nextState(timestamp) {
    // If timestamp is a state already, return it
    if (this.stateIndexes.includes(timestamp)) return this.getState(timestamp);

    // Shortcut out if this timestamp is before the first or after the last timestamp
    if (timestamp < this.firstStateTimestamp) return this.getState(this.firstStateTimestamp);else if (timestamp > this.lastStateTimestamp) return this.getState(this.lastStateTimestamp);
    const stateTimestamp = this.stateIndexes.find(ts => ts > timestamp);
    if (stateTimestamp === undefined) throw new not_reached/* UnreachableCode */.$();
    return this.getState(stateTimestamp);
  }
  previousState(timestamp) {
    // If timestamp is a state already, return it
    if (this.stateIndexes.includes(timestamp)) return this.getState(timestamp);

    // Shortcut out if this timestamp is before the first or after the last timestamp
    if (timestamp < this.firstStateTimestamp) return this.getState(this.firstStateTimestamp);else if (timestamp > this.lastStateTimestamp) return this.getState(this.lastStateTimestamp);
    const stateTimestamp = this.reverseStateIndexes.find(ts => ts < timestamp);
    if (stateTimestamp === undefined) throw new not_reached/* UnreachableCode */.$();
    return this.getState(stateTimestamp);
  }
  getState(timestamp) {
    const stateByTimestamp = this.states[timestamp];
    if (stateByTimestamp) return stateByTimestamp;
    return this.previousState(timestamp);
  }
  getTempState(timestamp) {
    if (!this.tempStates) throw new Error('Invalid Combatant state');
    return this.tempStates[timestamp];
  }
  pushPartialState(timestamp, props) {
    if (!this.tempStates) throw new Error('Invalid Combatant state');
    if (this.tempStates[timestamp] === undefined) return this.tempStates[timestamp] = props;
    const state = this.tempStates[timestamp];
    if (!state) throw new not_reached/* UnreachableCode */.$();
    return this.tempStates[timestamp] = {
      ...state,
      ...props
    };
  }
  finalize() {
    if (!this.tempStates) throw new Error('Invalid Combatant state');
    const stateEntries = Object.entries(this.tempStates).sort((left, right) => left[0].localeCompare(right[0]));
    if (stateEntries.length < 1) return;
    const lastState = {
      key: parseInt(stateEntries[0]?.[0] ?? '0'),
      state: new CombatantState(stateEntries[0]?.[1] ?? {}, stateEntries[0]?.[1]?.targetable ?? false),
      json: JSON.stringify(stateEntries[0]?.[1])
    };
    this.states[lastState.key] = lastState.state;
    this.stateIndexes.push(lastState.key);
    for (const state of stateEntries.slice(1)) {
      const curKey = parseInt(state[0] ?? '0');
      let curState = lastState.state.partialClone(state[1]);
      const curJson = JSON.stringify(curState);
      if (curJson !== lastState.json) {
        lastState.state = curState;
      } else {
        // Re-use state to reduce memory usage
        curState = lastState.state;
      }
      this.states[curKey] = curState;
      this.stateIndexes.push(curKey);
    }
    this.reverseStateIndexes = [...this.stateIndexes].reverse();
    delete this.tempStates;
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/CombatantJobSearch.ts
class CombatantJobSearch {
  static getJob(abilityId) {
    for (const [key, value] of Object.entries(CombatantJobSearch.abilities)) {
      if (value?.includes(abilityId)) return key;
    }
  }
  static abilityMatchRegex = /[a-fA-F0-9]{1,4}/i;
  static abilities = {
    PLD: [12959, 12961, 12964, 12967, 12968, 12969, 12970, 12971, 12972, 12973, 12974, 12975, 12976, 12978, 12980, 12981, 12982, 12983, 12984, 12985, 12986, 12987, 12988, 12989, 12991, 12992, 12993, 12994, 12996, 13000, 13001, 13006, 14480, 16457, 16458, 16459, 16460, 16461, 17669, 17671, 17672, 17691, 17692, 17693, 17694, 17866, 18050, 27, 29, 30, 3538, 3539, 3540, 3541, 3542, 4284, 4285, 4286, 50207, 50209, 50246, 50260, 50261, 50262, 50263, 50264, 7382, 7383, 7384, 7385, 8746, 8749, 8750, 8751, 8752, 8754, 8755, 8756],
    WAR: [16462, 16463, 16464, 16465, 17695, 17696, 17697, 17698, 17889, 3549, 3550, 3551, 3552, 4289, 4290, 4291, 49, 50157, 50218, 50249, 50265, 50266, 50267, 50268, 50269, 51, 52, 7386, 7387, 7388, 7389, 8758, 8761, 8762, 8763, 8764, 8765, 8767, 8768],
    DRK: [16466, 16467, 16468, 16469, 16470, 16471, 16472, 17700, 17701, 17702, 3617, 3621, 3623, 3624, 3625, 3629, 3632, 3634, 3636, 3638, 3639, 3640, 3641, 3643, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4680, 50158, 50159, 50271, 50272, 50319, 7390, 7391, 7392, 7393, 8769, 8772, 8773, 8775, 8776, 8777, 8778, 8779],
    GNB: [17703, 17704, 17705, 17706, 17707, 17708, 17709, 17710, 17711, 17712, 17713, 17714, 17716, 17717, 17890, 17891, 16137, 50320, 16138, 16139, 16140, 16141, 16142, 16143, 16144, 16145, 16162, 50257, 16148, 16149, 16151, 16152, 50258, 16153, 16154, 16146, 16147, 16150, 16159, 16160, 16161, 16155, 16156, 16157, 16158, 16163, 16164, 16165, 50259],
    WHM: [12958, 12962, 12965, 12997, 13002, 13003, 13004, 13005, 131, 136, 137, 139, 140, 14481, 1584, 16531, 16532, 16533, 16534, 16535, 16536, 17688, 17689, 17690, 17789, 17790, 17791, 17793, 17794, 17832, 3568, 3569, 3570, 3571, 4296, 4297, 50181, 50182, 50196, 50307, 50308, 50309, 50310, 7430, 7431, 7432, 7433, 8895, 8896, 8900, 9621, 127, 133],
    SCH: [16537, 16538, 16539, 16540, 16541, 16542, 16543, 16544, 16545, 16546, 16547, 16548, 16550, 16551, 166, 167, 17215, 17216, 17795, 17796, 17797, 17798, 17802, 17864, 17865, 17869, 17870, 17990, 185, 186, 188, 189, 190, 3583, 3584, 3585, 3586, 3587, 4300, 50184, 50214, 50311, 50312, 50313, 50324, 7434, 7435, 7436, 7437, 7438, 7869, 802, 803, 805, 8904, 8905, 8909, 9622],
    AST: [10027, 10028, 10029, 16552, 16553, 16554, 16555, 16556, 16557, 16558, 16559, 17055, 17151, 17152, 17804, 17805, 17806, 17807, 17809, 17991, 3590, 3593, 3594, 3595, 3596, 3598, 3599, 3600, 3601, 3603, 3604, 3605, 3606, 3608, 3610, 3612, 3613, 3614, 3615, 4301, 4302, 4401, 4402, 4403, 4404, 4405, 4406, 4677, 4678, 4679, 50122, 50124, 50125, 50186, 50187, 50188, 50189, 50314, 50315, 50316, 7439, 7440, 7441, 7442, 7443, 7444, 7445, 7448, 8324, 8913, 8914, 8916, 9629],
    MNK: [12960, 12963, 12966, 12977, 12979, 12990, 12995, 12998, 12999, 14476, 14478, 16473, 16474, 16475, 16476, 17674, 17675, 17676, 17677, 17719, 17720, 17721, 17722, 17723, 17724, 17725, 17726, 3543, 3545, 3546, 3547, 4262, 4287, 4288, 50160, 50161, 50245, 50273, 50274, 63, 70, 71, 7394, 7395, 7396, 74, 8780, 8781, 8782, 8783, 8784, 8785, 8787, 8789, 8925],
    DRG: [16477, 16478, 16479, 16480, 17728, 17729, 3553, 3554, 3555, 3556, 3557, 4292, 4293, 50162, 50163, 50247, 50275, 50276, 7397, 7398, 7399, 7400, 86, 8791, 8792, 8793, 8794, 8795, 8796, 8797, 8798, 8799, 8802, 8803, 8804, 8805, 8806, 92, 94, 95, 96, 9640, 75, 78],
    NIN: [16488, 16489, 16491, 16492, 16493, 17413, 17414, 17415, 17416, 17417, 17418, 17419, 17420, 17732, 17733, 17734, 17735, 17736, 17737, 17738, 17739, 2246, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 3563, 3566, 4295, 50165, 50166, 50167, 50250, 50279, 50280, 7401, 7402, 7403, 8807, 8808, 8809, 8810, 8812, 8814, 8815, 8816, 8820, 9461],
    SAM: [16481, 16482, 16483, 16484, 16485, 16486, 16487, 17740, 17741, 17742, 17743, 17744, 50208, 50215, 50277, 50278, 7477, 7478, 7479, 7480, 7481, 7482, 7483, 7484, 7485, 7486, 7487, 7488, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7501, 7502, 7855, 7857, 7867, 8821, 8822, 8823, 8824, 8825, 8826, 8828, 8829, 8830, 8831, 8833],
    BRD: [10023, 114, 116, 117, 118, 13007, 14479, 16494, 16495, 16496, 17678, 17679, 17680, 17681, 17682, 17745, 17747, 3558, 3559, 3560, 3561, 3562, 4294, 50168, 50169, 50282, 50283, 50284, 50285, 50286, 50287, 7404, 7405, 7406, 7407, 7408, 7409, 8836, 8837, 8838, 8839, 8841, 8842, 8843, 8844, 9625, 106],
    MCH: [16497, 16498, 16499, 16500, 16501, 16502, 16503, 16504, 16766, 16889, 17206, 17209, 17749, 17750, 17751, 17752, 17753, 17754, 2864, 2866, 2868, 2870, 2872, 2873, 2874, 2876, 2878, 2890, 4276, 4675, 4676, 50117, 50119, 50288, 50289, 50290, 50291, 50292, 50293, 50294, 7410, 7411, 7412, 7413, 7414, 7415, 7416, 7418, 8848, 8849, 8850, 8851, 8853, 8855],
    DNC: [17756, 17757, 17758, 17759, 17760, 17761, 17762, 17763, 17764, 17765, 17766, 17767, 17768, 17769, 17770, 17771, 17772, 17773, 17824, 17825, 17826, 17827, 17828, 17829, 18076, 15989, 15990, 15993, 15997, 15999, 16000, 16001, 16002, 16003, 16191, 16192, 15991, 15994, 16007, 50252, 15995, 15992, 15996, 16008, 16010, 50251, 16015, 16012, 16006, 18073, 50253, 16011, 16009, 50254, 15998, 16004, 16193, 16194, 16195, 16196, 16013, 16005, 50255, 50256, 16014],
    BLM: [14477, 153, 154, 158, 159, 162, 16505, 16506, 16507, 17683, 17684, 17685, 17686, 17687, 17774, 17775, 3573, 3574, 3575, 3576, 3577, 4298, 50171, 50172, 50173, 50174, 50295, 50296, 50297, 50321, 50322, 7419, 7420, 7421, 7422, 8858, 8859, 8860, 8861, 8862, 8863, 8864, 8865, 8866, 8867, 8869, 9637, 149, 155, 141, 152],
    SMN: [16510, 16511, 16513, 16514, 16515, 16516, 16517, 16518, 16519, 16522, 16523, 16549, 16795, 16796, 16797, 16798, 16799, 16800, 16801, 16802, 16803, 17777, 17778, 17779, 17780, 17781, 17782, 17783, 17784, 17785, 180, 184, 3578, 3579, 3580, 3581, 3582, 4299, 50176, 50177, 50178, 50213, 50217, 50298, 50299, 50300, 50301, 50302, 7423, 7424, 7425, 7426, 7427, 7428, 7429, 7449, 7450, 787, 788, 791, 792, 794, 796, 797, 798, 800, 801, 8872, 8873, 8874, 8877, 8878, 8879, 8880, 8881, 9014, 9432],
    RDM: [10025, 16524, 16525, 16526, 16527, 16528, 16529, 16530, 17786, 17787, 17788, 50195, 50200, 50201, 50216, 50303, 50304, 50305, 50306, 7503, 7504, 7505, 7506, 7507, 7509, 7510, 7511, 7512, 7513, 7514, 7515, 7516, 7517, 7518, 7519, 7520, 7521, 7523, 7524, 7525, 7526, 7527, 7528, 7529, 7530, 8882, 8883, 8884, 8885, 8887, 8888, 8889, 8890, 8891, 8892, 9433, 9434],
    BLU: [11715, 11383, 11384, 11385, 11386, 11387, 11388, 11389, 11390, 11391, 11392, 11393, 11394, 11395, 11396, 11397, 11398, 11399, 11400, 11401, 11402, 11403, 11404, 11405, 11406, 11407, 11408, 11409, 11410, 11411, 11412, 11413, 11414, 11415, 11416, 11417, 11418, 11419, 11420, 11421, 11422, 11423, 11424, 11425, 11426, 11427, 11428, 11429, 11430, 11431, 50219, 50220, 50221, 50222, 50223, 50224]
  };
}
// EXTERNAL MODULE: ./resources/netlog_defs.ts
var netlog_defs = __webpack_require__(21);
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent.ts



const fields = {
  event: 0,
  timestamp: 1
};
const unknownLogMessagePrefix = 'Unknown';
const logMessagePrefix = {};
const logDefsGeneric = netlog_defs/* default */.Z;
for (const def of Object.values(logDefsGeneric)) {
  if (def.messageType !== undefined) logMessagePrefix[def.type] = def.messageType;
}

/**
 * Generic class to track an FFXIV log line
 */
class LineEvent {
  offset = 0;
  invalid = false;
  index = 0;
  constructor(repo, networkLine, parts) {
    this.networkLine = networkLine;
    const timestampString = parts[fields.timestamp] ?? '0';
    this.tzOffsetMillis = DateTimeFuncs.getTimezoneOffsetMillis(timestampString);
    this.decEventStr = parts[fields.event] ?? '00';
    this.decEvent = parseInt(this.decEventStr);
    this.hexEvent = stringhandlers.zeroPad(this.decEvent.toString(16).toUpperCase());
    this.timestamp = new Date(timestampString).getTime();
    this.checksum = parts.slice(-1)[0] ?? '';
    repo.updateTimestamp(this.timestamp);
    this.convertedLine = this.prefix() + parts.slice(2, -1).join(':').replace('|', ':');
  }
  prefix() {
    const timeString = DateTimeFuncs.timeToTimeString(this.timestamp, this.tzOffsetMillis, true);
    // TODO: should raidemulator not convert lines that don't come from the ffxiv plugin?
    const logMessageName = logMessagePrefix[this.decEventStr] ?? unknownLogMessagePrefix;
    return `[${timeString}] ${logMessageName} ${this.hexEvent}:`;
  }
  static isDamageHallowed(damage) {
    return (parseInt(damage, 16) & parseInt('1000', 16)) > 0;
  }
  static isDamageBig(damage) {
    return (parseInt(damage, 16) & parseInt('4000', 16)) > 0;
  }
  static calculateDamage(damage) {
    if (LineEvent.isDamageHallowed(damage)) return 0;
    damage = stringhandlers.zeroPad(damage, 8);
    const parts = [damage.slice(0, 2), damage.slice(2, 4), damage.slice(4, 6), damage.slice(6, 8)];
    if (!LineEvent.isDamageBig(damage)) return parseInt(parts.slice(0, 2).reverse().join(''), 16);
    return parseInt(parts[3] + parts[0] + (parseInt(parts[1], 16) - parseInt(parts[3], 16)).toString(16), 16);
  }
}

// Type guards for these interfaces require their own descriptor property
// because we don't want every line event with an id/name
// to update combatant state, for example
const isLineEventSource = line => {
  return 'isSource' in line;
};
const isLineEventTarget = line => {
  return 'isTarget' in line;
};
const isLineEventJobLevel = line => {
  return 'isJobLevel' in line;
};
const isLineEventAbility = line => {
  return 'isAbility' in line;
};
const isLineEvent0x03 = line => {
  return line.decEvent === 3;
};
const isLineEvent0x105 = event => {
  return event.decEvent === 261;
};
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/CombatantTracker.ts






class CombatantTracker {
  combatants = {};
  partyMembers = [];
  enemies = [];
  others = [];
  pets = [];
  constructor(logLines, language) {
    this.language = language;
    this.firstTimestamp = Number.MAX_SAFE_INTEGER;
    this.lastTimestamp = 0;
    this.initialize(logLines);
  }
  initialize(logLines) {
    this.firstTimestamp = logLines[0]?.timestamp ?? 0;
    this.lastTimestamp = logLines.slice(-1)[0]?.timestamp ?? 0;
    const eventTracker = {};
    for (const line of logLines) {
      if (isLineEventSource(line)) {
        const state = this.extractStateFromLine(line);
        this.addCombatantFromSourceLine(line, state);
        eventTracker[line.id] = eventTracker[line.id] ?? 0;
        ++eventTracker[line.id];
        this.combatants[line.id]?.pushPartialState(line.timestamp, state);
      }
      if (isLineEventTarget(line)) {
        const state = this.extractStateFromTargetLine(line);
        this.addCombatantFromTargetLine(line, state);
        eventTracker[line.targetId] = eventTracker[line.targetId] ?? 0;
        ++eventTracker[line.targetId];
        this.combatants[line.targetId]?.pushPartialState(line.timestamp, state);
      }
      if (isLineEvent0x105(line)) {
        this.addCombatantFromCombatantMemoryLine(line);
        eventTracker[line.idHex] = eventTracker[line.idHex] ?? 0;
        ++eventTracker[line.idHex];
        this.combatants[line.idHex]?.pushPartialState(line.timestamp, line.state);
      }
    }

    // Finalize combatants, cleaning up state information
    for (const combatant of Object.values(this.combatants)) combatant.finalize();

    // Figure out party/enemy/other status
    const petNames = pet_names[this.language];
    this.others = this.others.filter(ID => {
      if (this.combatants[ID]?.nextState(0).Job !== undefined && this.combatants[ID]?.nextState(0).Job !== 0 && ID.startsWith('1')) {
        this.partyMembers.push(ID);
        return false;
      } else if (petNames.includes(this.combatants[ID]?.nextState(0).Name ?? '')) {
        this.pets.push(ID);
        return false;
      } else if ((eventTracker[ID] ?? 0) > 0) {
        this.enemies.push(ID);
        return false;
      }
      return true;
    });

    // Main combatant is the one that took the most actions
    this.mainCombatantID = this.enemies.sort((l, r) => {
      return (eventTracker[r] ?? 0) - (eventTracker[l] ?? 0);
    })[0];
  }
  addCombatantFromCombatantMemoryLine(line) {
    if (this.combatants[line.idHex] === undefined) this.initCombatant(line.idHex);
  }
  addCombatantFromSourceLine(line, extractedState) {
    const combatant = this.combatants[line.id] ?? this.initCombatant(line.id);
    let initState = combatant.getTempState(this.firstTimestamp);
    const newState = new CombatantState(extractedState, initState?.targetable ?? false);
    if (line.name !== undefined) newState.setName(line.name);
    initState = combatant.pushPartialState(this.firstTimestamp, newState);
    if (isLineEventJobLevel(line)) {
      initState.Job ??= util/* default.jobToJobEnum */.Z.jobToJobEnum(line.job);
      initState.Level ??= line.level;
    }
    if (isLineEventAbility(line)) {
      if (initState.Job === undefined && !line.id.startsWith('4') && line.abilityId !== undefined) {
        const foundJob = CombatantJobSearch.getJob(line.abilityId);
        if (foundJob) initState.Job = util/* default.jobToJobEnum */.Z.jobToJobEnum(foundJob);
      }
    }
    if (isLineEvent0x03(line)) {
      if (line.npcBaseId !== undefined) initState.BNpcID = parseInt(line.npcBaseId);
      if (line.npcNameId !== undefined) initState.BNpcNameID = parseInt(line.npcNameId);
      if (line.ownerId !== undefined) initState.OwnerID = parseInt(line.ownerId);
    }
  }
  addCombatantFromTargetLine(line, extractedState) {
    const combatant = this.combatants[line.targetId] ?? this.initCombatant(line.targetId);
    let initState = combatant.getTempState(this.firstTimestamp);
    const newState = new CombatantState(extractedState, initState?.targetable ?? false);
    if (line.targetName !== undefined) newState.setName(line.targetName);
    initState = combatant.pushPartialState(this.firstTimestamp, newState);
  }
  extractStateFromLine(line) {
    const state = {};
    if (line.id !== undefined) state.ID = parseInt(line.id, 16);
    if (line.x !== undefined && !isNaN(line.x)) state.PosX = line.x;
    if (line.y !== undefined && !isNaN(line.y)) state.PosY = line.y;
    if (line.z !== undefined && !isNaN(line.z)) state.PosZ = line.z;
    if (line.heading !== undefined && !isNaN(line.heading)) state.Heading = line.heading;
    if (line.targetable !== undefined) state.targetable = line.targetable;
    if (line.hp !== undefined && !isNaN(line.hp)) state.CurrentHP = line.hp;
    if (line.maxHp !== undefined && !isNaN(line.maxHp)) state.MaxHP = line.maxHp;
    if (line.mp !== undefined && !isNaN(line.mp)) state.CurrentMP = line.mp;
    if (line.maxMp !== undefined && !isNaN(line.maxMp)) state.MaxMP = line.maxMp;
    if (line.decEvent === 4) state.targetable = false;
    return state;
  }
  extractStateFromTargetLine(line) {
    const state = {};
    if (line.targetId !== undefined) state.ID = parseInt(line.targetId, 16);
    if (line.targetX !== undefined && !isNaN(line.targetX)) state.PosX = line.targetX;
    if (line.targetY !== undefined && !isNaN(line.targetY)) state.PosY = line.targetY;
    if (line.targetZ !== undefined && !isNaN(line.targetZ)) state.PosZ = line.targetZ;
    if (line.targetHeading !== undefined && !isNaN(line.targetHeading)) state.Heading = line.targetHeading;
    if (line.targetHp !== undefined && !isNaN(line.targetHp)) state.CurrentHP = line.targetHp;
    if (line.targetMaxHp !== undefined && !isNaN(line.targetMaxHp)) state.MaxHP = line.targetMaxHp;
    if (line.targetMp !== undefined && !isNaN(line.targetMp)) state.CurrentMP = line.targetMp;
    if (line.targetMaxMp !== undefined && !isNaN(line.targetMaxMp)) state.MaxMP = line.targetMaxMp;
    return state;
  }
  initCombatant(id) {
    let combatant = this.combatants[id];
    if (combatant === undefined) {
      combatant = this.combatants[id] = new Combatant();
      this.others.push(id);
    }
    return combatant;
  }
  getMainCombatantName() {
    const defaultName = 'Unknown';
    if (this.mainCombatantID !== undefined) {
      // This gets called when persisting to indexedDB, after it has been returned from the worker
      // As such, prototypes aren't applied to combatants
      // Re-apply the prototype if needed
      const combatantObject = this.combatants[this.mainCombatantID];
      if (!combatantObject) return defaultName;
      if (Object.getPrototypeOf(combatantObject) !== Combatant.prototype) Object.setPrototypeOf(combatantObject, Combatant.prototype);
      return combatantObject.firstState.Name ?? defaultName;
    }
    return defaultName;
  }
}
;// CONCATENATED MODULE: ./node_modules/dexie/dist/modern/dexie.min.mjs
const e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,t=Object.keys,n=Array.isArray;function r(e,n){return"object"!=typeof n||t(n).forEach((function(t){e[t]=n[t]})),e}"undefined"==typeof Promise||e.Promise||(e.Promise=Promise);const s=Object.getPrototypeOf,i={}.hasOwnProperty;function o(e,t){return i.call(e,t)}function a(e,n){"function"==typeof n&&(n=n(s(e))),("undefined"==typeof Reflect?t:Reflect.ownKeys)(n).forEach((t=>{l(e,t,n[t])}))}const u=Object.defineProperty;function l(e,t,n,s){u(e,t,r(n&&o(n,"get")&&"function"==typeof n.get?{get:n.get,set:n.set,configurable:!0}:{value:n,configurable:!0,writable:!0},s))}function c(e){return{from:function(t){return e.prototype=Object.create(t.prototype),l(e.prototype,"constructor",e),{extend:a.bind(null,e.prototype)}}}}const h=Object.getOwnPropertyDescriptor;function d(e,t){let n;return h(e,t)||(n=s(e))&&d(n,t)}const f=[].slice;function p(e,t,n){return f.call(e,t,n)}function y(e,t){return t(e)}function m(e){if(!e)throw new Error("Assertion Failed")}function v(t){e.setImmediate?setImmediate(t):setTimeout(t,0)}function g(e,t){return e.reduce(((e,n,r)=>{var s=t(n,r);return s&&(e[s[0]]=s[1]),e}),{})}function b(e,t){if(o(e,t))return e[t];if(!t)return e;if("string"!=typeof t){for(var n=[],r=0,s=t.length;r<s;++r){var i=b(e,t[r]);n.push(i)}return n}var a=t.indexOf(".");if(-1!==a){var u=e[t.substr(0,a)];return void 0===u?void 0:b(u,t.substr(a+1))}}function _(e,t,r){if(e&&void 0!==t&&(!("isFrozen"in Object)||!Object.isFrozen(e)))if("string"!=typeof t&&"length"in t){m("string"!=typeof r&&"length"in r);for(var s=0,i=t.length;s<i;++s)_(e,t[s],r[s])}else{var a=t.indexOf(".");if(-1!==a){var u=t.substr(0,a),l=t.substr(a+1);if(""===l)void 0===r?n(e)&&!isNaN(parseInt(u))?e.splice(u,1):delete e[u]:e[u]=r;else{var c=e[u];c&&o(e,u)||(c=e[u]={}),_(c,l,r)}}else void 0===r?n(e)&&!isNaN(parseInt(t))?e.splice(t,1):delete e[t]:e[t]=r}}function w(e){var t={};for(var n in e)o(e,n)&&(t[n]=e[n]);return t}const x=[].concat;function k(e){return x.apply([],e)}const E="Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(k([8,16,32,64].map((e=>["Int","Uint","Float"].map((t=>t+e+"Array")))))).filter((t=>e[t])),P=E.map((t=>e[t]));g(E,(e=>[e,!0]));let K=null;function O(e){K="undefined"!=typeof WeakMap&&new WeakMap;const t=S(e);return K=null,t}function S(e){if(!e||"object"!=typeof e)return e;let t=K&&K.get(e);if(t)return t;if(n(e)){t=[],K&&K.set(e,t);for(var r=0,i=e.length;r<i;++r)t.push(S(e[r]))}else if(P.indexOf(e.constructor)>=0)t=e;else{const n=s(e);for(var a in t=n===Object.prototype?{}:Object.create(n),K&&K.set(e,t),e)o(e,a)&&(t[a]=S(e[a]))}return t}const{toString:A}={};function C(e){return A.call(e).slice(8,-1)}const j="undefined"!=typeof Symbol?Symbol.iterator:"@@iterator",D="symbol"==typeof j?function(e){var t;return null!=e&&(t=e[j])&&t.apply(e)}:function(){return null},I={};function B(e){var t,r,s,i;if(1===arguments.length){if(n(e))return e.slice();if(this===I&&"string"==typeof e)return[e];if(i=D(e)){for(r=[];!(s=i.next()).done;)r.push(s.value);return r}if(null==e)return[e];if("number"==typeof(t=e.length)){for(r=new Array(t);t--;)r[t]=e[t];return r}return[e]}for(t=arguments.length,r=new Array(t);t--;)r[t]=arguments[t];return r}const T="undefined"!=typeof Symbol?e=>"AsyncFunction"===e[Symbol.toStringTag]:()=>!1;var R="undefined"!=typeof location&&/^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);function F(e,t){R=e,M=t}var M=()=>!0;const N=!new Error("").stack;function q(){if(N)try{throw q.arguments,new Error}catch(e){return e}return new Error}function $(e,t){var n=e.stack;return n?(t=t||0,0===n.indexOf(e.name)&&(t+=(e.name+e.message).split("\n").length),n.split("\n").slice(t).filter(M).map((e=>"\n"+e)).join("")):""}var U=["Unknown","Constraint","Data","TransactionInactive","ReadOnly","Version","NotFound","InvalidState","InvalidAccess","Abort","Timeout","QuotaExceeded","Syntax","DataClone"],L=["Modify","Bulk","OpenFailed","VersionChange","Schema","Upgrade","InvalidTable","MissingAPI","NoSuchDatabase","InvalidArgument","SubTransaction","Unsupported","Internal","DatabaseClosed","PrematureCommit","ForeignAwait"].concat(U),V={VersionChanged:"Database version changed by other database connection",DatabaseClosed:"Database has been closed",Abort:"Transaction aborted",TransactionInactive:"Transaction has already completed or failed",MissingAPI:"IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"};function W(e,t){this._e=q(),this.name=e,this.message=t}function Y(e,t){return e+". Errors: "+Object.keys(t).map((e=>t[e].toString())).filter(((e,t,n)=>n.indexOf(e)===t)).join("\n")}function z(e,t,n,r){this._e=q(),this.failures=t,this.failedKeys=r,this.successCount=n,this.message=Y(e,t)}function G(e,t){this._e=q(),this.name="BulkError",this.failures=Object.keys(t).map((e=>t[e])),this.failuresByPos=t,this.message=Y(e,t)}c(W).from(Error).extend({stack:{get:function(){return this._stack||(this._stack=this.name+": "+this.message+$(this._e,2))}},toString:function(){return this.name+": "+this.message}}),c(z).from(W),c(G).from(W);var H=L.reduce(((e,t)=>(e[t]=t+"Error",e)),{});const Q=W;var X=L.reduce(((e,t)=>{var n=t+"Error";function r(e,r){this._e=q(),this.name=n,e?"string"==typeof e?(this.message=`${e}${r?"\n "+r:""}`,this.inner=r||null):"object"==typeof e&&(this.message=`${e.name} ${e.message}`,this.inner=e):(this.message=V[t]||n,this.inner=null)}return c(r).from(Q),e[t]=r,e}),{});X.Syntax=SyntaxError,X.Type=TypeError,X.Range=RangeError;var J=U.reduce(((e,t)=>(e[t+"Error"]=X[t],e)),{});var Z=L.reduce(((e,t)=>(-1===["Syntax","Type","Range"].indexOf(t)&&(e[t+"Error"]=X[t]),e)),{});function ee(){}function te(e){return e}function ne(e,t){return null==e||e===te?t:function(n){return t(e(n))}}function re(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function se(e,t){return e===ee?t:function(){var n=e.apply(this,arguments);void 0!==n&&(arguments[0]=n);var r=this.onsuccess,s=this.onerror;this.onsuccess=null,this.onerror=null;var i=t.apply(this,arguments);return r&&(this.onsuccess=this.onsuccess?re(r,this.onsuccess):r),s&&(this.onerror=this.onerror?re(s,this.onerror):s),void 0!==i?i:n}}function ie(e,t){return e===ee?t:function(){e.apply(this,arguments);var n=this.onsuccess,r=this.onerror;this.onsuccess=this.onerror=null,t.apply(this,arguments),n&&(this.onsuccess=this.onsuccess?re(n,this.onsuccess):n),r&&(this.onerror=this.onerror?re(r,this.onerror):r)}}function oe(e,t){return e===ee?t:function(n){var s=e.apply(this,arguments);r(n,s);var i=this.onsuccess,o=this.onerror;this.onsuccess=null,this.onerror=null;var a=t.apply(this,arguments);return i&&(this.onsuccess=this.onsuccess?re(i,this.onsuccess):i),o&&(this.onerror=this.onerror?re(o,this.onerror):o),void 0===s?void 0===a?void 0:a:r(s,a)}}function ae(e,t){return e===ee?t:function(){return!1!==t.apply(this,arguments)&&e.apply(this,arguments)}}function ue(e,t){return e===ee?t:function(){var n=e.apply(this,arguments);if(n&&"function"==typeof n.then){for(var r=this,s=arguments.length,i=new Array(s);s--;)i[s]=arguments[s];return n.then((function(){return t.apply(r,i)}))}return t.apply(this,arguments)}}Z.ModifyError=z,Z.DexieError=W,Z.BulkError=G;var le={};const[ce,he,de]="undefined"==typeof Promise?[]:(()=>{let e=Promise.resolve();if("undefined"==typeof crypto||!crypto.subtle)return[e,s(e),e];const t=crypto.subtle.digest("SHA-512",new Uint8Array([0]));return[t,s(t),e]})(),fe=he&&he.then,pe=ce&&ce.constructor,ye=!!de;var me=!1,ve=de?()=>{de.then(qe)}:e.setImmediate?setImmediate.bind(null,qe):e.MutationObserver?()=>{var e=document.createElement("div");new MutationObserver((()=>{qe(),e=null})).observe(e,{attributes:!0}),e.setAttribute("i","1")}:()=>{setTimeout(qe,0)},ge=function(e,t){Oe.push([e,t]),_e&&(ve(),_e=!1)},be=!0,_e=!0,we=[],xe=[],ke=null,Ee=te,Pe={id:"global",global:!0,ref:0,unhandleds:[],onunhandled:ct,pgp:!1,env:{},finalize:function(){this.unhandleds.forEach((e=>{try{ct(e[0],e[1])}catch(e){}}))}},Ke=Pe,Oe=[],Se=0,Ae=[];function Ce(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");this._listeners=[],this.onuncatched=ee,this._lib=!1;var t=this._PSD=Ke;if(R&&(this._stackHolder=q(),this._prev=null,this._numPrev=0),"function"!=typeof e){if(e!==le)throw new TypeError("Not a function");return this._state=arguments[1],this._value=arguments[2],void(!1===this._state&&Be(this,this._value))}this._state=null,this._value=null,++t.ref,Ie(this,e)}const je={get:function(){var e=Ke,t=Qe;function n(n,r){var s=!e.global&&(e!==Ke||t!==Qe);const i=s&&!et();var o=new Ce(((t,o)=>{Re(this,new De(ut(n,e,s,i),ut(r,e,s,i),t,o,e))}));return R&&Ne(o,this),o}return n.prototype=le,n},set:function(e){l(this,"then",e&&e.prototype===le?je:{get:function(){return e},set:je.set})}};function De(e,t,n,r,s){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.resolve=n,this.reject=r,this.psd=s}function Ie(e,t){try{t((t=>{if(null===e._state){if(t===e)throw new TypeError("A promise cannot be resolved with itself.");var n=e._lib&&$e();t&&"function"==typeof t.then?Ie(e,((e,n)=>{t instanceof Ce?t._then(e,n):t.then(e,n)})):(e._state=!0,e._value=t,Te(e)),n&&Ue()}}),Be.bind(null,e))}catch(t){Be(e,t)}}function Be(e,t){if(xe.push(t),null===e._state){var n=e._lib&&$e();t=Ee(t),e._state=!1,e._value=t,R&&null!==t&&"object"==typeof t&&!t._promise&&function(e,t,n){try{e.apply(null,n)}catch(e){t&&t(e)}}((()=>{var n=d(t,"stack");t._promise=e,l(t,"stack",{get:()=>me?n&&(n.get?n.get.apply(t):n.value):e.stack})})),function(e){we.some((t=>t._value===e._value))||we.push(e)}(e),Te(e),n&&Ue()}}function Te(e){var t=e._listeners;e._listeners=[];for(var n=0,r=t.length;n<r;++n)Re(e,t[n]);var s=e._PSD;--s.ref||s.finalize(),0===Se&&(++Se,ge((()=>{0==--Se&&Le()}),[]))}function Re(e,t){if(null!==e._state){var n=e._state?t.onFulfilled:t.onRejected;if(null===n)return(e._state?t.resolve:t.reject)(e._value);++t.psd.ref,++Se,ge(Fe,[n,e,t])}else e._listeners.push(t)}function Fe(e,t,n){try{ke=t;var r,s=t._value;t._state?r=e(s):(xe.length&&(xe=[]),r=e(s),-1===xe.indexOf(s)&&function(e){var t=we.length;for(;t;)if(we[--t]._value===e._value)return void we.splice(t,1)}(t)),n.resolve(r)}catch(e){n.reject(e)}finally{ke=null,0==--Se&&Le(),--n.psd.ref||n.psd.finalize()}}function Me(e,t,n){if(t.length===n)return t;var r="";if(!1===e._state){var s,i,o=e._value;null!=o?(s=o.name||"Error",i=o.message||o,r=$(o,0)):(s=o,i=""),t.push(s+(i?": "+i:"")+r)}return R&&((r=$(e._stackHolder,2))&&-1===t.indexOf(r)&&t.push(r),e._prev&&Me(e._prev,t,n)),t}function Ne(e,t){var n=t?t._numPrev+1:0;n<100&&(e._prev=t,e._numPrev=n)}function qe(){$e()&&Ue()}function $e(){var e=be;return be=!1,_e=!1,e}function Ue(){var e,t,n;do{for(;Oe.length>0;)for(e=Oe,Oe=[],n=e.length,t=0;t<n;++t){var r=e[t];r[0].apply(null,r[1])}}while(Oe.length>0);be=!0,_e=!0}function Le(){var e=we;we=[],e.forEach((e=>{e._PSD.onunhandled.call(null,e._value,e)}));for(var t=Ae.slice(0),n=t.length;n;)t[--n]()}function Ve(e){return new Ce(le,!1,e)}function We(e,t){var n=Ke;return function(){var r=$e(),s=Ke;try{return st(n,!0),e.apply(this,arguments)}catch(e){t&&t(e)}finally{st(s,!1),r&&Ue()}}}a(Ce.prototype,{then:je,_then:function(e,t){Re(this,new De(null,null,e,t,Ke))},catch:function(e){if(1===arguments.length)return this.then(null,e);var t=arguments[0],n=arguments[1];return"function"==typeof t?this.then(null,(e=>e instanceof t?n(e):Ve(e))):this.then(null,(e=>e&&e.name===t?n(e):Ve(e)))},finally:function(e){return this.then((t=>(e(),t)),(t=>(e(),Ve(t))))},stack:{get:function(){if(this._stack)return this._stack;try{me=!0;var e=Me(this,[],20).join("\nFrom previous: ");return null!==this._state&&(this._stack=e),e}finally{me=!1}}},timeout:function(e,t){return e<1/0?new Ce(((n,r)=>{var s=setTimeout((()=>r(new X.Timeout(t))),e);this.then(n,r).finally(clearTimeout.bind(null,s))})):this}}),"undefined"!=typeof Symbol&&Symbol.toStringTag&&l(Ce.prototype,Symbol.toStringTag,"Dexie.Promise"),Pe.env=it(),a(Ce,{all:function(){var e=B.apply(null,arguments).map(tt);return new Ce((function(t,n){0===e.length&&t([]);var r=e.length;e.forEach(((s,i)=>Ce.resolve(s).then((n=>{e[i]=n,--r||t(e)}),n)))}))},resolve:e=>{if(e instanceof Ce)return e;if(e&&"function"==typeof e.then)return new Ce(((t,n)=>{e.then(t,n)}));var t=new Ce(le,!0,e);return Ne(t,ke),t},reject:Ve,race:function(){var e=B.apply(null,arguments).map(tt);return new Ce(((t,n)=>{e.map((e=>Ce.resolve(e).then(t,n)))}))},PSD:{get:()=>Ke,set:e=>Ke=e},totalEchoes:{get:()=>Qe},newPSD:Je,usePSD:ot,scheduler:{get:()=>ge,set:e=>{ge=e}},rejectionMapper:{get:()=>Ee,set:e=>{Ee=e}},follow:(e,t)=>new Ce(((n,r)=>Je(((t,n)=>{var r=Ke;r.unhandleds=[],r.onunhandled=n,r.finalize=re((function(){!function(e){function t(){e(),Ae.splice(Ae.indexOf(t),1)}Ae.push(t),++Se,ge((()=>{0==--Se&&Le()}),[])}((()=>{0===this.unhandleds.length?t():n(this.unhandleds[0])}))}),r.finalize),e()}),t,n,r)))}),pe&&(pe.allSettled&&l(Ce,"allSettled",(function(){const e=B.apply(null,arguments).map(tt);return new Ce((t=>{0===e.length&&t([]);let n=e.length;const r=new Array(n);e.forEach(((e,s)=>Ce.resolve(e).then((e=>r[s]={status:"fulfilled",value:e}),(e=>r[s]={status:"rejected",reason:e})).then((()=>--n||t(r)))))}))})),pe.any&&"undefined"!=typeof AggregateError&&l(Ce,"any",(function(){const e=B.apply(null,arguments).map(tt);return new Ce(((t,n)=>{0===e.length&&n(new AggregateError([]));let r=e.length;const s=new Array(r);e.forEach(((e,i)=>Ce.resolve(e).then((e=>t(e)),(e=>{s[i]=e,--r||n(new AggregateError(s))}))))}))})));const Ye={awaits:0,echoes:0,id:0};var ze=0,Ge=[],He=0,Qe=0,Xe=0;function Je(e,t,n,s){var i=Ke,o=Object.create(i);o.parent=i,o.ref=0,o.global=!1,o.id=++Xe;var a=Pe.env;o.env=ye?{Promise:Ce,PromiseProp:{value:Ce,configurable:!0,writable:!0},all:Ce.all,race:Ce.race,allSettled:Ce.allSettled,any:Ce.any,resolve:Ce.resolve,reject:Ce.reject,nthen:lt(a.nthen,o),gthen:lt(a.gthen,o)}:{},t&&r(o,t),++i.ref,o.finalize=function(){--this.parent.ref||this.parent.finalize()};var u=ot(o,e,n,s);return 0===o.ref&&o.finalize(),u}function Ze(){return Ye.id||(Ye.id=++ze),++Ye.awaits,Ye.echoes+=100,Ye.id}function et(){return!!Ye.awaits&&(0==--Ye.awaits&&(Ye.id=0),Ye.echoes=100*Ye.awaits,!0)}function tt(e){return Ye.echoes&&e&&e.constructor===pe?(Ze(),e.then((e=>(et(),e)),(e=>(et(),ht(e))))):e}function nt(e){++Qe,Ye.echoes&&0!=--Ye.echoes||(Ye.echoes=Ye.id=0),Ge.push(Ke),st(e,!0)}function rt(){var e=Ge[Ge.length-1];Ge.pop(),st(e,!1)}function st(t,n){var r=Ke;if((n?!Ye.echoes||He++&&t===Ke:!He||--He&&t===Ke)||at(n?nt.bind(null,t):rt),t!==Ke&&(Ke=t,r===Pe&&(Pe.env=it()),ye)){var s=Pe.env.Promise,i=t.env;he.then=i.nthen,s.prototype.then=i.gthen,(r.global||t.global)&&(Object.defineProperty(e,"Promise",i.PromiseProp),s.all=i.all,s.race=i.race,s.resolve=i.resolve,s.reject=i.reject,i.allSettled&&(s.allSettled=i.allSettled),i.any&&(s.any=i.any))}}function it(){var t=e.Promise;return ye?{Promise:t,PromiseProp:Object.getOwnPropertyDescriptor(e,"Promise"),all:t.all,race:t.race,allSettled:t.allSettled,any:t.any,resolve:t.resolve,reject:t.reject,nthen:he.then,gthen:t.prototype.then}:{}}function ot(e,t,n,r,s){var i=Ke;try{return st(e,!0),t(n,r,s)}finally{st(i,!1)}}function at(e){fe.call(ce,e)}function ut(e,t,n,r){return"function"!=typeof e?e:function(){var s=Ke;n&&Ze(),st(t,!0);try{return e.apply(this,arguments)}finally{st(s,!1),r&&at(et)}}}function lt(e,t){return function(n,r){return e.call(this,ut(n,t),ut(r,t))}}-1===(""+fe).indexOf("[native code]")&&(Ze=et=ee);function ct(t,n){var s;try{s=n.onuncatched(t)}catch(e){}if(!1!==s)try{var i,o={promise:n,reason:t};if(e.document&&document.createEvent?((i=document.createEvent("Event")).initEvent("unhandledrejection",!0,!0),r(i,o)):e.CustomEvent&&r(i=new CustomEvent("unhandledrejection",{detail:o}),o),i&&e.dispatchEvent&&(dispatchEvent(i),!e.PromiseRejectionEvent&&e.onunhandledrejection))try{e.onunhandledrejection(i)}catch(e){}R&&i&&!i.defaultPrevented&&console.warn(`Unhandled rejection: ${t.stack||t}`)}catch(e){}}var ht=Ce.reject;function dt(e,t,n,r){if(e.idbdb&&(e._state.openComplete||Ke.letThrough||e._vip)){var s=e._createTransaction(t,n,e._dbSchema);try{s.create(),e._state.PR1398_maxLoop=3}catch(s){return s.name===H.InvalidState&&e.isOpen()&&--e._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),e._close(),e.open().then((()=>dt(e,t,n,r)))):ht(s)}return s._promise(t,((e,t)=>Je((()=>(Ke.trans=s,r(e,t,s)))))).then((e=>s._completion.then((()=>e))))}if(e._state.openComplete)return ht(new X.DatabaseClosed(e._state.dbOpenError));if(!e._state.isBeingOpened){if(!e._options.autoOpen)return ht(new X.DatabaseClosed);e.open().catch(ee)}return e._state.dbReadyPromise.then((()=>dt(e,t,n,r)))}const ft=String.fromCharCode(65535),pt="Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.",yt=[],mt="undefined"!=typeof navigator&&/(MSIE|Trident|Edge)/.test(navigator.userAgent),vt=mt,gt=mt,bt=e=>!/(dexie\.js|dexie\.min\.js)/.test(e);function _t(e,t){return e?t?function(){return e.apply(this,arguments)&&t.apply(this,arguments)}:e:t}const wt={type:3,lower:-1/0,lowerOpen:!1,upper:[[]],upperOpen:!1};function xt(e){return"string"!=typeof e||/\./.test(e)?e=>e:t=>(void 0===t[e]&&e in t&&delete(t=O(t))[e],t)}class kt{_trans(e,t,n){const r=this._tx||Ke.trans,s=this.name;function i(e,n,r){if(!r.schema[s])throw new X.NotFound("Table "+s+" not part of transaction");return t(r.idbtrans,r)}const o=$e();try{return r&&r.db===this.db?r===Ke.trans?r._promise(e,i,n):Je((()=>r._promise(e,i,n)),{trans:r,transless:Ke.transless||Ke}):dt(this.db,e,[this.name],i)}finally{o&&Ue()}}get(e,t){return e&&e.constructor===Object?this.where(e).first(t):this._trans("readonly",(t=>this.core.get({trans:t,key:e}).then((e=>this.hook.reading.fire(e))))).then(t)}where(e){if("string"==typeof e)return new this.db.WhereClause(this,e);if(n(e))return new this.db.WhereClause(this,`[${e.join("+")}]`);const r=t(e);if(1===r.length)return this.where(r[0]).equals(e[r[0]]);const s=this.schema.indexes.concat(this.schema.primKey).filter((e=>e.compound&&r.every((t=>e.keyPath.indexOf(t)>=0))&&e.keyPath.every((e=>r.indexOf(e)>=0))))[0];if(s&&this.db._maxKey!==ft)return this.where(s.name).equals(s.keyPath.map((t=>e[t])));!s&&R&&console.warn(`The query ${JSON.stringify(e)} on ${this.name} would benefit of a compound index [${r.join("+")}]`);const{idxByName:i}=this.schema,o=this.db._deps.indexedDB;function a(e,t){try{return 0===o.cmp(e,t)}catch(e){return!1}}const[u,l]=r.reduce((([t,r],s)=>{const o=i[s],u=e[s];return[t||o,t||!o?_t(r,o&&o.multi?e=>{const t=b(e,s);return n(t)&&t.some((e=>a(u,e)))}:e=>a(u,b(e,s))):r]}),[null,null]);return u?this.where(u.name).equals(e[u.keyPath]).filter(l):s?this.filter(l):this.where(r).equals("")}filter(e){return this.toCollection().and(e)}count(e){return this.toCollection().count(e)}offset(e){return this.toCollection().offset(e)}limit(e){return this.toCollection().limit(e)}each(e){return this.toCollection().each(e)}toArray(e){return this.toCollection().toArray(e)}toCollection(){return new this.db.Collection(new this.db.WhereClause(this))}orderBy(e){return new this.db.Collection(new this.db.WhereClause(this,n(e)?`[${e.join("+")}]`:e))}reverse(){return this.toCollection().reverse()}mapToClass(e){this.schema.mappedClass=e;const t=t=>{if(!t)return t;const n=Object.create(e.prototype);for(var r in t)if(o(t,r))try{n[r]=t[r]}catch(e){}return n};return this.schema.readHook&&this.hook.reading.unsubscribe(this.schema.readHook),this.schema.readHook=t,this.hook("reading",t),e}defineClass(){return this.mapToClass((function(e){r(this,e)}))}add(e,t){const{auto:n,keyPath:r}=this.schema.primKey;let s=e;return r&&n&&(s=xt(r)(e)),this._trans("readwrite",(e=>this.core.mutate({trans:e,type:"add",keys:null!=t?[t]:null,values:[s]}))).then((e=>e.numFailures?Ce.reject(e.failures[0]):e.lastResult)).then((t=>{if(r)try{_(e,r,t)}catch(e){}return t}))}update(e,r){if("object"!=typeof e||n(e))return this.where(":id").equals(e).modify(r);{const n=b(e,this.schema.primKey.keyPath);if(void 0===n)return ht(new X.InvalidArgument("Given object does not contain its primary key"));try{"function"!=typeof r?t(r).forEach((t=>{_(e,t,r[t])})):r(e,{value:e,primKey:n})}catch(e){}return this.where(":id").equals(n).modify(r)}}put(e,t){const{auto:n,keyPath:r}=this.schema.primKey;let s=e;return r&&n&&(s=xt(r)(e)),this._trans("readwrite",(e=>this.core.mutate({trans:e,type:"put",values:[s],keys:null!=t?[t]:null}))).then((e=>e.numFailures?Ce.reject(e.failures[0]):e.lastResult)).then((t=>{if(r)try{_(e,r,t)}catch(e){}return t}))}delete(e){return this._trans("readwrite",(t=>this.core.mutate({trans:t,type:"delete",keys:[e]}))).then((e=>e.numFailures?Ce.reject(e.failures[0]):void 0))}clear(){return this._trans("readwrite",(e=>this.core.mutate({trans:e,type:"deleteRange",range:wt}))).then((e=>e.numFailures?Ce.reject(e.failures[0]):void 0))}bulkGet(e){return this._trans("readonly",(t=>this.core.getMany({keys:e,trans:t}).then((e=>e.map((e=>this.hook.reading.fire(e)))))))}bulkAdd(e,t,n){const r=Array.isArray(t)?t:void 0,s=(n=n||(r?void 0:t))?n.allKeys:void 0;return this._trans("readwrite",(t=>{const{auto:n,keyPath:i}=this.schema.primKey;if(i&&r)throw new X.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");if(r&&r.length!==e.length)throw new X.InvalidArgument("Arguments objects and keys must have the same length");const o=e.length;let a=i&&n?e.map(xt(i)):e;return this.core.mutate({trans:t,type:"add",keys:r,values:a,wantResults:s}).then((({numFailures:e,results:t,lastResult:n,failures:r})=>{if(0===e)return s?t:n;throw new G(`${this.name}.bulkAdd(): ${e} of ${o} operations failed`,r)}))}))}bulkPut(e,t,n){const r=Array.isArray(t)?t:void 0,s=(n=n||(r?void 0:t))?n.allKeys:void 0;return this._trans("readwrite",(t=>{const{auto:n,keyPath:i}=this.schema.primKey;if(i&&r)throw new X.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");if(r&&r.length!==e.length)throw new X.InvalidArgument("Arguments objects and keys must have the same length");const o=e.length;let a=i&&n?e.map(xt(i)):e;return this.core.mutate({trans:t,type:"put",keys:r,values:a,wantResults:s}).then((({numFailures:e,results:t,lastResult:n,failures:r})=>{if(0===e)return s?t:n;throw new G(`${this.name}.bulkPut(): ${e} of ${o} operations failed`,r)}))}))}bulkDelete(e){const t=e.length;return this._trans("readwrite",(t=>this.core.mutate({trans:t,type:"delete",keys:e}))).then((({numFailures:e,lastResult:n,failures:r})=>{if(0===e)return n;throw new G(`${this.name}.bulkDelete(): ${e} of ${t} operations failed`,r)}))}}function Et(e){var r={},s=function(t,n){if(n){for(var s=arguments.length,i=new Array(s-1);--s;)i[s-1]=arguments[s];return r[t].subscribe.apply(null,i),e}if("string"==typeof t)return r[t]};s.addEventType=a;for(var i=1,o=arguments.length;i<o;++i)a(arguments[i]);return s;function a(e,t,n){if("object"==typeof e)return u(e);t||(t=ae),n||(n=ee);var i={subscribers:[],fire:n,subscribe:function(e){-1===i.subscribers.indexOf(e)&&(i.subscribers.push(e),i.fire=t(i.fire,e))},unsubscribe:function(e){i.subscribers=i.subscribers.filter((function(t){return t!==e})),i.fire=i.subscribers.reduce(t,n)}};return r[e]=s[e]=i,i}function u(e){t(e).forEach((function(t){var r=e[t];if(n(r))a(t,e[t][0],e[t][1]);else{if("asap"!==r)throw new X.InvalidArgument("Invalid event config");var s=a(t,te,(function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];s.subscribers.forEach((function(e){v((function(){e.apply(null,t)}))}))}))}}))}}function Pt(e,t){return c(t).from({prototype:e}),t}function Kt(e,t){return!(e.filter||e.algorithm||e.or)&&(t?e.justLimit:!e.replayFilter)}function Ot(e,t){e.filter=_t(e.filter,t)}function St(e,t,n){var r=e.replayFilter;e.replayFilter=r?()=>_t(r(),t()):t,e.justLimit=n&&!r}function At(e,t){if(e.isPrimKey)return t.primaryKey;const n=t.getIndexByKeyPath(e.index);if(!n)throw new X.Schema("KeyPath "+e.index+" on object store "+t.name+" is not indexed");return n}function Ct(e,t,n){const r=At(e,t.schema);return t.openCursor({trans:n,values:!e.keysOnly,reverse:"prev"===e.dir,unique:!!e.unique,query:{index:r,range:e.range}})}function jt(e,t,n,r){const s=e.replayFilter?_t(e.filter,e.replayFilter()):e.filter;if(e.or){const i={},a=(e,n,r)=>{if(!s||s(n,r,(e=>n.stop(e)),(e=>n.fail(e)))){var a=n.primaryKey,u=""+a;"[object ArrayBuffer]"===u&&(u=""+new Uint8Array(a)),o(i,u)||(i[u]=!0,t(e,n,r))}};return Promise.all([e.or._iterate(a,n),Dt(Ct(e,r,n),e.algorithm,a,!e.keysOnly&&e.valueMapper)])}return Dt(Ct(e,r,n),_t(e.algorithm,s),t,!e.keysOnly&&e.valueMapper)}function Dt(e,t,n,r){var s=We(r?(e,t,s)=>n(r(e),t,s):n);return e.then((e=>{if(e)return e.start((()=>{var n=()=>e.continue();t&&!t(e,(e=>n=e),(t=>{e.stop(t),n=ee}),(t=>{e.fail(t),n=ee}))||s(e.value,e,(e=>n=e)),n()}))}))}function It(e,t){try{const n=Bt(e),r=Bt(t);if(n!==r)return"Array"===n?1:"Array"===r?-1:"binary"===n?1:"binary"===r?-1:"string"===n?1:"string"===r?-1:"Date"===n?1:"Date"!==r?NaN:-1;switch(n){case"number":case"Date":case"string":return e>t?1:e<t?-1:0;case"binary":return function(e,t){const n=e.length,r=t.length,s=n<r?n:r;for(let n=0;n<s;++n)if(e[n]!==t[n])return e[n]<t[n]?-1:1;return n===r?0:n<r?-1:1}(Tt(e),Tt(t));case"Array":return function(e,t){const n=e.length,r=t.length,s=n<r?n:r;for(let n=0;n<s;++n){const r=It(e[n],t[n]);if(0!==r)return r}return n===r?0:n<r?-1:1}(e,t)}}catch(e){}return NaN}function Bt(e){const t=typeof e;if("object"!==t)return t;if(ArrayBuffer.isView(e))return"binary";const n=C(e);return"ArrayBuffer"===n?"binary":n}function Tt(e){return e instanceof Uint8Array?e:ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):new Uint8Array(e)}class Rt{_read(e,t){var n=this._ctx;return n.error?n.table._trans(null,ht.bind(null,n.error)):n.table._trans("readonly",e).then(t)}_write(e){var t=this._ctx;return t.error?t.table._trans(null,ht.bind(null,t.error)):t.table._trans("readwrite",e,"locked")}_addAlgorithm(e){var t=this._ctx;t.algorithm=_t(t.algorithm,e)}_iterate(e,t){return jt(this._ctx,e,t,this._ctx.table.core)}clone(e){var t=Object.create(this.constructor.prototype),n=Object.create(this._ctx);return e&&r(n,e),t._ctx=n,t}raw(){return this._ctx.valueMapper=null,this}each(e){var t=this._ctx;return this._read((n=>jt(t,e,n,t.table.core)))}count(e){return this._read((e=>{const t=this._ctx,n=t.table.core;if(Kt(t,!0))return n.count({trans:e,query:{index:At(t,n.schema),range:t.range}}).then((e=>Math.min(e,t.limit)));var r=0;return jt(t,(()=>(++r,!1)),e,n).then((()=>r))})).then(e)}sortBy(e,t){const n=e.split(".").reverse(),r=n[0],s=n.length-1;function i(e,t){return t?i(e[n[t]],t-1):e[r]}var o="next"===this._ctx.dir?1:-1;function a(e,t){var n=i(e,s),r=i(t,s);return n<r?-o:n>r?o:0}return this.toArray((function(e){return e.sort(a)})).then(t)}toArray(e){return this._read((e=>{var t=this._ctx;if("next"===t.dir&&Kt(t,!0)&&t.limit>0){const{valueMapper:n}=t,r=At(t,t.table.core.schema);return t.table.core.query({trans:e,limit:t.limit,values:!0,query:{index:r,range:t.range}}).then((({result:e})=>n?e.map(n):e))}{const n=[];return jt(t,(e=>n.push(e)),e,t.table.core).then((()=>n))}}),e)}offset(e){var t=this._ctx;return e<=0||(t.offset+=e,Kt(t)?St(t,(()=>{var t=e;return(e,n)=>0===t||(1===t?(--t,!1):(n((()=>{e.advance(t),t=0})),!1))})):St(t,(()=>{var t=e;return()=>--t<0}))),this}limit(e){return this._ctx.limit=Math.min(this._ctx.limit,e),St(this._ctx,(()=>{var t=e;return function(e,n,r){return--t<=0&&n(r),t>=0}}),!0),this}until(e,t){return Ot(this._ctx,(function(n,r,s){return!e(n.value)||(r(s),t)})),this}first(e){return this.limit(1).toArray((function(e){return e[0]})).then(e)}last(e){return this.reverse().first(e)}filter(e){var t,n;return Ot(this._ctx,(function(t){return e(t.value)})),t=this._ctx,n=e,t.isMatch=_t(t.isMatch,n),this}and(e){return this.filter(e)}or(e){return new this.db.WhereClause(this._ctx.table,e,this)}reverse(){return this._ctx.dir="prev"===this._ctx.dir?"next":"prev",this._ondirectionchange&&this._ondirectionchange(this._ctx.dir),this}desc(){return this.reverse()}eachKey(e){var t=this._ctx;return t.keysOnly=!t.isMatch,this.each((function(t,n){e(n.key,n)}))}eachUniqueKey(e){return this._ctx.unique="unique",this.eachKey(e)}eachPrimaryKey(e){var t=this._ctx;return t.keysOnly=!t.isMatch,this.each((function(t,n){e(n.primaryKey,n)}))}keys(e){var t=this._ctx;t.keysOnly=!t.isMatch;var n=[];return this.each((function(e,t){n.push(t.key)})).then((function(){return n})).then(e)}primaryKeys(e){var t=this._ctx;if("next"===t.dir&&Kt(t,!0)&&t.limit>0)return this._read((e=>{var n=At(t,t.table.core.schema);return t.table.core.query({trans:e,values:!1,limit:t.limit,query:{index:n,range:t.range}})})).then((({result:e})=>e)).then(e);t.keysOnly=!t.isMatch;var n=[];return this.each((function(e,t){n.push(t.primaryKey)})).then((function(){return n})).then(e)}uniqueKeys(e){return this._ctx.unique="unique",this.keys(e)}firstKey(e){return this.limit(1).keys((function(e){return e[0]})).then(e)}lastKey(e){return this.reverse().firstKey(e)}distinct(){var e=this._ctx,t=e.index&&e.table.schema.idxByName[e.index];if(!t||!t.multi)return this;var n={};return Ot(this._ctx,(function(e){var t=e.primaryKey.toString(),r=o(n,t);return n[t]=!0,!r})),this}modify(e){var n=this._ctx;return this._write((r=>{var s;if("function"==typeof e)s=e;else{var i=t(e),o=i.length;s=function(t){for(var n=!1,r=0;r<o;++r){var s=i[r],a=e[s];b(t,s)!==a&&(_(t,s,a),n=!0)}return n}}const a=n.table.core,{outbound:u,extractKey:l}=a.schema.primaryKey,c=this.db._options.modifyChunkSize||200,h=[];let d=0;const f=[],p=(e,n)=>{const{failures:r,numFailures:s}=n;d+=e-s;for(let e of t(r))h.push(r[e])};return this.clone().primaryKeys().then((t=>{const i=o=>{const h=Math.min(c,t.length-o);return a.getMany({trans:r,keys:t.slice(o,o+h),cache:"immutable"}).then((d=>{const f=[],y=[],m=u?[]:null,v=[];for(let e=0;e<h;++e){const n=d[e],r={value:O(n),primKey:t[o+e]};!1!==s.call(r,r.value,r)&&(null==r.value?v.push(t[o+e]):u||0===It(l(n),l(r.value))?(y.push(r.value),u&&m.push(t[o+e])):(v.push(t[o+e]),f.push(r.value)))}const g=Kt(n)&&n.limit===1/0&&("function"!=typeof e||e===Ft)&&{index:n.index,range:n.range};return Promise.resolve(f.length>0&&a.mutate({trans:r,type:"add",values:f}).then((e=>{for(let t in e.failures)v.splice(parseInt(t),1);p(f.length,e)}))).then((()=>(y.length>0||g&&"object"==typeof e)&&a.mutate({trans:r,type:"put",keys:m,values:y,criteria:g,changeSpec:"function"!=typeof e&&e}).then((e=>p(y.length,e))))).then((()=>(v.length>0||g&&e===Ft)&&a.mutate({trans:r,type:"delete",keys:v,criteria:g}).then((e=>p(v.length,e))))).then((()=>t.length>o+h&&i(o+c)))}))};return i(0).then((()=>{if(h.length>0)throw new z("Error modifying one or more objects",h,d,f);return t.length}))}))}))}delete(){var e=this._ctx,t=e.range;return Kt(e)&&(e.isPrimKey&&!gt||3===t.type)?this._write((n=>{const{primaryKey:r}=e.table.core.schema,s=t;return e.table.core.count({trans:n,query:{index:r,range:s}}).then((t=>e.table.core.mutate({trans:n,type:"deleteRange",range:s}).then((({failures:e,lastResult:n,results:r,numFailures:s})=>{if(s)throw new z("Could not delete some values",Object.keys(e).map((t=>e[t])),t-s);return t-s}))))})):this.modify(Ft)}}const Ft=(e,t)=>t.value=null;function Mt(e,t){return e<t?-1:e===t?0:1}function Nt(e,t){return e>t?-1:e===t?0:1}function qt(e,t,n){var r=e instanceof Yt?new e.Collection(e):e;return r._ctx.error=n?new n(t):new TypeError(t),r}function $t(e){return new e.Collection(e,(()=>Wt(""))).limit(0)}function Ut(e,t,n,r,s,i){for(var o=Math.min(e.length,r.length),a=-1,u=0;u<o;++u){var l=t[u];if(l!==r[u])return s(e[u],n[u])<0?e.substr(0,u)+n[u]+n.substr(u+1):s(e[u],r[u])<0?e.substr(0,u)+r[u]+n.substr(u+1):a>=0?e.substr(0,a)+t[a]+n.substr(a+1):null;s(e[u],l)<0&&(a=u)}return o<r.length&&"next"===i?e+n.substr(e.length):o<e.length&&"prev"===i?e.substr(0,n.length):a<0?null:e.substr(0,a)+r[a]+n.substr(a+1)}function Lt(e,t,n,r){var s,i,o,a,u,l,c,h=n.length;if(!n.every((e=>"string"==typeof e)))return qt(e,"String expected.");function d(e){s=function(e){return"next"===e?e=>e.toUpperCase():e=>e.toLowerCase()}(e),i=function(e){return"next"===e?e=>e.toLowerCase():e=>e.toUpperCase()}(e),o="next"===e?Mt:Nt;var t=n.map((function(e){return{lower:i(e),upper:s(e)}})).sort((function(e,t){return o(e.lower,t.lower)}));a=t.map((function(e){return e.upper})),u=t.map((function(e){return e.lower})),l=e,c="next"===e?"":r}d("next");var f=new e.Collection(e,(()=>Vt(a[0],u[h-1]+r)));f._ondirectionchange=function(e){d(e)};var p=0;return f._addAlgorithm((function(e,n,r){var s=e.key;if("string"!=typeof s)return!1;var d=i(s);if(t(d,u,p))return!0;for(var f=null,y=p;y<h;++y){var m=Ut(s,d,a[y],u[y],o,l);null===m&&null===f?p=y+1:(null===f||o(f,m)>0)&&(f=m)}return n(null!==f?function(){e.continue(f+c)}:r),!1})),f}function Vt(e,t,n,r){return{type:2,lower:e,upper:t,lowerOpen:n,upperOpen:r}}function Wt(e){return{type:1,lower:e,upper:e}}class Yt{get Collection(){return this._ctx.table.db.Collection}between(e,t,n,r){n=!1!==n,r=!0===r;try{return this._cmp(e,t)>0||0===this._cmp(e,t)&&(n||r)&&(!n||!r)?$t(this):new this.Collection(this,(()=>Vt(e,t,!n,!r)))}catch(e){return qt(this,pt)}}equals(e){return null==e?qt(this,pt):new this.Collection(this,(()=>Wt(e)))}above(e){return null==e?qt(this,pt):new this.Collection(this,(()=>Vt(e,void 0,!0)))}aboveOrEqual(e){return null==e?qt(this,pt):new this.Collection(this,(()=>Vt(e,void 0,!1)))}below(e){return null==e?qt(this,pt):new this.Collection(this,(()=>Vt(void 0,e,!1,!0)))}belowOrEqual(e){return null==e?qt(this,pt):new this.Collection(this,(()=>Vt(void 0,e)))}startsWith(e){return"string"!=typeof e?qt(this,"String expected."):this.between(e,e+ft,!0,!0)}startsWithIgnoreCase(e){return""===e?this.startsWith(e):Lt(this,((e,t)=>0===e.indexOf(t[0])),[e],ft)}equalsIgnoreCase(e){return Lt(this,((e,t)=>e===t[0]),[e],"")}anyOfIgnoreCase(){var e=B.apply(I,arguments);return 0===e.length?$t(this):Lt(this,((e,t)=>-1!==t.indexOf(e)),e,"")}startsWithAnyOfIgnoreCase(){var e=B.apply(I,arguments);return 0===e.length?$t(this):Lt(this,((e,t)=>t.some((t=>0===e.indexOf(t)))),e,ft)}anyOf(){const e=B.apply(I,arguments);let t=this._cmp;try{e.sort(t)}catch(e){return qt(this,pt)}if(0===e.length)return $t(this);const n=new this.Collection(this,(()=>Vt(e[0],e[e.length-1])));n._ondirectionchange=n=>{t="next"===n?this._ascending:this._descending,e.sort(t)};let r=0;return n._addAlgorithm(((n,s,i)=>{const o=n.key;for(;t(o,e[r])>0;)if(++r,r===e.length)return s(i),!1;return 0===t(o,e[r])||(s((()=>{n.continue(e[r])})),!1)})),n}notEqual(e){return this.inAnyRange([[-(1/0),e],[e,this.db._maxKey]],{includeLowers:!1,includeUppers:!1})}noneOf(){const e=B.apply(I,arguments);if(0===e.length)return new this.Collection(this);try{e.sort(this._ascending)}catch(e){return qt(this,pt)}const t=e.reduce(((e,t)=>e?e.concat([[e[e.length-1][1],t]]):[[-(1/0),t]]),null);return t.push([e[e.length-1],this.db._maxKey]),this.inAnyRange(t,{includeLowers:!1,includeUppers:!1})}inAnyRange(e,t){const n=this._cmp,r=this._ascending,s=this._descending,i=this._min,o=this._max;if(0===e.length)return $t(this);if(!e.every((e=>void 0!==e[0]&&void 0!==e[1]&&r(e[0],e[1])<=0)))return qt(this,"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower",X.InvalidArgument);const a=!t||!1!==t.includeLowers,u=t&&!0===t.includeUppers;let l,c=r;function h(e,t){return c(e[0],t[0])}try{l=e.reduce((function(e,t){let r=0,s=e.length;for(;r<s;++r){const s=e[r];if(n(t[0],s[1])<0&&n(t[1],s[0])>0){s[0]=i(s[0],t[0]),s[1]=o(s[1],t[1]);break}}return r===s&&e.push(t),e}),[]),l.sort(h)}catch(e){return qt(this,pt)}let d=0;const f=u?e=>r(e,l[d][1])>0:e=>r(e,l[d][1])>=0,p=a?e=>s(e,l[d][0])>0:e=>s(e,l[d][0])>=0;let y=f;const m=new this.Collection(this,(()=>Vt(l[0][0],l[l.length-1][1],!a,!u)));return m._ondirectionchange=e=>{"next"===e?(y=f,c=r):(y=p,c=s),l.sort(h)},m._addAlgorithm(((e,t,n)=>{for(var s=e.key;y(s);)if(++d,d===l.length)return t(n),!1;return!!function(e){return!f(e)&&!p(e)}(s)||(0===this._cmp(s,l[d][1])||0===this._cmp(s,l[d][0])||t((()=>{c===r?e.continue(l[d][0]):e.continue(l[d][1])})),!1)})),m}startsWithAnyOf(){const e=B.apply(I,arguments);return e.every((e=>"string"==typeof e))?0===e.length?$t(this):this.inAnyRange(e.map((e=>[e,e+ft]))):qt(this,"startsWithAnyOf() only works with strings")}}function zt(e){return We((function(t){return Gt(t),e(t.target.error),!1}))}function Gt(e){e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault()}const Ht=Et(null,"storagemutated");class Qt{_lock(){return m(!Ke.global),++this._reculock,1!==this._reculock||Ke.global||(Ke.lockOwnerFor=this),this}_unlock(){if(m(!Ke.global),0==--this._reculock)for(Ke.global||(Ke.lockOwnerFor=null);this._blockedFuncs.length>0&&!this._locked();){var e=this._blockedFuncs.shift();try{ot(e[1],e[0])}catch(e){}}return this}_locked(){return this._reculock&&Ke.lockOwnerFor!==this}create(e){if(!this.mode)return this;const t=this.db.idbdb,n=this.db._state.dbOpenError;if(m(!this.idbtrans),!e&&!t)switch(n&&n.name){case"DatabaseClosedError":throw new X.DatabaseClosed(n);case"MissingAPIError":throw new X.MissingAPI(n.message,n);default:throw new X.OpenFailed(n)}if(!this.active)throw new X.TransactionInactive;return m(null===this._completion._state),(e=this.idbtrans=e||(this.db.core?this.db.core.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}):t.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}))).onerror=We((t=>{Gt(t),this._reject(e.error)})),e.onabort=We((t=>{Gt(t),this.active&&this._reject(new X.Abort(e.error)),this.active=!1,this.on("abort").fire(t)})),e.oncomplete=We((()=>{this.active=!1,this._resolve(),"mutatedParts"in e&&Ht.storagemutated.fire(e.mutatedParts)})),this}_promise(e,t,n){if("readwrite"===e&&"readwrite"!==this.mode)return ht(new X.ReadOnly("Transaction is readonly"));if(!this.active)return ht(new X.TransactionInactive);if(this._locked())return new Ce(((r,s)=>{this._blockedFuncs.push([()=>{this._promise(e,t,n).then(r,s)},Ke])}));if(n)return Je((()=>{var e=new Ce(((e,n)=>{this._lock();const r=t(e,n,this);r&&r.then&&r.then(e,n)}));return e.finally((()=>this._unlock())),e._lib=!0,e}));var r=new Ce(((e,n)=>{var r=t(e,n,this);r&&r.then&&r.then(e,n)}));return r._lib=!0,r}_root(){return this.parent?this.parent._root():this}waitFor(e){var t=this._root();const n=Ce.resolve(e);if(t._waitingFor)t._waitingFor=t._waitingFor.then((()=>n));else{t._waitingFor=n,t._waitingQueue=[];var r=t.idbtrans.objectStore(t.storeNames[0]);!function e(){for(++t._spinCount;t._waitingQueue.length;)t._waitingQueue.shift()();t._waitingFor&&(r.get(-1/0).onsuccess=e)}()}var s=t._waitingFor;return new Ce(((e,r)=>{n.then((n=>t._waitingQueue.push(We(e.bind(null,n)))),(e=>t._waitingQueue.push(We(r.bind(null,e))))).finally((()=>{t._waitingFor===s&&(t._waitingFor=null)}))}))}abort(){this.active&&(this.active=!1,this.idbtrans&&this.idbtrans.abort(),this._reject(new X.Abort))}table(e){const t=this._memoizedTables||(this._memoizedTables={});if(o(t,e))return t[e];const n=this.schema[e];if(!n)throw new X.NotFound("Table "+e+" not part of transaction");const r=new this.db.Table(e,n,this);return r.core=this.db.core.table(e),t[e]=r,r}}function Xt(e,t,n,r,s,i,o){return{name:e,keyPath:t,unique:n,multi:r,auto:s,compound:i,src:(n&&!o?"&":"")+(r?"*":"")+(s?"++":"")+Jt(t)}}function Jt(e){return"string"==typeof e?e:e?"["+[].join.call(e,"+")+"]":""}function Zt(e,t,n){return{name:e,primKey:t,indexes:n,mappedClass:null,idxByName:g(n,(e=>[e.name,e]))}}let en=e=>{try{return e.only([[]]),en=()=>[[]],[[]]}catch(e){return en=()=>ft,ft}};function tn(e){return null==e?()=>{}:"string"==typeof e?function(e){return 1===e.split(".").length?t=>t[e]:t=>b(t,e)}(e):t=>b(t,e)}function nn(e){return[].slice.call(e)}let rn=0;function sn(e){return null==e?":id":"string"==typeof e?e:`[${e.join("+")}]`}function on(e,t,r){function s(e){if(3===e.type)return null;if(4===e.type)throw new Error("Cannot convert never type to IDBKeyRange");const{lower:n,upper:r,lowerOpen:s,upperOpen:i}=e;return void 0===n?void 0===r?null:t.upperBound(r,!!i):void 0===r?t.lowerBound(n,!!s):t.bound(n,r,!!s,!!i)}const{schema:i,hasGetAll:o}=function(e,t){const r=nn(e.objectStoreNames);return{schema:{name:e.name,tables:r.map((e=>t.objectStore(e))).map((e=>{const{keyPath:t,autoIncrement:r}=e,s=n(t),i=null==t,o={},a={name:e.name,primaryKey:{name:null,isPrimaryKey:!0,outbound:i,compound:s,keyPath:t,autoIncrement:r,unique:!0,extractKey:tn(t)},indexes:nn(e.indexNames).map((t=>e.index(t))).map((e=>{const{name:t,unique:r,multiEntry:s,keyPath:i}=e,a={name:t,compound:n(i),keyPath:i,unique:r,multiEntry:s,extractKey:tn(i)};return o[sn(i)]=a,a})),getIndexByKeyPath:e=>o[sn(e)]};return o[":id"]=a.primaryKey,null!=t&&(o[sn(t)]=a.primaryKey),a}))},hasGetAll:r.length>0&&"getAll"in t.objectStore(r[0])&&!("undefined"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604)}}(e,r),a=i.tables.map((e=>function(e){const t=e.name;return{name:t,schema:e,mutate:function({trans:e,type:n,keys:r,values:i,range:o}){return new Promise(((a,u)=>{a=We(a);const l=e.objectStore(t),c=null==l.keyPath,h="put"===n||"add"===n;if(!h&&"delete"!==n&&"deleteRange"!==n)throw new Error("Invalid operation type: "+n);const{length:d}=r||i||{length:1};if(r&&i&&r.length!==i.length)throw new Error("Given keys array must have same length as given values array.");if(0===d)return a({numFailures:0,failures:{},results:[],lastResult:void 0});let f;const p=[],y=[];let m=0;const v=e=>{++m,Gt(e)};if("deleteRange"===n){if(4===o.type)return a({numFailures:m,failures:y,results:[],lastResult:void 0});3===o.type?p.push(f=l.clear()):p.push(f=l.delete(s(o)))}else{const[e,t]=h?c?[i,r]:[i,null]:[r,null];if(h)for(let r=0;r<d;++r)p.push(f=t&&void 0!==t[r]?l[n](e[r],t[r]):l[n](e[r])),f.onerror=v;else for(let t=0;t<d;++t)p.push(f=l[n](e[t])),f.onerror=v}const g=e=>{const t=e.target.result;p.forEach(((e,t)=>null!=e.error&&(y[t]=e.error))),a({numFailures:m,failures:y,results:"delete"===n?r:p.map((e=>e.result)),lastResult:t})};f.onerror=e=>{v(e),g(e)},f.onsuccess=g}))},getMany:({trans:e,keys:n})=>new Promise(((r,s)=>{r=We(r);const i=e.objectStore(t),o=n.length,a=new Array(o);let u,l=0,c=0;const h=e=>{const t=e.target;a[t._pos]=t.result,++c===l&&r(a)},d=zt(s);for(let e=0;e<o;++e)null!=n[e]&&(u=i.get(n[e]),u._pos=e,u.onsuccess=h,u.onerror=d,++l);0===l&&r(a)})),get:({trans:e,key:n})=>new Promise(((r,s)=>{r=We(r);const i=e.objectStore(t).get(n);i.onsuccess=e=>r(e.target.result),i.onerror=zt(s)})),query:function(e){return n=>new Promise(((r,i)=>{r=We(r);const{trans:o,values:a,limit:u,query:l}=n,c=u===1/0?void 0:u,{index:h,range:d}=l,f=o.objectStore(t),p=h.isPrimaryKey?f:f.index(h.name),y=s(d);if(0===u)return r({result:[]});if(e){const e=a?p.getAll(y,c):p.getAllKeys(y,c);e.onsuccess=e=>r({result:e.target.result}),e.onerror=zt(i)}else{let e=0;const t=a||!("openKeyCursor"in p)?p.openCursor(y):p.openKeyCursor(y),n=[];t.onsuccess=s=>{const i=t.result;return i?(n.push(a?i.value:i.primaryKey),++e===u?r({result:n}):void i.continue()):r({result:n})},t.onerror=zt(i)}}))}(o),openCursor:function({trans:e,values:n,query:r,reverse:i,unique:o}){return new Promise(((a,u)=>{a=We(a);const{index:l,range:c}=r,h=e.objectStore(t),d=l.isPrimaryKey?h:h.index(l.name),f=i?o?"prevunique":"prev":o?"nextunique":"next",p=n||!("openKeyCursor"in d)?d.openCursor(s(c),f):d.openKeyCursor(s(c),f);p.onerror=zt(u),p.onsuccess=We((t=>{const n=p.result;if(!n)return void a(null);n.___id=++rn,n.done=!1;const r=n.continue.bind(n);let s=n.continuePrimaryKey;s&&(s=s.bind(n));const i=n.advance.bind(n),o=()=>{throw new Error("Cursor not stopped")};n.trans=e,n.stop=n.continue=n.continuePrimaryKey=n.advance=()=>{throw new Error("Cursor not started")},n.fail=We(u),n.next=function(){let e=1;return this.start((()=>e--?this.continue():this.stop())).then((()=>this))},n.start=e=>{const t=new Promise(((e,t)=>{e=We(e),p.onerror=zt(t),n.fail=t,n.stop=t=>{n.stop=n.continue=n.continuePrimaryKey=n.advance=o,e(t)}})),a=()=>{if(p.result)try{e()}catch(e){n.fail(e)}else n.done=!0,n.start=()=>{throw new Error("Cursor behind last entry")},n.stop()};return p.onsuccess=We((e=>{p.onsuccess=a,a()})),n.continue=r,n.continuePrimaryKey=s,n.advance=i,a(),t},a(n)}),u)}))},count({query:e,trans:n}){const{index:r,range:i}=e;return new Promise(((e,o)=>{const a=n.objectStore(t),u=r.isPrimaryKey?a:a.index(r.name),l=s(i),c=l?u.count(l):u.count();c.onsuccess=We((t=>e(t.target.result))),c.onerror=zt(o)}))}}}(e))),u={};return a.forEach((e=>u[e.name]=e)),{stack:"dbcore",transaction:e.transaction.bind(e),table(e){if(!u[e])throw new Error(`Table '${e}' not found`);return u[e]},MIN_KEY:-1/0,MAX_KEY:en(t),schema:i}}function an({_novip:e},t){const n=t.db,r=function(e,t,{IDBKeyRange:n,indexedDB:r},s){const i=function(e,t){return t.reduce(((e,{create:t})=>({...e,...t(e)})),e)}(on(t,n,s),e.dbcore);return{dbcore:i}}(e._middlewares,n,e._deps,t);e.core=r.dbcore,e.tables.forEach((t=>{const n=t.name;e.core.schema.tables.some((e=>e.name===n))&&(t.core=e.core.table(n),e[n]instanceof e.Table&&(e[n].core=t.core))}))}function un({_novip:e},t,n,r){n.forEach((n=>{const s=r[n];t.forEach((t=>{const r=d(t,n);(!r||"value"in r&&void 0===r.value)&&(t===e.Transaction.prototype||t instanceof e.Transaction?l(t,n,{get(){return this.table(n)},set(e){u(this,n,{value:e,writable:!0,configurable:!0,enumerable:!0})}}):t[n]=new e.Table(n,s))}))}))}function ln({_novip:e},t){t.forEach((t=>{for(let n in t)t[n]instanceof e.Table&&delete t[n]}))}function cn(e,t){return e._cfg.version-t._cfg.version}function hn(e,n,r,s){const i=e._dbSchema,o=e._createTransaction("readwrite",e._storeNames,i);o.create(r),o._completion.catch(s);const a=o._reject.bind(o),u=Ke.transless||Ke;Je((()=>{Ke.trans=o,Ke.transless=u,0===n?(t(i).forEach((e=>{fn(r,e,i[e].primKey,i[e].indexes)})),an(e,r),Ce.follow((()=>e.on.populate.fire(o))).catch(a)):function({_novip:e},n,r,s){const i=[],o=e._versions;let a=e._dbSchema=yn(e,e.idbdb,s),u=!1;function l(){return i.length?Ce.resolve(i.shift()(r.idbtrans)).then(l):Ce.resolve()}return o.filter((e=>e._cfg.version>=n)).forEach((o=>{i.push((()=>{const i=a,l=o._cfg.dbschema;mn(e,i,s),mn(e,l,s),a=e._dbSchema=l;const c=dn(i,l);c.add.forEach((e=>{fn(s,e[0],e[1].primKey,e[1].indexes)})),c.change.forEach((e=>{if(e.recreate)throw new X.Upgrade("Not yet support for changing primary key");{const t=s.objectStore(e.name);e.add.forEach((e=>pn(t,e))),e.change.forEach((e=>{t.deleteIndex(e.name),pn(t,e)})),e.del.forEach((e=>t.deleteIndex(e)))}}));const h=o._cfg.contentUpgrade;if(h&&o._cfg.version>n){an(e,s),r._memoizedTables={},u=!0;let n=w(l);c.del.forEach((e=>{n[e]=i[e]})),ln(e,[e.Transaction.prototype]),un(e,[e.Transaction.prototype],t(n),n),r.schema=n;const o=T(h);let a;o&&Ze();const d=Ce.follow((()=>{if(a=h(r),a&&o){var e=et.bind(null,null);a.then(e,e)}}));return a&&"function"==typeof a.then?Ce.resolve(a):d.then((()=>a))}})),i.push((t=>{if(!u||!vt){!function(e,t){[].slice.call(t.db.objectStoreNames).forEach((n=>null==e[n]&&t.db.deleteObjectStore(n)))}(o._cfg.dbschema,t)}ln(e,[e.Transaction.prototype]),un(e,[e.Transaction.prototype],e._storeNames,e._dbSchema),r.schema=e._dbSchema}))})),l().then((()=>{var e,n;n=s,t(e=a).forEach((t=>{n.db.objectStoreNames.contains(t)||fn(n,t,e[t].primKey,e[t].indexes)}))}))}(e,n,o,r).catch(a)}))}function dn(e,t){const n={del:[],add:[],change:[]};let r;for(r in e)t[r]||n.del.push(r);for(r in t){const s=e[r],i=t[r];if(s){const e={name:r,def:i,recreate:!1,del:[],add:[],change:[]};if(""+(s.primKey.keyPath||"")!=""+(i.primKey.keyPath||"")||s.primKey.auto!==i.primKey.auto&&!mt)e.recreate=!0,n.change.push(e);else{const t=s.idxByName,r=i.idxByName;let o;for(o in t)r[o]||e.del.push(o);for(o in r){const n=t[o],s=r[o];n?n.src!==s.src&&e.change.push(s):e.add.push(s)}(e.del.length>0||e.add.length>0||e.change.length>0)&&n.change.push(e)}}else n.add.push([r,i])}return n}function fn(e,t,n,r){const s=e.db.createObjectStore(t,n.keyPath?{keyPath:n.keyPath,autoIncrement:n.auto}:{autoIncrement:n.auto});return r.forEach((e=>pn(s,e))),s}function pn(e,t){e.createIndex(t.name,t.keyPath,{unique:t.unique,multiEntry:t.multi})}function yn(e,t,n){const r={};return p(t.objectStoreNames,0).forEach((e=>{const t=n.objectStore(e);let s=t.keyPath;const i=Xt(Jt(s),s||"",!1,!1,!!t.autoIncrement,s&&"string"!=typeof s,!0),o=[];for(let e=0;e<t.indexNames.length;++e){const n=t.index(t.indexNames[e]);s=n.keyPath;var a=Xt(n.name,s,!!n.unique,!!n.multiEntry,!1,s&&"string"!=typeof s,!1);o.push(a)}r[e]=Zt(e,i,o)})),r}function mn({_novip:t},n,r){const s=r.db.objectStoreNames;for(let e=0;e<s.length;++e){const i=s[e],o=r.objectStore(i);t._hasGetAll="getAll"in o;for(let e=0;e<o.indexNames.length;++e){const t=o.indexNames[e],r=o.index(t).keyPath,s="string"==typeof r?r:"["+p(r).join("+")+"]";if(n[i]){const e=n[i].idxByName[s];e&&(e.name=t,delete n[i].idxByName[s],n[i].idxByName[t]=e)}}}"undefined"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&e.WorkerGlobalScope&&e instanceof e.WorkerGlobalScope&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604&&(t._hasGetAll=!1)}class vn{_parseStoresSpec(e,r){t(e).forEach((t=>{if(null!==e[t]){var s=e[t].split(",").map(((e,t)=>{const r=(e=e.trim()).replace(/([&*]|\+\+)/g,""),s=/^\[/.test(r)?r.match(/^\[(.*)\]$/)[1].split("+"):r;return Xt(r,s||null,/\&/.test(e),/\*/.test(e),/\+\+/.test(e),n(s),0===t)})),i=s.shift();if(i.multi)throw new X.Schema("Primary key cannot be multi-valued");s.forEach((e=>{if(e.auto)throw new X.Schema("Only primary key can be marked as autoIncrement (++)");if(!e.keyPath)throw new X.Schema("Index must have a name and cannot be an empty string")})),r[t]=Zt(t,i,s)}}))}stores(e){const n=this.db;this._cfg.storesSource=this._cfg.storesSource?r(this._cfg.storesSource,e):e;const s=n._versions,i={};let o={};return s.forEach((e=>{r(i,e._cfg.storesSource),o=e._cfg.dbschema={},e._parseStoresSpec(i,o)})),n._dbSchema=o,ln(n,[n._allTables,n,n.Transaction.prototype]),un(n,[n._allTables,n,n.Transaction.prototype,this._cfg.tables],t(o),o),n._storeNames=t(o),this}upgrade(e){return this._cfg.contentUpgrade=ue(this._cfg.contentUpgrade||ee,e),this}}function gn(e,t){let n=e._dbNamesDB;return n||(n=e._dbNamesDB=new $n("__dbnames",{addons:[],indexedDB:e,IDBKeyRange:t}),n.version(1).stores({dbnames:"name"})),n.table("dbnames")}function bn(e){return e&&"function"==typeof e.databases}function _n(e){return Je((function(){return Ke.letThrough=!0,e()}))}function wn(){var e;return!navigator.userAgentData&&/Safari\//.test(navigator.userAgent)&&!/Chrom(e|ium)\//.test(navigator.userAgent)&&indexedDB.databases?new Promise((function(t){var n=function(){return indexedDB.databases().finally(t)};e=setInterval(n,100),n()})).finally((function(){return clearInterval(e)})):Promise.resolve()}function xn(e){const n=e._state,{indexedDB:r}=e._deps;if(n.isBeingOpened||e.idbdb)return n.dbReadyPromise.then((()=>n.dbOpenError?ht(n.dbOpenError):e));R&&(n.openCanceller._stackHolder=q()),n.isBeingOpened=!0,n.dbOpenError=null,n.openComplete=!1;const s=n.openCanceller;function i(){if(n.openCanceller!==s)throw new X.DatabaseClosed("db.open() was cancelled")}let o=n.dbReadyResolve,a=null,u=!1;return Ce.race([s,("undefined"==typeof navigator?Ce.resolve():wn()).then((()=>new Ce(((s,o)=>{if(i(),!r)throw new X.MissingAPI;const l=e.name,c=n.autoSchema?r.open(l):r.open(l,Math.round(10*e.verno));if(!c)throw new X.MissingAPI;c.onerror=zt(o),c.onblocked=We(e._fireOnBlocked),c.onupgradeneeded=We((t=>{if(a=c.transaction,n.autoSchema&&!e._options.allowEmptyDB){c.onerror=Gt,a.abort(),c.result.close();const e=r.deleteDatabase(l);e.onsuccess=e.onerror=We((()=>{o(new X.NoSuchDatabase(`Database ${l} doesnt exist`))}))}else{a.onerror=zt(o);var s=t.oldVersion>Math.pow(2,62)?0:t.oldVersion;u=s<1,e._novip.idbdb=c.result,hn(e,s/10,a,o)}}),o),c.onsuccess=We((()=>{a=null;const r=e._novip.idbdb=c.result,i=p(r.objectStoreNames);if(i.length>0)try{const s=r.transaction(1===(o=i).length?o[0]:o,"readonly");n.autoSchema?function({_novip:e},n,r){e.verno=n.version/10;const s=e._dbSchema=yn(0,n,r);e._storeNames=p(n.objectStoreNames,0),un(e,[e._allTables],t(s),s)}(e,r,s):(mn(e,e._dbSchema,s),function(e,t){const n=dn(yn(0,e.idbdb,t),e._dbSchema);return!(n.add.length||n.change.some((e=>e.add.length||e.change.length)))}(e,s)||console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.")),an(e,s)}catch(e){}var o;yt.push(e),r.onversionchange=We((t=>{n.vcFired=!0,e.on("versionchange").fire(t)})),r.onclose=We((t=>{e.on("close").fire(t)})),u&&function({indexedDB:e,IDBKeyRange:t},n){!bn(e)&&"__dbnames"!==n&&gn(e,t).put({name:n}).catch(ee)}(e._deps,l),s()}),o)}))))]).then((()=>(i(),n.onReadyBeingFired=[],Ce.resolve(_n((()=>e.on.ready.fire(e.vip)))).then((function t(){if(n.onReadyBeingFired.length>0){let r=n.onReadyBeingFired.reduce(ue,ee);return n.onReadyBeingFired=[],Ce.resolve(_n((()=>r(e.vip)))).then(t)}}))))).finally((()=>{n.onReadyBeingFired=null,n.isBeingOpened=!1})).then((()=>e)).catch((t=>{n.dbOpenError=t;try{a&&a.abort()}catch(e){}return s===n.openCanceller&&e._close(),ht(t)})).finally((()=>{n.openComplete=!0,o()}))}function kn(e){var t=t=>e.next(t),r=i(t),s=i((t=>e.throw(t)));function i(e){return t=>{var i=e(t),o=i.value;return i.done?o:o&&"function"==typeof o.then?o.then(r,s):n(o)?Promise.all(o).then(r,s):r(o)}}return i(t)()}function En(e,t,n){var r=arguments.length;if(r<2)throw new X.InvalidArgument("Too few arguments");for(var s=new Array(r-1);--r;)s[r-1]=arguments[r];n=s.pop();var i=k(s);return[e,i,n]}function Pn(e,t,n,r,s){return Ce.resolve().then((()=>{const i=Ke.transless||Ke,o=e._createTransaction(t,n,e._dbSchema,r),a={trans:o,transless:i};if(r)o.idbtrans=r.idbtrans;else try{o.create(),e._state.PR1398_maxLoop=3}catch(r){return r.name===H.InvalidState&&e.isOpen()&&--e._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),e._close(),e.open().then((()=>Pn(e,t,n,null,s)))):ht(r)}const u=T(s);let l;u&&Ze();const c=Ce.follow((()=>{if(l=s.call(o,o),l)if(u){var e=et.bind(null,null);l.then(e,e)}else"function"==typeof l.next&&"function"==typeof l.throw&&(l=kn(l))}),a);return(l&&"function"==typeof l.then?Ce.resolve(l).then((e=>o.active?e:ht(new X.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn")))):c.then((()=>l))).then((e=>(r&&o._resolve(),o._completion.then((()=>e))))).catch((e=>(o._reject(e),ht(e))))}))}function Kn(e,t,r){const s=n(e)?e.slice():[e];for(let e=0;e<r;++e)s.push(t);return s}const On={stack:"dbcore",name:"VirtualIndexMiddleware",level:1,create:function(e){return{...e,table(t){const n=e.table(t),{schema:r}=n,s={},i=[];function o(e,t,n){const r=sn(e),a=s[r]=s[r]||[],u=null==e?0:"string"==typeof e?1:e.length,l=t>0,c={...n,isVirtual:l,keyTail:t,keyLength:u,extractKey:tn(e),unique:!l&&n.unique};if(a.push(c),c.isPrimaryKey||i.push(c),u>1){o(2===u?e[0]:e.slice(0,u-1),t+1,n)}return a.sort(((e,t)=>e.keyTail-t.keyTail)),c}const a=o(r.primaryKey.keyPath,0,r.primaryKey);s[":id"]=[a];for(const e of r.indexes)o(e.keyPath,0,e);function u(t){const n=t.query.index;return n.isVirtual?{...t,query:{index:n,range:(r=t.query.range,s=n.keyTail,{type:1===r.type?2:r.type,lower:Kn(r.lower,r.lowerOpen?e.MAX_KEY:e.MIN_KEY,s),lowerOpen:!0,upper:Kn(r.upper,r.upperOpen?e.MIN_KEY:e.MAX_KEY,s),upperOpen:!0})}}:t;var r,s}const l={...n,schema:{...r,primaryKey:a,indexes:i,getIndexByKeyPath:function(e){const t=s[sn(e)];return t&&t[0]}},count:e=>n.count(u(e)),query:e=>n.query(u(e)),openCursor(t){const{keyTail:r,isVirtual:s,keyLength:i}=t.query.index;if(!s)return n.openCursor(t);return n.openCursor(u(t)).then((n=>n&&function(n){const s=Object.create(n,{continue:{value:function(s){null!=s?n.continue(Kn(s,t.reverse?e.MAX_KEY:e.MIN_KEY,r)):t.unique?n.continue(n.key.slice(0,i).concat(t.reverse?e.MIN_KEY:e.MAX_KEY,r)):n.continue()}},continuePrimaryKey:{value(t,s){n.continuePrimaryKey(Kn(t,e.MAX_KEY,r),s)}},primaryKey:{get:()=>n.primaryKey},key:{get(){const e=n.key;return 1===i?e[0]:e.slice(0,i)}},value:{get:()=>n.value}});return s}(n)))}};return l}}}};function Sn(e,n,r,s){return r=r||{},s=s||"",t(e).forEach((t=>{if(o(n,t)){var i=e[t],a=n[t];if("object"==typeof i&&"object"==typeof a&&i&&a){const e=C(i);e!==C(a)?r[s+t]=n[t]:"Object"===e?Sn(i,a,r,s+t+"."):i!==a&&(r[s+t]=n[t])}else i!==a&&(r[s+t]=n[t])}else r[s+t]=void 0})),t(n).forEach((t=>{o(e,t)||(r[s+t]=n[t])})),r}const An={stack:"dbcore",name:"HooksMiddleware",level:2,create:e=>({...e,table(t){const n=e.table(t),{primaryKey:r}=n.schema,s={...n,mutate(e){const s=Ke.trans,{deleting:i,creating:a,updating:u}=s.table(t).hook;switch(e.type){case"add":if(a.fire===ee)break;return s._promise("readwrite",(()=>l(e)),!0);case"put":if(a.fire===ee&&u.fire===ee)break;return s._promise("readwrite",(()=>l(e)),!0);case"delete":if(i.fire===ee)break;return s._promise("readwrite",(()=>l(e)),!0);case"deleteRange":if(i.fire===ee)break;return s._promise("readwrite",(()=>function(e){return c(e.trans,e.range,1e4)}(e)),!0)}return n.mutate(e);function l(e){const t=Ke.trans,s=e.keys||function(e,t){return"delete"===t.type?t.keys:t.keys||t.values.map(e.extractKey)}(r,e);if(!s)throw new Error("Keys missing");return"delete"!==(e="add"===e.type||"put"===e.type?{...e,keys:s}:{...e}).type&&(e.values=[...e.values]),e.keys&&(e.keys=[...e.keys]),function(e,t,n){return"add"===t.type?Promise.resolve([]):e.getMany({trans:t.trans,keys:n,cache:"immutable"})}(n,e,s).then((l=>{const c=s.map(((n,s)=>{const c=l[s],h={onerror:null,onsuccess:null};if("delete"===e.type)i.fire.call(h,n,c,t);else if("add"===e.type||void 0===c){const i=a.fire.call(h,n,e.values[s],t);null==n&&null!=i&&(n=i,e.keys[s]=n,r.outbound||_(e.values[s],r.keyPath,n))}else{const r=Sn(c,e.values[s]),i=u.fire.call(h,r,n,c,t);if(i){const t=e.values[s];Object.keys(i).forEach((e=>{o(t,e)?t[e]=i[e]:_(t,e,i[e])}))}}return h}));return n.mutate(e).then((({failures:t,results:n,numFailures:r,lastResult:i})=>{for(let r=0;r<s.length;++r){const i=n?n[r]:s[r],o=c[r];null==i?o.onerror&&o.onerror(t[r]):o.onsuccess&&o.onsuccess("put"===e.type&&l[r]?e.values[r]:i)}return{failures:t,results:n,numFailures:r,lastResult:i}})).catch((e=>(c.forEach((t=>t.onerror&&t.onerror(e))),Promise.reject(e))))}))}function c(e,t,s){return n.query({trans:e,values:!1,query:{index:r,range:t},limit:s}).then((({result:n})=>l({type:"delete",keys:n,trans:e}).then((r=>r.numFailures>0?Promise.reject(r.failures[0]):n.length<s?{failures:[],numFailures:0,lastResult:void 0}:c(e,{...t,lower:n[n.length-1],lowerOpen:!0},s)))))}}};return s}})};function Cn(e,t,n){try{if(!t)return null;if(t.keys.length<e.length)return null;const r=[];for(let s=0,i=0;s<t.keys.length&&i<e.length;++s)0===It(t.keys[s],e[i])&&(r.push(n?O(t.values[s]):t.values[s]),++i);return r.length===e.length?r:null}catch(e){return null}}const jn={stack:"dbcore",level:-1,create:e=>({table:t=>{const n=e.table(t);return{...n,getMany:e=>{if(!e.cache)return n.getMany(e);const t=Cn(e.keys,e.trans._cache,"clone"===e.cache);return t?Ce.resolve(t):n.getMany(e).then((t=>(e.trans._cache={keys:e.keys,values:"clone"===e.cache?O(t):t},t)))},mutate:e=>("add"!==e.type&&(e.trans._cache=null),n.mutate(e))}}})};function Dn(e){return!("from"in e)}const In=function(e,t){if(!this){const t=new In;return e&&"d"in e&&r(t,e),t}r(this,arguments.length?{d:1,from:e,to:arguments.length>1?t:e}:{d:0})};function Bn(e,t,n){const s=It(t,n);if(isNaN(s))return;if(s>0)throw RangeError();if(Dn(e))return r(e,{from:t,to:n,d:1});const i=e.l,o=e.r;if(It(n,e.from)<0)return i?Bn(i,t,n):e.l={from:t,to:n,d:1,l:null,r:null},Mn(e);if(It(t,e.to)>0)return o?Bn(o,t,n):e.r={from:t,to:n,d:1,l:null,r:null},Mn(e);It(t,e.from)<0&&(e.from=t,e.l=null,e.d=o?o.d+1:1),It(n,e.to)>0&&(e.to=n,e.r=null,e.d=e.l?e.l.d+1:1);const a=!e.r;i&&!e.l&&Tn(e,i),o&&a&&Tn(e,o)}function Tn(e,t){Dn(t)||function e(t,{from:n,to:r,l:s,r:i}){Bn(t,n,r),s&&e(t,s),i&&e(t,i)}(e,t)}function Rn(e,t){const n=Fn(t);let r=n.next();if(r.done)return!1;let s=r.value;const i=Fn(e);let o=i.next(s.from),a=o.value;for(;!r.done&&!o.done;){if(It(a.from,s.to)<=0&&It(a.to,s.from)>=0)return!0;It(s.from,a.from)<0?s=(r=n.next(a.from)).value:a=(o=i.next(s.from)).value}return!1}function Fn(e){let t=Dn(e)?null:{s:0,n:e};return{next(e){const n=arguments.length>0;for(;t;)switch(t.s){case 0:if(t.s=1,n)for(;t.n.l&&It(e,t.n.from)<0;)t={up:t,n:t.n.l,s:1};else for(;t.n.l;)t={up:t,n:t.n.l,s:1};case 1:if(t.s=2,!n||It(e,t.n.to)<=0)return{value:t.n,done:!1};case 2:if(t.n.r){t.s=3,t={up:t,n:t.n.r,s:0};continue}case 3:t=t.up}return{done:!0}}}}function Mn(e){var t,n;const r=((null===(t=e.r)||void 0===t?void 0:t.d)||0)-((null===(n=e.l)||void 0===n?void 0:n.d)||0),s=r>1?"r":r<-1?"l":"";if(s){const t="r"===s?"l":"r",n={...e},r=e[s];e.from=r.from,e.to=r.to,e[s]=r[s],n[s]=r[t],e[t]=n,n.d=Nn(n)}e.d=Nn(e)}function Nn({r:e,l:t}){return(e?t?Math.max(e.d,t.d):e.d:t?t.d:0)+1}a(In.prototype,{add(e){return Tn(this,e),this},addKey(e){return Bn(this,e,e),this},addKeys(e){return e.forEach((e=>Bn(this,e,e))),this},[j](){return Fn(this)}});const qn={stack:"dbcore",level:0,create:e=>{const r=e.schema.name,s=new In(e.MIN_KEY,e.MAX_KEY);return{...e,table:i=>{const o=e.table(i),{schema:a}=o,{primaryKey:u}=a,{extractKey:l,outbound:c}=u,h={...o,mutate:e=>{const t=e.trans,u=t.mutatedParts||(t.mutatedParts={}),l=e=>{const t=`idb://${r}/${i}/${e}`;return u[t]||(u[t]=new In)},c=l(""),h=l(":dels"),{type:d}=e;let[f,p]="deleteRange"===e.type?[e.range]:"delete"===e.type?[e.keys]:e.values.length<50?[[],e.values]:[];const y=e.trans._cache;return o.mutate(e).then((e=>{if(n(f)){"delete"!==d&&(f=e.results),c.addKeys(f);const t=Cn(f,y);t||"add"===d||h.addKeys(f),(t||p)&&function(e,t,r,s){function i(t){const i=e(t.name||"");function o(e){return null!=e?t.extractKey(e):null}const a=e=>t.multiEntry&&n(e)?e.forEach((e=>i.addKey(e))):i.addKey(e);(r||s).forEach(((e,t)=>{const n=r&&o(r[t]),i=s&&o(s[t]);0!==It(n,i)&&(null!=n&&a(n),null!=i&&a(i))}))}t.indexes.forEach(i)}(l,a,t,p)}else if(f){const e={from:f.lower,to:f.upper};h.add(e),c.add(e)}else c.add(s),h.add(s),a.indexes.forEach((e=>l(e.name).add(s)));return e}))}},d=({query:{index:t,range:n}})=>{var r,s;return[t,new In(null!==(r=n.lower)&&void 0!==r?r:e.MIN_KEY,null!==(s=n.upper)&&void 0!==s?s:e.MAX_KEY)]},f={get:e=>[u,new In(e.key)],getMany:e=>[u,(new In).addKeys(e.keys)],count:d,query:d,openCursor:d};return t(f).forEach((e=>{h[e]=function(t){const{subscr:n}=Ke;if(n){const a=e=>{const t=`idb://${r}/${i}/${e}`;return n[t]||(n[t]=new In)},u=a(""),h=a(":dels"),[d,p]=f[e](t);if(a(d.name||"").add(p),!d.isPrimaryKey){if("count"!==e){const n="query"===e&&c&&t.values&&o.query({...t,values:!1});return o[e].apply(this,arguments).then((r=>{if("query"===e){if(c&&t.values)return n.then((({result:e})=>(u.addKeys(e),r)));const e=t.values?r.result.map(l):r.result;t.values?u.addKeys(e):h.addKeys(e)}else if("openCursor"===e){const e=r,n=t.values;return e&&Object.create(e,{key:{get:()=>(h.addKey(e.primaryKey),e.key)},primaryKey:{get(){const t=e.primaryKey;return h.addKey(t),t}},value:{get:()=>(n&&u.addKey(e.primaryKey),e.value)}})}return r}))}h.add(s)}}return o[e].apply(this,arguments)}})),h}}}};class $n{constructor(e,t){this._middlewares={},this.verno=0;const n=$n.dependencies;this._options=t={addons:$n.addons,autoOpen:!0,indexedDB:n.indexedDB,IDBKeyRange:n.IDBKeyRange,...t},this._deps={indexedDB:t.indexedDB,IDBKeyRange:t.IDBKeyRange};const{addons:r}=t;this._dbSchema={},this._versions=[],this._storeNames=[],this._allTables={},this.idbdb=null,this._novip=this;const s={dbOpenError:null,isBeingOpened:!1,onReadyBeingFired:null,openComplete:!1,dbReadyResolve:ee,dbReadyPromise:null,cancelOpen:ee,openCanceller:null,autoSchema:!0,PR1398_maxLoop:3};var i;s.dbReadyPromise=new Ce((e=>{s.dbReadyResolve=e})),s.openCanceller=new Ce(((e,t)=>{s.cancelOpen=t})),this._state=s,this.name=e,this.on=Et(this,"populate","blocked","versionchange","close",{ready:[ue,ee]}),this.on.ready.subscribe=y(this.on.ready.subscribe,(e=>(t,n)=>{$n.vip((()=>{const r=this._state;if(r.openComplete)r.dbOpenError||Ce.resolve().then(t),n&&e(t);else if(r.onReadyBeingFired)r.onReadyBeingFired.push(t),n&&e(t);else{e(t);const r=this;n||e((function e(){r.on.ready.unsubscribe(t),r.on.ready.unsubscribe(e)}))}}))})),this.Collection=(i=this,Pt(Rt.prototype,(function(e,t){this.db=i;let n=wt,r=null;if(t)try{n=t()}catch(e){r=e}const s=e._ctx,o=s.table,a=o.hook.reading.fire;this._ctx={table:o,index:s.index,isPrimKey:!s.index||o.schema.primKey.keyPath&&s.index===o.schema.primKey.name,range:n,keysOnly:!1,dir:"next",unique:"",algorithm:null,filter:null,replayFilter:null,justLimit:!0,isMatch:null,offset:0,limit:1/0,error:r,or:s.or,valueMapper:a!==te?a:null}}))),this.Table=function(e){return Pt(kt.prototype,(function(t,n,r){this.db=e,this._tx=r,this.name=t,this.schema=n,this.hook=e._allTables[t]?e._allTables[t].hook:Et(null,{creating:[se,ee],reading:[ne,te],updating:[oe,ee],deleting:[ie,ee]})}))}(this),this.Transaction=function(e){return Pt(Qt.prototype,(function(t,n,r,s,i){this.db=e,this.mode=t,this.storeNames=n,this.schema=r,this.chromeTransactionDurability=s,this.idbtrans=null,this.on=Et(this,"complete","error","abort"),this.parent=i||null,this.active=!0,this._reculock=0,this._blockedFuncs=[],this._resolve=null,this._reject=null,this._waitingFor=null,this._waitingQueue=null,this._spinCount=0,this._completion=new Ce(((e,t)=>{this._resolve=e,this._reject=t})),this._completion.then((()=>{this.active=!1,this.on.complete.fire()}),(e=>{var t=this.active;return this.active=!1,this.on.error.fire(e),this.parent?this.parent._reject(e):t&&this.idbtrans&&this.idbtrans.abort(),ht(e)}))}))}(this),this.Version=function(e){return Pt(vn.prototype,(function(t){this.db=e,this._cfg={version:t,storesSource:null,dbschema:{},tables:{},contentUpgrade:null}}))}(this),this.WhereClause=function(e){return Pt(Yt.prototype,(function(t,n,r){this.db=e,this._ctx={table:t,index:":id"===n?null:n,or:r};const s=e._deps.indexedDB;if(!s)throw new X.MissingAPI;this._cmp=this._ascending=s.cmp.bind(s),this._descending=(e,t)=>s.cmp(t,e),this._max=(e,t)=>s.cmp(e,t)>0?e:t,this._min=(e,t)=>s.cmp(e,t)<0?e:t,this._IDBKeyRange=e._deps.IDBKeyRange}))}(this),this.on("versionchange",(e=>{e.newVersion>0?console.warn(`Another connection wants to upgrade database '${this.name}'. Closing db now to resume the upgrade.`):console.warn(`Another connection wants to delete database '${this.name}'. Closing db now to resume the delete request.`),this.close()})),this.on("blocked",(e=>{!e.newVersion||e.newVersion<e.oldVersion?console.warn(`Dexie.delete('${this.name}') was blocked`):console.warn(`Upgrade '${this.name}' blocked by other connection holding version ${e.oldVersion/10}`)})),this._maxKey=en(t.IDBKeyRange),this._createTransaction=(e,t,n,r)=>new this.Transaction(e,t,n,this._options.chromeTransactionDurability,r),this._fireOnBlocked=e=>{this.on("blocked").fire(e),yt.filter((e=>e.name===this.name&&e!==this&&!e._state.vcFired)).map((t=>t.on("versionchange").fire(e)))},this.use(On),this.use(An),this.use(qn),this.use(jn),this.vip=Object.create(this,{_vip:{value:!0}}),r.forEach((e=>e(this)))}version(e){if(isNaN(e)||e<.1)throw new X.Type("Given version is not a positive number");if(e=Math.round(10*e)/10,this.idbdb||this._state.isBeingOpened)throw new X.Schema("Cannot add version when database is open");this.verno=Math.max(this.verno,e);const t=this._versions;var n=t.filter((t=>t._cfg.version===e))[0];return n||(n=new this.Version(e),t.push(n),t.sort(cn),n.stores({}),this._state.autoSchema=!1,n)}_whenReady(e){return this.idbdb&&(this._state.openComplete||Ke.letThrough||this._vip)?e():new Ce(((e,t)=>{if(this._state.openComplete)return t(new X.DatabaseClosed(this._state.dbOpenError));if(!this._state.isBeingOpened){if(!this._options.autoOpen)return void t(new X.DatabaseClosed);this.open().catch(ee)}this._state.dbReadyPromise.then(e,t)})).then(e)}use({stack:e,create:t,level:n,name:r}){r&&this.unuse({stack:e,name:r});const s=this._middlewares[e]||(this._middlewares[e]=[]);return s.push({stack:e,create:t,level:null==n?10:n,name:r}),s.sort(((e,t)=>e.level-t.level)),this}unuse({stack:e,name:t,create:n}){return e&&this._middlewares[e]&&(this._middlewares[e]=this._middlewares[e].filter((e=>n?e.create!==n:!!t&&e.name!==t))),this}open(){return xn(this)}_close(){const e=this._state,t=yt.indexOf(this);if(t>=0&&yt.splice(t,1),this.idbdb){try{this.idbdb.close()}catch(e){}this._novip.idbdb=null}e.dbReadyPromise=new Ce((t=>{e.dbReadyResolve=t})),e.openCanceller=new Ce(((t,n)=>{e.cancelOpen=n}))}close(){this._close();const e=this._state;this._options.autoOpen=!1,e.dbOpenError=new X.DatabaseClosed,e.isBeingOpened&&e.cancelOpen(e.dbOpenError)}delete(){const e=arguments.length>0,t=this._state;return new Ce(((n,r)=>{const s=()=>{this.close();var e=this._deps.indexedDB.deleteDatabase(this.name);e.onsuccess=We((()=>{!function({indexedDB:e,IDBKeyRange:t},n){!bn(e)&&"__dbnames"!==n&&gn(e,t).delete(n).catch(ee)}(this._deps,this.name),n()})),e.onerror=zt(r),e.onblocked=this._fireOnBlocked};if(e)throw new X.InvalidArgument("Arguments not allowed in db.delete()");t.isBeingOpened?t.dbReadyPromise.then(s):s()}))}backendDB(){return this.idbdb}isOpen(){return null!==this.idbdb}hasBeenClosed(){const e=this._state.dbOpenError;return e&&"DatabaseClosed"===e.name}hasFailed(){return null!==this._state.dbOpenError}dynamicallyOpened(){return this._state.autoSchema}get tables(){return t(this._allTables).map((e=>this._allTables[e]))}transaction(){const e=En.apply(this,arguments);return this._transaction.apply(this,e)}_transaction(e,t,n){let r=Ke.trans;r&&r.db===this&&-1===e.indexOf("!")||(r=null);const s=-1!==e.indexOf("?");let i,o;e=e.replace("!","").replace("?","");try{if(o=t.map((e=>{var t=e instanceof this.Table?e.name:e;if("string"!=typeof t)throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");return t})),"r"==e||"readonly"===e)i="readonly";else{if("rw"!=e&&"readwrite"!=e)throw new X.InvalidArgument("Invalid transaction mode: "+e);i="readwrite"}if(r){if("readonly"===r.mode&&"readwrite"===i){if(!s)throw new X.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");r=null}r&&o.forEach((e=>{if(r&&-1===r.storeNames.indexOf(e)){if(!s)throw new X.SubTransaction("Table "+e+" not included in parent transaction.");r=null}})),s&&r&&!r.active&&(r=null)}}catch(e){return r?r._promise(null,((t,n)=>{n(e)})):ht(e)}const a=Pn.bind(null,this,i,o,r,n);return r?r._promise(i,a,"lock"):Ke.trans?ot(Ke.transless,(()=>this._whenReady(a))):this._whenReady(a)}table(e){if(!o(this._allTables,e))throw new X.InvalidTable(`Table ${e} does not exist`);return this._allTables[e]}}const Un="undefined"!=typeof Symbol&&"observable"in Symbol?Symbol.observable:"@@observable";class Ln{constructor(e){this._subscribe=e}subscribe(e,t,n){return this._subscribe(e&&"function"!=typeof e?e:{next:e,error:t,complete:n})}[Un](){return this}}function Vn(e,n){return t(n).forEach((t=>{Tn(e[t]||(e[t]=new In),n[t])})),e}function Wn(e){return new Ln((n=>{const r=T(e);let s=!1,i={},o={};const a={get closed(){return s},unsubscribe:()=>{s=!0,Ht.storagemutated.unsubscribe(h)}};n.start&&n.start(a);let u=!1,l=!1;function c(){return t(o).some((e=>i[e]&&Rn(i[e],o[e])))}const h=e=>{Vn(i,e),c()&&d()},d=()=>{if(u||s)return;i={};const t={},f=function(t){r&&Ze();const n=()=>Je(e,{subscr:t,trans:null}),s=Ke.trans?ot(Ke.transless,n):n();return r&&s.then(et,et),s}(t);l||(Ht("storagemutated",h),l=!0),u=!0,Promise.resolve(f).then((e=>{u=!1,s||(c()?d():(i={},o=t,n.next&&n.next(e)))}),(e=>{u=!1,n.error&&n.error(e),a.unsubscribe()}))};return d(),a}))}let Yn;try{Yn={indexedDB:e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB,IDBKeyRange:e.IDBKeyRange||e.webkitIDBKeyRange}}catch(e){Yn={indexedDB:null,IDBKeyRange:null}}const zn=$n;function Gn(e){let t=Hn;try{Hn=!0,Ht.storagemutated.fire(e)}finally{Hn=t}}a(zn,{...Z,delete:e=>new zn(e,{addons:[]}).delete(),exists:e=>new zn(e,{addons:[]}).open().then((e=>(e.close(),!0))).catch("NoSuchDatabaseError",(()=>!1)),getDatabaseNames(e){try{return function({indexedDB:e,IDBKeyRange:t}){return bn(e)?Promise.resolve(e.databases()).then((e=>e.map((e=>e.name)).filter((e=>"__dbnames"!==e)))):gn(e,t).toCollection().primaryKeys()}(zn.dependencies).then(e)}catch(e){return ht(new X.MissingAPI)}},defineClass:()=>function(e){r(this,e)},ignoreTransaction:e=>Ke.trans?ot(Ke.transless,e):e(),vip:_n,async:function(e){return function(){try{var t=kn(e.apply(this,arguments));return t&&"function"==typeof t.then?t:Ce.resolve(t)}catch(e){return ht(e)}}},spawn:function(e,t,n){try{var r=kn(e.apply(n,t||[]));return r&&"function"==typeof r.then?r:Ce.resolve(r)}catch(e){return ht(e)}},currentTransaction:{get:()=>Ke.trans||null},waitFor:function(e,t){const n=Ce.resolve("function"==typeof e?zn.ignoreTransaction(e):e).timeout(t||6e4);return Ke.trans?Ke.trans.waitFor(n):n},Promise:Ce,debug:{get:()=>R,set:e=>{F(e,"dexie"===e?()=>!0:bt)}},derive:c,extend:r,props:a,override:y,Events:Et,on:Ht,liveQuery:Wn,extendObservabilitySet:Vn,getByKeyPath:b,setByKeyPath:_,delByKeyPath:function(e,t){"string"==typeof t?_(e,t,void 0):"length"in t&&[].map.call(t,(function(t){_(e,t,void 0)}))},shallowClone:w,deepClone:O,getObjectDiff:Sn,cmp:It,asap:v,minKey:-(1/0),addons:[],connections:yt,errnames:H,dependencies:Yn,semVer:"3.2.2",version:"3.2.2".split(".").map((e=>parseInt(e))).reduce(((e,t,n)=>e+t/Math.pow(10,2*n)))}),zn.maxKey=en(zn.dependencies.IDBKeyRange),"undefined"!=typeof dispatchEvent&&"undefined"!=typeof addEventListener&&(Ht("storagemutated",(e=>{if(!Hn){let t;mt?(t=document.createEvent("CustomEvent"),t.initCustomEvent("x-storagemutated-1",!0,!0,e)):t=new CustomEvent("x-storagemutated-1",{detail:e}),Hn=!0,dispatchEvent(t),Hn=!1}})),addEventListener("x-storagemutated-1",(({detail:e})=>{Hn||Gn(e)})));let Hn=!1;if("undefined"!=typeof BroadcastChannel){const e=new BroadcastChannel("x-storagemutated-1");Ht("storagemutated",(t=>{Hn||e.postMessage(t)})),e.onmessage=e=>{e.data&&Gn(e.data)}}else if("undefined"!=typeof self&&"undefined"!=typeof navigator){Ht("storagemutated",(e=>{try{Hn||("undefined"!=typeof localStorage&&localStorage.setItem("x-storagemutated-1",JSON.stringify({trig:Math.random(),changedParts:e})),"object"==typeof self.clients&&[...self.clients.matchAll({includeUncontrolled:!0})].forEach((t=>t.postMessage({type:"x-storagemutated-1",changedParts:e}))))}catch(e){}})),"undefined"!=typeof addEventListener&&addEventListener("storage",(e=>{if("x-storagemutated-1"===e.key){const t=JSON.parse(e.newValue);t&&Gn(t.changedParts)}}));const e=self.document&&navigator.serviceWorker;e&&e.addEventListener("message",(function({data:e}){e&&"x-storagemutated-1"===e.type&&Gn(e.changedParts)}))}Ce.rejectionMapper=function(e,t){if(!e||e instanceof W||e instanceof TypeError||e instanceof SyntaxError||!e.name||!J[e.name])return e;var n=new J[e.name](t||e.message,e);return"stack"in e&&l(n,"stack",{get:function(){return this.inner.stack}}),n},F(R,bt);
;// CONCATENATED MODULE: ./node_modules/dexie-export-import/dist/dexie-export-import.mjs
/* ========================================================================== 
 *                           dexie-export-import.js
 * ==========================================================================
 *
 * Dexie addon for exporting and importing databases to / from Blobs.
 *
 * By David Fahlander, david.fahlander@gmail.com,
 *
 * ==========================================================================
 *
 * Version 1.0.3, Fri Jul 02 2021
 *
 * http://dexie.org
 *
 * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/
 * 
 */



/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function getSchemaString(table) {
    var primKeyAndIndexes = [table.schema.primKey].concat(table.schema.indexes);
    return primKeyAndIndexes.map(function (index) { return index.src; }).join(',');
}
function extractDbSchema(exportedDb) {
    var schema = {};
    for (var _i = 0, _a = exportedDb.tables; _i < _a.length; _i++) {
        var table = _a[_i];
        schema[table.name] = table.schema;
    }
    return schema;
}
function readBlobAsync(blob, type) {
    return new Promise(function (resolve, reject) {
        var reader = new FileReader();
        reader.onabort = function (ev) { return reject(new Error("file read aborted")); };
        reader.onerror = function (ev) { return reject(ev.target.error); };
        reader.onload = function (ev) { return resolve(ev.target.result); };
        if (type === 'binary')
            reader.readAsArrayBuffer(blob);
        else
            reader.readAsText(blob);
    });
}
function readBlobSync(blob, type) {
    if (typeof FileReaderSync === 'undefined') {
        throw new Error('FileReaderSync missing. Reading blobs synchronously requires code to run from within a web worker. Use TSON.encapsulateAsync() to do it from the main thread.');
    }
    var reader = new FileReaderSync(); // Requires worker environment
    var data = type === 'binary' ?
        reader.readAsArrayBuffer(blob) :
        reader.readAsText(blob);
    return data;
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var typeson = createCommonjsModule(function (module, exports) {
!function(e,n){module.exports=n();}(commonjsGlobal,function(){var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n=function(){return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function sliceIterator(e,n){var t=[],r=!0,i=!1,o=void 0;try{for(var s,c=e[Symbol.iterator]();!(r=(s=c.next()).done)&&(t.push(s.value),!n||t.length!==n);r=!0);}catch(e){i=!0,o=e;}finally{try{!r&&c.return&&c.return();}finally{if(i)throw o}}return t}(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),t=function(e){if(Array.isArray(e)){for(var n=0,t=Array(e.length);n<e.length;n++)t[n]=e[n];return t}return Array.from(e)},r=Object.keys,i=Array.isArray,o={}.toString,s=Object.getPrototypeOf,c={}.hasOwnProperty,a=c.toString,u=["type","replaced","iterateIn","iterateUnsetNumeric"];function isThenable(e,n){return Typeson.isObject(e)&&"function"==typeof e.then&&(!n||"function"==typeof e.catch)}function toStringTag(e){return o.call(e).slice(8,-1)}function hasConstructorOf(n,t){if(!n||"object"!==(void 0===n?"undefined":e(n)))return !1;var r=s(n);if(!r)return !1;var i=c.call(r,"constructor")&&r.constructor;return "function"!=typeof i?null===t:"function"==typeof i&&null!==t&&a.call(i)===a.call(t)}function isPlainObject(e){return !(!e||"Object"!==toStringTag(e))&&(!s(e)||hasConstructorOf(e,Object))}function isObject(n){return n&&"object"===(void 0===n?"undefined":e(n))}function Typeson(o){var s=[],c=[],a={},y=this.types={},p=this.stringify=function(e,n,t,r){r=Object.assign({},o,r,{stringification:!0});var s=l(e,null,r);return i(s)?JSON.stringify(s[0],n,t):s.then(function(e){return JSON.stringify(e,n,t)})};this.stringifySync=function(e,n,t,r){return p(e,n,t,Object.assign({},{throwOnBadSyncType:!0},r,{sync:!0}))},this.stringifyAsync=function(e,n,t,r){return p(e,n,t,Object.assign({},{throwOnBadSyncType:!0},r,{sync:!1}))};var f=this.parse=function(e,n,t){return t=Object.assign({},o,t,{parse:!0}),h(JSON.parse(e,n),t)};this.parseSync=function(e,n,t){return f(e,n,Object.assign({},{throwOnBadSyncType:!0},t,{sync:!0}))},this.parseAsync=function(e,n,t){return f(e,n,Object.assign({},{throwOnBadSyncType:!0},t,{sync:!1}))},this.specialTypeNames=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.returnTypeNames=!0,this.encapsulate(e,n,t)},this.rootTypeName=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.iterateNone=!0,this.encapsulate(e,n,t)};var l=this.encapsulate=function(y,p,f){var l=(f=Object.assign({sync:!0},o,f)).sync,h={},v=[],d=[],b=[],O=!(f&&"cyclic"in f)||f.cyclic,m=f.encapsulateObserver,T=_encapsulate("",y,O,p||{},b);function finish(e){var n=Object.values(h);if(f.iterateNone)return n.length?n[0]:Typeson.getJSONType(e);if(n.length){if(f.returnTypeNames)return [].concat(t(new Set(n)));e&&isPlainObject(e)&&!e.hasOwnProperty("$types")?e.$types=h:e={$:e,$types:{$:h}};}else isObject(e)&&e.hasOwnProperty("$types")&&(e={$:e,$types:!0});return !f.returnTypeNames&&e}return b.length?l&&f.throwOnBadSyncType?function(){throw new TypeError("Sync method requested but async result obtained")}():Promise.resolve(function checkPromises(e,t){return Promise.all(t.map(function(e){return e[1].p})).then(function(r){return Promise.all(r.map(function(r){var i=[],o=t.splice(0,1)[0],s=n(o,7),c=s[0],a=s[2],u=s[3],y=s[4],p=s[5],f=s[6],l=_encapsulate(c,r,a,u,i,!0,f),h=hasConstructorOf(l,TypesonPromise);return c&&h?l.p.then(function(n){return y[p]=n,checkPromises(e,i)}):(c?y[p]=l:e=h?l.p:l,checkPromises(e,i))}))}).then(function(){return e})}(T,b)).then(finish):!l&&f.throwOnBadSyncType?function(){throw new TypeError("Async method requested but sync result obtained")}():f.stringification&&l?[finish(T)]:l?finish(T):Promise.resolve(finish(T));function _adaptBuiltinStateObjectProperties(e,n,t){Object.assign(e,n);var r=u.map(function(n){var t=e[n];return delete e[n],t});t(),u.forEach(function(n,t){e[n]=r[t];});}function _encapsulate(n,t,o,c,a,u,y){var p=void 0,l={},b=void 0===t?"undefined":e(t),O=m?function(e){var r=y||c.type||Typeson.getJSONType(t);m(Object.assign(e||l,{keypath:n,value:t,cyclic:o,stateObj:c,promisesData:a,resolvingTypesonPromise:u,awaitingTypesonPromise:hasConstructorOf(t,TypesonPromise)},void 0!==r?{type:r}:{}));}:null;if(b in{string:1,boolean:1,number:1,undefined:1})return void 0===t||"number"===b&&(isNaN(t)||t===-1/0||t===1/0)?(p=replace(n,t,c,a,!1,u,O))!==t&&(l={replaced:p}):p=t,O&&O(),p;if(null===t)return O&&O(),t;if(o&&!c.iterateIn&&!c.iterateUnsetNumeric){var T=v.indexOf(t);if(!(T<0))return h[n]="#",O&&O({cyclicKeypath:d[T]}),"#"+d[T];!0===o&&(v.push(t),d.push(n));}var g=isPlainObject(t),P=i(t),j=(g||P)&&(!s.length||c.replaced)||c.iterateIn?t:replace(n,t,c,a,g||P,null,O),S=void 0;if(j!==t?(p=j,l={replaced:j}):P||"array"===c.iterateIn?(S=new Array(t.length),l={clone:S}):g||"object"===c.iterateIn?l={clone:S={}}:""===n&&hasConstructorOf(t,TypesonPromise)?(a.push([n,t,o,c,void 0,void 0,c.type]),p=t):p=t,O&&O(),f.iterateNone)return S||p;if(!S)return p;if(c.iterateIn){var w=function _loop(e){var r={ownKeys:t.hasOwnProperty(e)};_adaptBuiltinStateObjectProperties(c,r,function(){var r=n+(n?".":"")+escapeKeyPathComponent(e),i=_encapsulate(r,t[e],!!o,c,a,u);hasConstructorOf(i,TypesonPromise)?a.push([r,i,!!o,c,S,e,c.type]):void 0!==i&&(S[e]=i);});};for(var A in t)w(A);O&&O({endIterateIn:!0,end:!0});}else r(t).forEach(function(e){var r=n+(n?".":"")+escapeKeyPathComponent(e);_adaptBuiltinStateObjectProperties(c,{ownKeys:!0},function(){var n=_encapsulate(r,t[e],!!o,c,a,u);hasConstructorOf(n,TypesonPromise)?a.push([r,n,!!o,c,S,e,c.type]):void 0!==n&&(S[e]=n);});}),O&&O({endIterateOwn:!0,end:!0});if(c.iterateUnsetNumeric){for(var C=t.length,N=function _loop2(e){if(!(e in t)){var r=n+(n?".":"")+e;_adaptBuiltinStateObjectProperties(c,{ownKeys:!1},function(){var n=_encapsulate(r,void 0,!!o,c,a,u);hasConstructorOf(n,TypesonPromise)?a.push([r,n,!!o,c,S,e,c.type]):void 0!==n&&(S[e]=n);});}},B=0;B<C;B++)N(B);O&&O({endIterateUnsetNumeric:!0,end:!0});}return S}function replace(e,n,t,r,i,o,u){for(var y=i?s:c,p=y.length;p--;){var f=y[p];if(f.test(n,t)){var v=f.type;if(a[v]){var d=h[e];h[e]=d?[v].concat(d):v;}return Object.assign(t,{type:v,replaced:!0}),!l&&f.replaceAsync||f.replace?(u&&u({replacing:!0}),_encapsulate(e,f[l||!f.replaceAsync?"replace":"replaceAsync"](n,t),O&&"readonly",t,r,o,v)):(u&&u({typeDetected:!0}),_encapsulate(e,n,O&&"readonly",t,r,o,v))}}return n}};this.encapsulateSync=function(e,n,t){return l(e,n,Object.assign({},{throwOnBadSyncType:!0},t,{sync:!0}))},this.encapsulateAsync=function(e,n,t){return l(e,n,Object.assign({},{throwOnBadSyncType:!0},t,{sync:!1}))};var h=this.revive=function(e,t){var s=(t=Object.assign({sync:!0},o,t)).sync,c=e&&e.$types,u=!0;if(!c)return e;if(!0===c)return e.$;c.$&&isPlainObject(c.$)&&(e=e.$,c=c.$,u=!1);var y=[],p={},f=function _revive(e,t,o,s,f,l){if(u&&"$types"===e)return;var h=c[e];if(i(t)||isPlainObject(t)){var v=i(t)?new Array(t.length):{};for(r(t).forEach(function(n){var r=_revive(e+(e?".":"")+escapeKeyPathComponent(n),t[n],o||v,s,v,n);hasConstructorOf(r,Undefined)?v[n]=void 0:void 0!==r&&(v[n]=r);}),t=v;y.length;){var d=n(y[0],4),b=d[0],O=d[1],m=d[2],T=d[3],g=getByKeyPath(b,O);if(hasConstructorOf(g,Undefined))m[T]=void 0;else {if(void 0===g)break;m[T]=g;}y.splice(0,1);}}if(!h)return t;if("#"===h){var P=getByKeyPath(o,t.substr(1));return void 0===P&&y.push([o,t.substr(1),f,l]),P}var j=s.sync;return [].concat(h).reduce(function(e,n){var t=a[n];if(!t)throw new Error("Unregistered type: "+n);return t[j&&t.revive?"revive":!j&&t.reviveAsync?"reviveAsync":"revive"](e,p)},t)}("",e,null,t);return isThenable(f=hasConstructorOf(f,Undefined)?void 0:f)?s&&t.throwOnBadSyncType?function(){throw new TypeError("Sync method requested but async result obtained")}():f:!s&&t.throwOnBadSyncType?function(){throw new TypeError("Async method requested but sync result obtained")}():s?f:Promise.resolve(f)};this.reviveSync=function(e,n){return h(e,Object.assign({},{throwOnBadSyncType:!0},n,{sync:!0}))},this.reviveAsync=function(e,n){return h(e,Object.assign({},{throwOnBadSyncType:!0},n,{sync:!1}))},this.register=function(e,n){return n=n||{},[].concat(e).forEach(function R(e){if(i(e))return e.map(R);e&&r(e).forEach(function(t){if("#"===t)throw new TypeError("# cannot be used as a type name as it is reserved for cyclic objects");if(Typeson.JSON_TYPES.includes(t))throw new TypeError("Plain JSON object types are reserved as type names");var r=e[t],o=r.testPlainObjects?s:c,u=o.filter(function(e){return e.type===t});if(u.length&&(o.splice(o.indexOf(u[0]),1),delete a[t],delete y[t]),r){if("function"==typeof r){var p=r;r={test:function test(e){return e&&e.constructor===p},replace:function replace(e){return assign({},e)},revive:function revive(e){return assign(Object.create(p.prototype),e)}};}else i(r)&&(r={test:r[0],replace:r[1],revive:r[2]});var f={type:t,test:r.test.bind(r)};r.replace&&(f.replace=r.replace.bind(r)),r.replaceAsync&&(f.replaceAsync=r.replaceAsync.bind(r));var l="number"==typeof n.fallback?n.fallback:n.fallback?0:1/0;if(r.testPlainObjects?s.splice(l,0,f):c.splice(l,0,f),r.revive||r.reviveAsync){var h={};r.revive&&(h.revive=r.revive.bind(r)),r.reviveAsync&&(h.reviveAsync=r.reviveAsync.bind(r)),a[t]=h;}y[t]=r;}});}),this};}function assign(e,n){return r(n).map(function(t){e[t]=n[t];}),e}function escapeKeyPathComponent(e){return e.replace(/~/g,"~0").replace(/\./g,"~1")}function unescapeKeyPathComponent(e){return e.replace(/~1/g,".").replace(/~0/g,"~")}function getByKeyPath(e,n){if(""===n)return e;var t=n.indexOf(".");if(t>-1){var r=e[unescapeKeyPathComponent(n.substr(0,t))];return void 0===r?void 0:getByKeyPath(r,n.substr(t+1))}return e[unescapeKeyPathComponent(n)]}function Undefined(){}function TypesonPromise(e){this.p=new Promise(e);}return TypesonPromise.prototype.then=function(e,n){var t=this;return new TypesonPromise(function(r,i){t.p.then(function(n){r(e?e(n):n);},function(e){t.p.catch(function(e){return n?n(e):Promise.reject(e)}).then(r,i);});})},TypesonPromise.prototype.catch=function(e){return this.then(null,e)},TypesonPromise.resolve=function(e){return new TypesonPromise(function(n){n(e);})},TypesonPromise.reject=function(e){return new TypesonPromise(function(n,t){t(e);})},["all","race"].map(function(e){TypesonPromise[e]=function(n){return new TypesonPromise(function(t,r){Promise[e](n.map(function(e){return e.p})).then(t,r);})};}),Typeson.Undefined=Undefined,Typeson.Promise=TypesonPromise,Typeson.isThenable=isThenable,Typeson.toStringTag=toStringTag,Typeson.hasConstructorOf=hasConstructorOf,Typeson.isObject=isObject,Typeson.isPlainObject=isPlainObject,Typeson.isUserObject=function isUserObject(e){if(!e||"Object"!==toStringTag(e))return !1;var n=s(e);return !n||hasConstructorOf(e,Object)||isUserObject(n)},Typeson.escapeKeyPathComponent=escapeKeyPathComponent,Typeson.unescapeKeyPathComponent=unescapeKeyPathComponent,Typeson.getByKeyPath=getByKeyPath,Typeson.getJSONType=function(n){return null===n?"null":i(n)?"array":void 0===n?"undefined":e(n)},Typeson.JSON_TYPES=["null","boolean","number","string","array","object"],Typeson});
});

var structuredCloning = createCommonjsModule(function (module, exports) {
!function(e,t){module.exports=t();}(commonjsGlobal,function(){var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function sliceIterator(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e;}finally{try{!r&&a.return&&a.return();}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),n=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},r=Object.keys,i=Array.isArray,o={}.toString,s=Object.getPrototypeOf,a={}.hasOwnProperty,c=a.toString,u=["type","replaced","iterateIn","iterateUnsetNumeric"];function isThenable(e,t){return Typeson.isObject(e)&&"function"==typeof e.then&&(!t||"function"==typeof e.catch)}function toStringTag(e){return o.call(e).slice(8,-1)}function hasConstructorOf(t,n){if(!t||"object"!==(void 0===t?"undefined":e(t)))return !1;var r=s(t);if(!r)return !1;var i=a.call(r,"constructor")&&r.constructor;return "function"!=typeof i?null===n:"function"==typeof i&&null!==n&&c.call(i)===c.call(n)}function isPlainObject(e){return !(!e||"Object"!==toStringTag(e))&&(!s(e)||hasConstructorOf(e,Object))}function isObject(t){return t&&"object"===(void 0===t?"undefined":e(t))}function Typeson(o){var s=[],a=[],c={},f=this.types={},p=this.stringify=function(e,t,n,r){r=Object.assign({},o,r,{stringification:!0});var s=y(e,null,r);return i(s)?JSON.stringify(s[0],t,n):s.then(function(e){return JSON.stringify(e,t,n)})};this.stringifySync=function(e,t,n,r){return p(e,t,n,Object.assign({},{throwOnBadSyncType:!0},r,{sync:!0}))},this.stringifyAsync=function(e,t,n,r){return p(e,t,n,Object.assign({},{throwOnBadSyncType:!0},r,{sync:!1}))};var l=this.parse=function(e,t,n){return n=Object.assign({},o,n,{parse:!0}),v(JSON.parse(e,t),n)};this.parseSync=function(e,t,n){return l(e,t,Object.assign({},{throwOnBadSyncType:!0},n,{sync:!0}))},this.parseAsync=function(e,t,n){return l(e,t,Object.assign({},{throwOnBadSyncType:!0},n,{sync:!1}))},this.specialTypeNames=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return n.returnTypeNames=!0,this.encapsulate(e,t,n)},this.rootTypeName=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return n.iterateNone=!0,this.encapsulate(e,t,n)};var y=this.encapsulate=function(f,p,l){var y=(l=Object.assign({sync:!0},o,l)).sync,v={},d=[],h=[],g=[],b=!(l&&"cyclic"in l)||l.cyclic,m=l.encapsulateObserver,T=_encapsulate("",f,b,p||{},g);function finish(e){var t=Object.values(v);if(l.iterateNone)return t.length?t[0]:Typeson.getJSONType(e);if(t.length){if(l.returnTypeNames)return [].concat(n(new Set(t)));e&&isPlainObject(e)&&!e.hasOwnProperty("$types")?e.$types=v:e={$:e,$types:{$:v}};}else isObject(e)&&e.hasOwnProperty("$types")&&(e={$:e,$types:!0});return !l.returnTypeNames&&e}return g.length?y&&l.throwOnBadSyncType?function(){throw new TypeError("Sync method requested but async result obtained")}():Promise.resolve(function checkPromises(e,n){return Promise.all(n.map(function(e){return e[1].p})).then(function(r){return Promise.all(r.map(function(r){var i=[],o=n.splice(0,1)[0],s=t(o,7),a=s[0],c=s[2],u=s[3],f=s[4],p=s[5],l=s[6],y=_encapsulate(a,r,c,u,i,!0,l),v=hasConstructorOf(y,TypesonPromise);return a&&v?y.p.then(function(t){return f[p]=t,checkPromises(e,i)}):(a?f[p]=y:e=v?y.p:y,checkPromises(e,i))}))}).then(function(){return e})}(T,g)).then(finish):!y&&l.throwOnBadSyncType?function(){throw new TypeError("Async method requested but sync result obtained")}():l.stringification&&y?[finish(T)]:y?finish(T):Promise.resolve(finish(T));function _adaptBuiltinStateObjectProperties(e,t,n){Object.assign(e,t);var r=u.map(function(t){var n=e[t];return delete e[t],n});n(),u.forEach(function(t,n){e[t]=r[n];});}function _encapsulate(t,n,o,a,c,u,f){var p=void 0,y={},g=void 0===n?"undefined":e(n),b=m?function(e){var r=f||a.type||Typeson.getJSONType(n);m(Object.assign(e||y,{keypath:t,value:n,cyclic:o,stateObj:a,promisesData:c,resolvingTypesonPromise:u,awaitingTypesonPromise:hasConstructorOf(n,TypesonPromise)},void 0!==r?{type:r}:{}));}:null;if(g in{string:1,boolean:1,number:1,undefined:1})return void 0===n||"number"===g&&(isNaN(n)||n===-1/0||n===1/0)?(p=replace(t,n,a,c,!1,u,b))!==n&&(y={replaced:p}):p=n,b&&b(),p;if(null===n)return b&&b(),n;if(o&&!a.iterateIn&&!a.iterateUnsetNumeric){var T=d.indexOf(n);if(!(T<0))return v[t]="#",b&&b({cyclicKeypath:h[T]}),"#"+h[T];!0===o&&(d.push(n),h.push(t));}var O=isPlainObject(n),w=i(n),S=(O||w)&&(!s.length||a.replaced)||a.iterateIn?n:replace(t,n,a,c,O||w,null,b),P=void 0;if(S!==n?(p=S,y={replaced:S}):w||"array"===a.iterateIn?(P=new Array(n.length),y={clone:P}):O||"object"===a.iterateIn?y={clone:P={}}:""===t&&hasConstructorOf(n,TypesonPromise)?(c.push([t,n,o,a,void 0,void 0,a.type]),p=n):p=n,b&&b(),l.iterateNone)return P||p;if(!P)return p;if(a.iterateIn){var j=function _loop(e){var r={ownKeys:n.hasOwnProperty(e)};_adaptBuiltinStateObjectProperties(a,r,function(){var r=t+(t?".":"")+escapeKeyPathComponent(e),i=_encapsulate(r,n[e],!!o,a,c,u);hasConstructorOf(i,TypesonPromise)?c.push([r,i,!!o,a,P,e,a.type]):void 0!==i&&(P[e]=i);});};for(var A in n)j(A);b&&b({endIterateIn:!0,end:!0});}else r(n).forEach(function(e){var r=t+(t?".":"")+escapeKeyPathComponent(e);_adaptBuiltinStateObjectProperties(a,{ownKeys:!0},function(){var t=_encapsulate(r,n[e],!!o,a,c,u);hasConstructorOf(t,TypesonPromise)?c.push([r,t,!!o,a,P,e,a.type]):void 0!==t&&(P[e]=t);});}),b&&b({endIterateOwn:!0,end:!0});if(a.iterateUnsetNumeric){for(var C=n.length,N=function _loop2(e){if(!(e in n)){var r=t+(t?".":"")+e;_adaptBuiltinStateObjectProperties(a,{ownKeys:!1},function(){var t=_encapsulate(r,void 0,!!o,a,c,u);hasConstructorOf(t,TypesonPromise)?c.push([r,t,!!o,a,P,e,a.type]):void 0!==t&&(P[e]=t);});}},B=0;B<C;B++)N(B);b&&b({endIterateUnsetNumeric:!0,end:!0});}return P}function replace(e,t,n,r,i,o,u){for(var f=i?s:a,p=f.length;p--;){var l=f[p];if(l.test(t,n)){var d=l.type;if(c[d]){var h=v[e];v[e]=h?[d].concat(h):d;}return Object.assign(n,{type:d,replaced:!0}),!y&&l.replaceAsync||l.replace?(u&&u({replacing:!0}),_encapsulate(e,l[y||!l.replaceAsync?"replace":"replaceAsync"](t,n),b&&"readonly",n,r,o,d)):(u&&u({typeDetected:!0}),_encapsulate(e,t,b&&"readonly",n,r,o,d))}}return t}};this.encapsulateSync=function(e,t,n){return y(e,t,Object.assign({},{throwOnBadSyncType:!0},n,{sync:!0}))},this.encapsulateAsync=function(e,t,n){return y(e,t,Object.assign({},{throwOnBadSyncType:!0},n,{sync:!1}))};var v=this.revive=function(e,n){var s=(n=Object.assign({sync:!0},o,n)).sync,a=e&&e.$types,u=!0;if(!a)return e;if(!0===a)return e.$;a.$&&isPlainObject(a.$)&&(e=e.$,a=a.$,u=!1);var f=[],p={},l=function _revive(e,n,o,s,l,y){if(u&&"$types"===e)return;var v=a[e];if(i(n)||isPlainObject(n)){var d=i(n)?new Array(n.length):{};for(r(n).forEach(function(t){var r=_revive(e+(e?".":"")+escapeKeyPathComponent(t),n[t],o||d,s,d,t);hasConstructorOf(r,Undefined)?d[t]=void 0:void 0!==r&&(d[t]=r);}),n=d;f.length;){var h=t(f[0],4),g=h[0],b=h[1],m=h[2],T=h[3],O=getByKeyPath(g,b);if(hasConstructorOf(O,Undefined))m[T]=void 0;else {if(void 0===O)break;m[T]=O;}f.splice(0,1);}}if(!v)return n;if("#"===v){var w=getByKeyPath(o,n.substr(1));return void 0===w&&f.push([o,n.substr(1),l,y]),w}var S=s.sync;return [].concat(v).reduce(function(e,t){var n=c[t];if(!n)throw new Error("Unregistered type: "+t);return n[S&&n.revive?"revive":!S&&n.reviveAsync?"reviveAsync":"revive"](e,p)},n)}("",e,null,n);return isThenable(l=hasConstructorOf(l,Undefined)?void 0:l)?s&&n.throwOnBadSyncType?function(){throw new TypeError("Sync method requested but async result obtained")}():l:!s&&n.throwOnBadSyncType?function(){throw new TypeError("Async method requested but sync result obtained")}():s?l:Promise.resolve(l)};this.reviveSync=function(e,t){return v(e,Object.assign({},{throwOnBadSyncType:!0},t,{sync:!0}))},this.reviveAsync=function(e,t){return v(e,Object.assign({},{throwOnBadSyncType:!0},t,{sync:!1}))},this.register=function(e,t){return t=t||{},[].concat(e).forEach(function R(e){if(i(e))return e.map(R);e&&r(e).forEach(function(n){if("#"===n)throw new TypeError("# cannot be used as a type name as it is reserved for cyclic objects");if(Typeson.JSON_TYPES.includes(n))throw new TypeError("Plain JSON object types are reserved as type names");var r=e[n],o=r.testPlainObjects?s:a,u=o.filter(function(e){return e.type===n});if(u.length&&(o.splice(o.indexOf(u[0]),1),delete c[n],delete f[n]),r){if("function"==typeof r){var p=r;r={test:function test(e){return e&&e.constructor===p},replace:function replace(e){return assign({},e)},revive:function revive(e){return assign(Object.create(p.prototype),e)}};}else i(r)&&(r={test:r[0],replace:r[1],revive:r[2]});var l={type:n,test:r.test.bind(r)};r.replace&&(l.replace=r.replace.bind(r)),r.replaceAsync&&(l.replaceAsync=r.replaceAsync.bind(r));var y="number"==typeof t.fallback?t.fallback:t.fallback?0:1/0;if(r.testPlainObjects?s.splice(y,0,l):a.splice(y,0,l),r.revive||r.reviveAsync){var v={};r.revive&&(v.revive=r.revive.bind(r)),r.reviveAsync&&(v.reviveAsync=r.reviveAsync.bind(r)),c[n]=v;}f[n]=r;}});}),this};}function assign(e,t){return r(t).map(function(n){e[n]=t[n];}),e}function escapeKeyPathComponent(e){return e.replace(/~/g,"~0").replace(/\./g,"~1")}function unescapeKeyPathComponent(e){return e.replace(/~1/g,".").replace(/~0/g,"~")}function getByKeyPath(e,t){if(""===t)return e;var n=t.indexOf(".");if(n>-1){var r=e[unescapeKeyPathComponent(t.substr(0,n))];return void 0===r?void 0:getByKeyPath(r,t.substr(n+1))}return e[unescapeKeyPathComponent(t)]}function Undefined(){}function TypesonPromise(e){this.p=new Promise(e);}TypesonPromise.prototype.then=function(e,t){var n=this;return new TypesonPromise(function(r,i){n.p.then(function(t){r(e?e(t):t);},function(e){n.p.catch(function(e){return t?t(e):Promise.reject(e)}).then(r,i);});})},TypesonPromise.prototype.catch=function(e){return this.then(null,e)},TypesonPromise.resolve=function(e){return new TypesonPromise(function(t){t(e);})},TypesonPromise.reject=function(e){return new TypesonPromise(function(t,n){n(e);})},["all","race"].map(function(e){TypesonPromise[e]=function(t){return new TypesonPromise(function(n,r){Promise[e](t.map(function(e){return e.p})).then(n,r);})};}),Typeson.Undefined=Undefined,Typeson.Promise=TypesonPromise,Typeson.isThenable=isThenable,Typeson.toStringTag=toStringTag,Typeson.hasConstructorOf=hasConstructorOf,Typeson.isObject=isObject,Typeson.isPlainObject=isPlainObject,Typeson.isUserObject=function isUserObject(e){if(!e||"Object"!==toStringTag(e))return !1;var t=s(e);return !t||hasConstructorOf(e,Object)||isUserObject(t)},Typeson.escapeKeyPathComponent=escapeKeyPathComponent,Typeson.unescapeKeyPathComponent=unescapeKeyPathComponent,Typeson.getByKeyPath=getByKeyPath,Typeson.getJSONType=function(t){return null===t?"null":i(t)?"array":void 0===t?"undefined":e(t)},Typeson.JSON_TYPES=["null","boolean","number","string","array","object"];for(var f={userObject:{test:function test(e,t){return Typeson.isUserObject(e)},replace:function replace(e){return Object.assign({},e)},revive:function revive(e){return e}}},p=[[{sparseArrays:{testPlainObjects:!0,test:function test(e){return Array.isArray(e)},replace:function replace(e,t){return t.iterateUnsetNumeric=!0,e}}},{sparseUndefined:{test:function test(e,t){return void 0===e&&!1===t.ownKeys},replace:function replace(e){return null},revive:function revive(e){}}}],{undef:{test:function test(e,t){return void 0===e&&(t.ownKeys||!("ownKeys"in t))},replace:function replace(e){return null},revive:function revive(e){return new Typeson.Undefined}}}],l={StringObject:{test:function test(t){return "String"===Typeson.toStringTag(t)&&"object"===(void 0===t?"undefined":e(t))},replace:function replace(e){return String(e)},revive:function revive(e){return new String(e)}},BooleanObject:{test:function test(t){return "Boolean"===Typeson.toStringTag(t)&&"object"===(void 0===t?"undefined":e(t))},replace:function replace(e){return Boolean(e)},revive:function revive(e){return new Boolean(e)}},NumberObject:{test:function test(t){return "Number"===Typeson.toStringTag(t)&&"object"===(void 0===t?"undefined":e(t))},replace:function replace(e){return Number(e)},revive:function revive(e){return new Number(e)}}},y=[{nan:{test:function test(e){return "number"==typeof e&&isNaN(e)},replace:function replace(e){return "NaN"},revive:function revive(e){return NaN}}},{infinity:{test:function test(e){return e===1/0},replace:function replace(e){return "Infinity"},revive:function revive(e){return 1/0}}},{negativeInfinity:{test:function test(e){return e===-1/0},replace:function replace(e){return "-Infinity"},revive:function revive(e){return -1/0}}}],v={date:{test:function test(e){return "Date"===Typeson.toStringTag(e)},replace:function replace(e){var t=e.getTime();return isNaN(t)?"NaN":t},revive:function revive(e){return "NaN"===e?new Date(NaN):new Date(e)}}},d={regexp:{test:function test(e){return "RegExp"===Typeson.toStringTag(e)},replace:function replace(e){return {source:e.source,flags:(e.global?"g":"")+(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.sticky?"y":"")+(e.unicode?"u":"")}},revive:function revive(e){var t=e.source,n=e.flags;return new RegExp(t,n)}}},h={map:{test:function test(e){return "Map"===Typeson.toStringTag(e)},replace:function replace(e){return Array.from(e.entries())},revive:function revive(e){return new Map(e)}}},g={set:{test:function test(e){return "Set"===Typeson.toStringTag(e)},replace:function replace(e){return Array.from(e.values())},revive:function revive(e){return new Set(e)}}},b="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",m=new Uint8Array(256),T=0;T<b.length;T++)m[b.charCodeAt(T)]=T;var O=function encode(e,t,n){for(var r=new Uint8Array(e,t,n),i=r.length,o="",s=0;s<i;s+=3)o+=b[r[s]>>2],o+=b[(3&r[s])<<4|r[s+1]>>4],o+=b[(15&r[s+1])<<2|r[s+2]>>6],o+=b[63&r[s+2]];return i%3==2?o=o.substring(0,o.length-1)+"=":i%3==1&&(o=o.substring(0,o.length-2)+"=="),o},w=function decode(e){var t=e.length,n=.75*e.length,r=0,i=void 0,o=void 0,s=void 0,a=void 0;"="===e[e.length-1]&&(n--,"="===e[e.length-2]&&n--);for(var c=new ArrayBuffer(n),u=new Uint8Array(c),f=0;f<t;f+=4)i=m[e.charCodeAt(f)],o=m[e.charCodeAt(f+1)],s=m[e.charCodeAt(f+2)],a=m[e.charCodeAt(f+3)],u[r++]=i<<2|o>>4,u[r++]=(15&o)<<4|s>>2,u[r++]=(3&s)<<6|63&a;return c},S={arraybuffer:{test:function test(e){return "ArrayBuffer"===Typeson.toStringTag(e)},replace:function replace(e,t){t.buffers||(t.buffers=[]);var n=t.buffers.indexOf(e);return n>-1?{index:n}:(t.buffers.push(e),O(e))},revive:function revive(t,n){if(n.buffers||(n.buffers=[]),"object"===(void 0===t?"undefined":e(t)))return n.buffers[t.index];var r=w(t);return n.buffers.push(r),r}}},P="undefined"==typeof self?commonjsGlobal:self,j={};["Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"].forEach(function(e){var t=e,n=P[t];n&&(j[e.toLowerCase()]={test:function test(e){return Typeson.toStringTag(e)===t},replace:function replace(e,t){var n=e.buffer,r=e.byteOffset,i=e.length;t.buffers||(t.buffers=[]);var o=t.buffers.indexOf(n);return o>-1?{index:o,byteOffset:r,length:i}:(t.buffers.push(n),{encoded:O(n),byteOffset:r,length:i})},revive:function revive(e,t){t.buffers||(t.buffers=[]);var r=e.byteOffset,i=e.length,o=e.encoded,s=e.index,a=void 0;return "index"in e?a=t.buffers[s]:(a=w(o),t.buffers.push(a)),new n(a,r,i)}});});var A={dataview:{test:function test(e){return "DataView"===Typeson.toStringTag(e)},replace:function replace(e,t){var n=e.buffer,r=e.byteOffset,i=e.byteLength;t.buffers||(t.buffers=[]);var o=t.buffers.indexOf(n);return o>-1?{index:o,byteOffset:r,byteLength:i}:(t.buffers.push(n),{encoded:O(n),byteOffset:r,byteLength:i})},revive:function revive(e,t){t.buffers||(t.buffers=[]);var n=e.byteOffset,r=e.byteLength,i=e.encoded,o=e.index,s=void 0;return "index"in e?s=t.buffers[o]:(s=w(i),t.buffers.push(s)),new DataView(s,n,r)}}},C={IntlCollator:{test:function test(e){return Typeson.hasConstructorOf(e,Intl.Collator)},replace:function replace(e){return e.resolvedOptions()},revive:function revive(e){return new Intl.Collator(e.locale,e)}},IntlDateTimeFormat:{test:function test(e){return Typeson.hasConstructorOf(e,Intl.DateTimeFormat)},replace:function replace(e){return e.resolvedOptions()},revive:function revive(e){return new Intl.DateTimeFormat(e.locale,e)}},IntlNumberFormat:{test:function test(e){return Typeson.hasConstructorOf(e,Intl.NumberFormat)},replace:function replace(e){return e.resolvedOptions()},revive:function revive(e){return new Intl.NumberFormat(e.locale,e)}}};function string2arraybuffer(e){for(var t=new Uint16Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t.buffer}var N={file:{test:function test(e){return "File"===Typeson.toStringTag(e)},replace:function replace(e){var t=new XMLHttpRequest;if(t.open("GET",URL.createObjectURL(e),!1),"undefined"!=typeof TextEncoder&&t.overrideMimeType("text/plain; charset=utf-16le"),200!==t.status&&0!==t.status)throw new Error("Bad Blob access: "+t.status);return t.send(),{type:e.type,stringContents:t.responseText,name:e.name,lastModified:e.lastModified}},revive:function revive(e){var t=e.name,n=e.type,r=e.stringContents,i=e.lastModified,o=string2arraybuffer(r);return new File([o],t,{type:n,lastModified:i})},replaceAsync:function replaceAsync(e){return new Typeson.Promise(function(t,n){if(e.isClosed)n(new Error("The File is closed"));else {var r=new FileReader;r.addEventListener("load",function(){t({type:e.type,stringContents:r.result,name:e.name,lastModified:e.lastModified});}),r.addEventListener("error",function(){n(r.error);}),r.readAsText(e,"UTF-16");}})}}};return [f,p,l,y,v,d,{imagedata:{test:function test(e){return "ImageData"===Typeson.toStringTag(e)},replace:function replace(e){return {array:Array.from(e.data),width:e.width,height:e.height}},revive:function revive(e){return new ImageData(new Uint8ClampedArray(e.array),e.width,e.height)}}},{imagebitmap:{test:function test(e){return "ImageBitmap"===Typeson.toStringTag(e)||e&&e.dataset&&"ImageBitmap"===e.dataset.toStringTag},replace:function replace(e){var t=document.createElement("canvas");return t.getContext("2d").drawImage(e,0,0),t.toDataURL()},revive:function revive(e){var t=document.createElement("canvas"),n=t.getContext("2d"),r=document.createElement("img");return r.onload=function(){n.drawImage(r,0,0);},r.src=e,t},reviveAsync:function reviveAsync(e){var t=document.createElement("canvas"),n=t.getContext("2d"),r=document.createElement("img");return r.onload=function(){n.drawImage(r,0,0);},r.src=e,createImageBitmap(t)}}},N,{file:N.file,filelist:{test:function test(e){return "FileList"===Typeson.toStringTag(e)},replace:function replace(e){for(var t=[],n=0;n<e.length;n++)t[n]=e.item(n);return t},revive:function revive(e){function FileList(){this._files=arguments[0],this.length=this._files.length;}return FileList.prototype.item=function(e){return this._files[e]},FileList.prototype[Symbol.toStringTag]="FileList",new FileList(e)}}},{blob:{test:function test(e){return "Blob"===Typeson.toStringTag(e)},replace:function replace(e){var t=new XMLHttpRequest;if(t.open("GET",URL.createObjectURL(e),!1),"undefined"!=typeof TextEncoder&&t.overrideMimeType("text/plain; charset=utf-16le"),200!==t.status&&0!==t.status)throw new Error("Bad Blob access: "+t.status);return t.send(),{type:e.type,stringContents:t.responseText}},revive:function revive(e){var t=e.type,n=e.stringContents;return new Blob([string2arraybuffer(n)],{type:t})},replaceAsync:function replaceAsync(e){return new Typeson.Promise(function(t,n){if(e.isClosed)n(new Error("The Blob is closed"));else {var r=new FileReader;r.addEventListener("load",function(){t({type:e.type,stringContents:r.result});}),r.addEventListener("error",function(){n(r.error);}),r.readAsText(e,"UTF-16");}})}}}].concat("function"==typeof Map?h:[],"function"==typeof Set?g:[],"function"==typeof ArrayBuffer?S:[],"function"==typeof Uint8Array?j:[],"function"==typeof DataView?A:[],"undefined"!=typeof Intl?C:[])});

});

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2017 Brett Zamir, 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; // Use a lookup table to find the index.

var lookup = new Uint8Array(256);

for (var dexie_export_import_i = 0; dexie_export_import_i < chars.length; dexie_export_import_i++) {
  lookup[chars.charCodeAt(dexie_export_import_i)] = dexie_export_import_i;
}

var encode = function encode(arraybuffer, byteOffset, length) {
  if (length === null || length === undefined) {
    length = arraybuffer.byteLength; // Needed for Safari
  }

  var bytes = new Uint8Array(arraybuffer, byteOffset || 0, // Default needed for Safari
  length);
  var len = bytes.length;
  var base64 = '';

  for (var _i = 0; _i < len; _i += 3) {
    base64 += chars[bytes[_i] >> 2];
    base64 += chars[(bytes[_i] & 3) << 4 | bytes[_i + 1] >> 4];
    base64 += chars[(bytes[_i + 1] & 15) << 2 | bytes[_i + 2] >> 6];
    base64 += chars[bytes[_i + 2] & 63];
  }

  if (len % 3 === 2) {
    base64 = base64.substring(0, base64.length - 1) + '=';
  } else if (len % 3 === 1) {
    base64 = base64.substring(0, base64.length - 2) + '==';
  }

  return base64;
};
var decode = function decode(base64) {
  var len = base64.length;
  var bufferLength = base64.length * 0.75;
  var p = 0;
  var encoded1, encoded2, encoded3, encoded4;

  if (base64[base64.length - 1] === '=') {
    bufferLength--;

    if (base64[base64.length - 2] === '=') {
      bufferLength--;
    }
  }

  var arraybuffer = new ArrayBuffer(bufferLength),
      bytes = new Uint8Array(arraybuffer);

  for (var _i2 = 0; _i2 < len; _i2 += 4) {
    encoded1 = lookup[base64.charCodeAt(_i2)];
    encoded2 = lookup[base64.charCodeAt(_i2 + 1)];
    encoded3 = lookup[base64.charCodeAt(_i2 + 2)];
    encoded4 = lookup[base64.charCodeAt(_i2 + 3)];
    bytes[p++] = encoded1 << 2 | encoded2 >> 4;
    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
  }

  return arraybuffer;
};

/* eslint-env browser, node */
var _global = typeof self === 'undefined' ? global : self;
var exportObj = {};
[
    'Int8Array',
    'Uint8Array',
    'Uint8ClampedArray',
    'Int16Array',
    'Uint16Array',
    'Int32Array',
    'Uint32Array',
    'Float32Array',
    'Float64Array'
].forEach(function (typeName) {
    var arrType = typeName;
    var TypedArray = _global[arrType];
    if (TypedArray) {
        exportObj[typeName.toLowerCase() + "2"] = {
            test: function (x) { return typeson.toStringTag(x) === arrType; },
            replace: function (_a) {
                var buffer = _a.buffer, byteOffset = _a.byteOffset, length = _a.length;
                return {
                    buffer: buffer,
                    byteOffset: byteOffset,
                    length: length
                };
            },
            revive: function (b64Obj) {
                var buffer = b64Obj.buffer, byteOffset = b64Obj.byteOffset, length = b64Obj.length;
                return new TypedArray(buffer, byteOffset, length);
            }
        };
    }
});

var arrayBuffer = {
    arraybuffer: {
        test: function (x) { return typeson.toStringTag(x) === 'ArrayBuffer'; },
        replace: function (b) {
            return encode(b, 0, b.byteLength);
        },
        revive: function (b64) {
            var buffer = decode(b64);
            return buffer;
        }
    }
};
// See also typed-arrays!

var TSON = new typeson().register(structuredCloning);
var readBlobsSynchronously = 'FileReaderSync' in self; // true in workers only.
var blobsToAwait = [];
var blobsToAwaitPos = 0;
// Need to patch encapsulateAsync as it does not work as of typeson 5.8.2
// Also, current version of typespn-registry-1.0.0-alpha.21 does not
// encapsulate/revive Blobs correctly (fails one of the unit tests in
// this library (test 'export-format'))
TSON.register([
    arrayBuffer,
    exportObj, {
        blob2: {
            test: function (x) { return typeson.toStringTag(x) === 'Blob'; },
            replace: function (b) {
                if (b.isClosed) { // On MDN, but not in https://w3c.github.io/FileAPI/#dfn-Blob
                    throw new Error('The Blob is closed');
                }
                if (readBlobsSynchronously) {
                    var data = readBlobSync(b, 'binary');
                    var base64 = encode(data, 0, data.byteLength);
                    return {
                        type: b.type,
                        data: base64
                    };
                }
                else {
                    blobsToAwait.push(b); // This will also make TSON.mustFinalize() return true.
                    var result = {
                        type: b.type,
                        data: { start: blobsToAwaitPos, end: blobsToAwaitPos + b.size }
                    };
                    console.log("b.size: " + b.size);
                    blobsToAwaitPos += b.size;
                    return result;
                }
            },
            finalize: function (b, ba) {
                b.data = encode(ba, 0, ba.byteLength);
            },
            revive: function (_a) {
                var type = _a.type, data = _a.data;
                return new Blob([decode(data)], { type: type });
            }
        }
    }
]);
TSON.mustFinalize = function () { return blobsToAwait.length > 0; };
TSON.finalize = function (items) { return __awaiter(void 0, void 0, void 0, function () {
    var allChunks, _i, items_1, item, types, arrayType, keyPath, typeName, typeSpec, b;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, readBlobAsync(new Blob(blobsToAwait), 'binary')];
            case 1:
                allChunks = _a.sent();
                if (items) {
                    for (_i = 0, items_1 = items; _i < items_1.length; _i++) {
                        item = items_1[_i];
                        // Manually go through all "blob" types in the result
                        // and lookup the data slice they point at.
                        if (item.$types) {
                            types = item.$types;
                            arrayType = types.$;
                            if (arrayType)
                                types = types.$;
                            for (keyPath in types) {
                                typeName = types[keyPath];
                                typeSpec = TSON.types[typeName];
                                if (typeSpec && typeSpec.finalize) {
                                    b = $n.getByKeyPath(item, arrayType ? "$." + keyPath : keyPath);
                                    typeSpec.finalize(b, allChunks.slice(b.start, b.end));
                                }
                            }
                        }
                    }
                }
                // Free up memory
                blobsToAwait = [];
                return [2 /*return*/];
        }
    });
}); };

var DEFAULT_ROWS_PER_CHUNK = 2000;
function exportDB(db, options) {
    return __awaiter(this, void 0, void 0, function () {
        function exportAll() {
            return __awaiter(this, void 0, void 0, function () {
                var tablesRowCounts, emptyExportJson, posEndDataArray, firstJsonSlice, filter, _loop_1, _i, tables_1, tableName;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, Promise.all(db.tables.map(function (table) { return table.count(); }))];
                        case 1:
                            tablesRowCounts = _a.sent();
                            tablesRowCounts.forEach(function (rowCount, i) { return tables[i].rowCount = rowCount; });
                            progress.totalRows = tablesRowCounts.reduce(function (p, c) { return p + c; });
                            emptyExportJson = JSON.stringify(emptyExport, undefined, prettyJson ? 2 : undefined);
                            posEndDataArray = emptyExportJson.lastIndexOf(']');
                            firstJsonSlice = emptyExportJson.substring(0, posEndDataArray);
                            slices.push(firstJsonSlice);
                            filter = options.filter;
                            _loop_1 = function (tableName) {
                                var table, primKey, inbound, LIMIT, emptyTableExport, emptyTableExportJson, posEndRowsArray, lastKey, lastNumRows, mayHaveMoreRows, _loop_2, state_1;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            table = db.table(tableName);
                                            primKey = table.schema.primKey;
                                            inbound = !!primKey.keyPath;
                                            LIMIT = options.numRowsPerChunk || DEFAULT_ROWS_PER_CHUNK;
                                            emptyTableExport = inbound ? {
                                                tableName: table.name,
                                                inbound: true,
                                                rows: []
                                            } : {
                                                tableName: table.name,
                                                inbound: false,
                                                rows: []
                                            };
                                            emptyTableExportJson = JSON.stringify(emptyTableExport, undefined, prettyJson ? 2 : undefined);
                                            if (prettyJson) {
                                                // Increase indentation according to this:
                                                // {
                                                //   ...
                                                //   data: [
                                                //     ...
                                                //     data: [
                                                // 123456<---- here
                                                //     ] 
                                                //   ]
                                                // }
                                                emptyTableExportJson = emptyTableExportJson.split('\n').join('\n    ');
                                            }
                                            posEndRowsArray = emptyTableExportJson.lastIndexOf(']');
                                            slices.push(emptyTableExportJson.substring(0, posEndRowsArray));
                                            lastKey = null;
                                            lastNumRows = 0;
                                            mayHaveMoreRows = true;
                                            _loop_2 = function () {
                                                var chunkedCollection, values, filteredValues, tsonValues, json, keys, keyvals, tsonTuples, json;
                                                return __generator(this, function (_c) {
                                                    switch (_c.label) {
                                                        case 0:
                                                            if (progressCallback) {
                                                                // Keep ongoing transaction private
                                                                $n.ignoreTransaction(function () { return progressCallback(progress); });
                                                            }
                                                            chunkedCollection = lastKey == null ?
                                                                table.limit(LIMIT) :
                                                                table.where(':id').above(lastKey).limit(LIMIT);
                                                            return [4 /*yield*/, chunkedCollection.toArray()];
                                                        case 1:
                                                            values = _c.sent();
                                                            if (values.length === 0)
                                                                return [2 /*return*/, "break"];
                                                            if (lastKey != null && lastNumRows > 0) {
                                                                // Not initial chunk. Must add a comma:
                                                                slices.push(",");
                                                                if (prettyJson) {
                                                                    slices.push("\n      ");
                                                                }
                                                            }
                                                            mayHaveMoreRows = values.length === LIMIT;
                                                            if (!inbound) return [3 /*break*/, 4];
                                                            filteredValues = filter ?
                                                                values.filter(function (value) { return filter(tableName, value); }) :
                                                                values;
                                                            tsonValues = filteredValues.map(function (value) { return TSON.encapsulate(value); });
                                                            if (!TSON.mustFinalize()) return [3 /*break*/, 3];
                                                            return [4 /*yield*/, $n.waitFor(TSON.finalize(tsonValues))];
                                                        case 2:
                                                            _c.sent();
                                                            _c.label = 3;
                                                        case 3:
                                                            json = JSON.stringify(tsonValues, undefined, prettyJson ? 2 : undefined);
                                                            if (prettyJson)
                                                                json = json.split('\n').join('\n      ');
                                                            // By generating a blob here, we give web platform the opportunity to store the contents
                                                            // on disk and release RAM.
                                                            slices.push(new Blob([json.substring(1, json.length - 1)]));
                                                            lastNumRows = filteredValues.length;
                                                            lastKey = values.length > 0 ?
                                                                $n.getByKeyPath(values[values.length - 1], primKey.keyPath) :
                                                                null;
                                                            return [3 /*break*/, 8];
                                                        case 4: return [4 /*yield*/, chunkedCollection.primaryKeys()];
                                                        case 5:
                                                            keys = _c.sent();
                                                            keyvals = keys.map(function (key, i) { return [key, values[i]]; });
                                                            if (filter)
                                                                keyvals = keyvals.filter(function (_a) {
                                                                    var key = _a[0], value = _a[1];
                                                                    return filter(tableName, value, key);
                                                                });
                                                            tsonTuples = keyvals.map(function (tuple) { return TSON.encapsulate(tuple); });
                                                            if (!TSON.mustFinalize()) return [3 /*break*/, 7];
                                                            return [4 /*yield*/, $n.waitFor(TSON.finalize(tsonTuples))];
                                                        case 6:
                                                            _c.sent();
                                                            _c.label = 7;
                                                        case 7:
                                                            json = JSON.stringify(tsonTuples, undefined, prettyJson ? 2 : undefined);
                                                            if (prettyJson)
                                                                json = json.split('\n').join('\n      ');
                                                            // By generating a blob here, we give web platform the opportunity to store the contents
                                                            // on disk and release RAM.
                                                            slices.push(new Blob([json.substring(1, json.length - 1)]));
                                                            lastNumRows = keyvals.length;
                                                            lastKey = keys.length > 0 ?
                                                                keys[keys.length - 1] :
                                                                null;
                                                            _c.label = 8;
                                                        case 8:
                                                            progress.completedRows += values.length;
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            };
                                            _b.label = 1;
                                        case 1:
                                            if (!mayHaveMoreRows) return [3 /*break*/, 3];
                                            return [5 /*yield**/, _loop_2()];
                                        case 2:
                                            state_1 = _b.sent();
                                            if (state_1 === "break")
                                                return [3 /*break*/, 3];
                                            return [3 /*break*/, 1];
                                        case 3:
                                            slices.push(emptyTableExportJson.substr(posEndRowsArray)); // "]}"
                                            progress.completedTables += 1;
                                            if (progress.completedTables < progress.totalTables) {
                                                slices.push(",");
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            };
                            _i = 0, tables_1 = tables;
                            _a.label = 2;
                        case 2:
                            if (!(_i < tables_1.length)) return [3 /*break*/, 5];
                            tableName = tables_1[_i].name;
                            return [5 /*yield**/, _loop_1(tableName)];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            _i++;
                            return [3 /*break*/, 2];
                        case 5:
                            slices.push(emptyExportJson.substr(posEndDataArray));
                            progress.done = true;
                            if (progressCallback) {
                                // Keep ongoing transaction private
                                $n.ignoreTransaction(function () { return progressCallback(progress); });
                            }
                            return [2 /*return*/];
                    }
                });
            });
        }
        var slices, tables, prettyJson, emptyExport, progressCallback, progress;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    options = options || {};
                    slices = [];
                    tables = db.tables.map(function (table) { return ({
                        name: table.name,
                        schema: getSchemaString(table),
                        rowCount: 0
                    }); });
                    prettyJson = options.prettyJson;
                    emptyExport = {
                        formatName: "dexie",
                        formatVersion: 1,
                        data: {
                            databaseName: db.name,
                            databaseVersion: db.verno,
                            tables: tables,
                            data: []
                        }
                    };
                    progressCallback = options.progressCallback;
                    progress = {
                        done: false,
                        completedRows: 0,
                        completedTables: 0,
                        totalRows: NaN,
                        totalTables: db.tables.length
                    };
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 6, 7]);
                    if (!options.noTransaction) return [3 /*break*/, 3];
                    return [4 /*yield*/, exportAll()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, db.transaction('r', db.tables, exportAll)];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5: return [3 /*break*/, 7];
                case 6:
                    TSON.finalize(); // Free up mem if error has occurred
                    return [7 /*endfinally*/];
                case 7:
                    if (progressCallback) {
                        // Keep ongoing transaction private
                        $n.ignoreTransaction(function () { return progressCallback(progress); });
                    }
                    return [2 /*return*/, new Blob(slices, { type: "text/json" })];
            }
        });
    });
}

var VERSION = 1;

var fakeStream = {Stream: function(){}};

var clarinet_1 = createCommonjsModule(function (module, exports) {
(function (clarinet) {

  // non node-js needs to set clarinet debug on root
  var env =(typeof process === 'object' && process.env)
    ? process.env
    : self;

  clarinet.parser            = function (opt) { return new CParser(opt);};
  clarinet.CParser           = CParser;
  clarinet.CStream           = CStream;
  clarinet.createStream      = createStream;
  clarinet.MAX_BUFFER_LENGTH = 10 * 1024 * 1024;
  clarinet.DEBUG             = (env.CDEBUG==='debug');
  clarinet.INFO              = (env.CDEBUG==='debug' || env.CDEBUG==='info');
  clarinet.EVENTS            =
    [ "value"
    , "string"
    , "key"
    , "openobject"
    , "closeobject"
    , "openarray"
    , "closearray"
    , "error"
    , "end"
    , "ready"
    ];

  var buffers     = {
        textNode: undefined,
        numberNode: ""
    }
    , streamWraps = clarinet.EVENTS.filter(function (ev) {
          return ev !== "error" && ev !== "end";
        })
    , S           = 0
    , Stream
    ;

  clarinet.STATE =
    { BEGIN                             : S++
    , VALUE                             : S++ // general stuff
    , OPEN_OBJECT                       : S++ // {
    , CLOSE_OBJECT                      : S++ // }
    , OPEN_ARRAY                        : S++ // [
    , CLOSE_ARRAY                       : S++ // ]
    , TEXT_ESCAPE                       : S++ // \ stuff
    , STRING                            : S++ // ""
    , BACKSLASH                         : S++
    , END                               : S++ // No more stack
    , OPEN_KEY                          : S++ // , "a"
    , CLOSE_KEY                         : S++ // :
    , TRUE                              : S++ // r
    , TRUE2                             : S++ // u
    , TRUE3                             : S++ // e
    , FALSE                             : S++ // a
    , FALSE2                            : S++ // l
    , FALSE3                            : S++ // s
    , FALSE4                            : S++ // e
    , NULL                              : S++ // u
    , NULL2                             : S++ // l
    , NULL3                             : S++ // l
    , NUMBER_DECIMAL_POINT              : S++ // .
    , NUMBER_DIGIT                      : S++ // [0-9]
    };

  for (var s_ in clarinet.STATE) clarinet.STATE[clarinet.STATE[s_]] = s_;

  // switcharoo
  S = clarinet.STATE;

  const Char = {
    tab                 : 0x09,     // \t
    lineFeed            : 0x0A,     // \n
    carriageReturn      : 0x0D,     // \r
    space               : 0x20,     // " "

    doubleQuote         : 0x22,     // "
    plus                : 0x2B,     // +
    comma               : 0x2C,     // ,
    minus               : 0x2D,     // -
    period              : 0x2E,     // .

    _0                  : 0x30,     // 0
    _9                  : 0x39,     // 9

    colon               : 0x3A,     // :

    E                   : 0x45,     // E

    openBracket         : 0x5B,     // [
    backslash           : 0x5C,     // \
    closeBracket        : 0x5D,     // ]

    a                   : 0x61,     // a
    b                   : 0x62,     // b
    e                   : 0x65,     // e 
    f                   : 0x66,     // f
    l                   : 0x6C,     // l
    n                   : 0x6E,     // n
    r                   : 0x72,     // r
    s                   : 0x73,     // s
    t                   : 0x74,     // t
    u                   : 0x75,     // u

    openBrace           : 0x7B,     // {
    closeBrace          : 0x7D,     // }
  };

  if (!Object.create) {
    Object.create = function (o) {
      function f () { this["__proto__"] = o; }
      f.prototype = o;
      return new f;
    };
  }

  if (!Object.getPrototypeOf) {
    Object.getPrototypeOf = function (o) {
      return o["__proto__"];
    };
  }

  if (!Object.keys) {
    Object.keys = function (o) {
      var a = [];
      for (var i in o) if (o.hasOwnProperty(i)) a.push(i);
      return a;
    };
  }

  function checkBufferLength (parser) {
    var maxAllowed = Math.max(clarinet.MAX_BUFFER_LENGTH, 10)
      , maxActual = 0
      ;
    for (var buffer in buffers) {
      var len = parser[buffer] === undefined ? 0 : parser[buffer].length;
      if (len > maxAllowed) {
        switch (buffer) {
          case "text":
            closeText(parser);
          break;

          default:
            error(parser, "Max buffer length exceeded: "+ buffer);
        }
      }
      maxActual = Math.max(maxActual, len);
    }
    parser.bufferCheckPosition = (clarinet.MAX_BUFFER_LENGTH - maxActual)
                               + parser.position;
  }

  function clearBuffers (parser) {
    for (var buffer in buffers) {
      parser[buffer] = buffers[buffer];
    }
  }

  var stringTokenPattern = /[\\"\n]/g;

  function CParser (opt) {
    if (!(this instanceof CParser)) return new CParser (opt);

    var parser = this;
    clearBuffers(parser);
    parser.bufferCheckPosition = clarinet.MAX_BUFFER_LENGTH;
    parser.q        = parser.c = parser.p = "";
    parser.opt      = opt || {};
    parser.closed   = parser.closedRoot = parser.sawRoot = false;
    parser.tag      = parser.error = null;
    parser.state    = S.BEGIN;
    parser.stack    = new Array();
    // mostly just for error reporting
    parser.position = parser.column = 0;
    parser.line     = 1;
    parser.slashed  = false;
    parser.unicodeI = 0;
    parser.unicodeS = null;
    parser.depth    = 0;
    emit(parser, "onready");
  }

  CParser.prototype =
    { end    : function () { end(this); }
    , write  : write
    , resume : function () { this.error = null; return this; }
    , close  : function () { return this.write(null); }
    };

  try        { Stream = fakeStream.Stream; }
  catch (ex) { Stream = function () {}; }

  function createStream (opt) { return new CStream(opt); }

  function CStream (opt) {
    if (!(this instanceof CStream)) return new CStream(opt);

    this._parser = new CParser(opt);
    this.writable = true;
    this.readable = true;

    //var Buffer = this.Buffer || function Buffer () {}; // if we don't have Buffers, fake it so we can do `var instanceof Buffer` and not throw an error
    this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary
    this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read
    this.temp_buffs = { "2": new Buffer(2), "3": new Buffer(3), "4": new Buffer(4) }; // for rebuilding chars split before boundary is reached
    this.string = '';

    var me = this;
    Stream.apply(me);

    this._parser.onend = function () { me.emit("end"); };
    this._parser.onerror = function (er) {
      me.emit("error", er);
      me._parser.error = null;
    };

    streamWraps.forEach(function (ev) {
      Object.defineProperty(me, "on" + ev,
        { get          : function () { return me._parser["on" + ev]; }
        , set          : function (h) {
            if (!h) {
              me.removeAllListeners(ev);
              me._parser["on"+ev] = h;
              return h;
            }
            me.on(ev, h);
          }
        , enumerable   : true
        , configurable : false
        });
    });
  }

  CStream.prototype = Object.create(Stream.prototype,
    { constructor: { value: CStream } });

  CStream.prototype.write = function (data) {
    data = new Buffer(data);
    for (var i = 0; i < data.length; i++) {
      var n = data[i];

      // check for carry over of a multi byte char split between data chunks
      // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration
      if (this.bytes_remaining > 0) {
        for (var j = 0; j < this.bytes_remaining; j++) {
          this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = data[j];
        }
        this.string = this.temp_buffs[this.bytes_in_sequence].toString();
        this.bytes_in_sequence = this.bytes_remaining = 0;

        // move iterator forward by number of byte read during sequencing
        i = i + j - 1;

        // pass data to parser and move forward to parse rest of data
        this._parser.write(this.string);
        this.emit("data", this.string);
        continue;
      }

      // if no remainder bytes carried over, parse multi byte (>=128) chars one at a time
      if (this.bytes_remaining === 0 && n >= 128) {
        if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;
        if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;
        if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;
        if ((this.bytes_in_sequence + i) > data.length) { // if bytes needed to complete char fall outside data length, we have a boundary split

          for (var k = 0; k <= (data.length - 1 - i); k++) {
            this.temp_buffs[this.bytes_in_sequence][k] = data[i + k]; // fill temp data of correct size with bytes available in this chunk
          }
          this.bytes_remaining = (i + this.bytes_in_sequence) - data.length;

          // immediately return as we need another chunk to sequence the character
          return true;
        } else {
          this.string = data.slice(i, (i + this.bytes_in_sequence)).toString();
          i = i + this.bytes_in_sequence - 1;

          this._parser.write(this.string);
          this.emit("data", this.string);
          continue;
        }
      }

      // is there a range of characters that are immediately parsable?
      for (var p = i; p < data.length; p++) {
        if (data[p] >= 128) break;
      }
      this.string = data.slice(i, p).toString();
      this._parser.write(this.string);
      this.emit("data", this.string);
      i = p - 1;

      // handle any remaining characters using multibyte logic
      continue;
    }
  };

  CStream.prototype.end = function (chunk) {
    if (chunk && chunk.length) this._parser.write(chunk.toString());
    this._parser.end();
    return true;
  };

  CStream.prototype.on = function (ev, handler) {
    var me = this;
    if (!me._parser["on"+ev] && streamWraps.indexOf(ev) !== -1) {
      me._parser["on"+ev] = function () {
        var args = arguments.length === 1 ? [arguments[0]]
                 : Array.apply(null, arguments);
        args.splice(0, 0, ev);
        me.emit.apply(me, args);
      };
    }
    return Stream.prototype.on.call(me, ev, handler);
  };

  CStream.prototype.destroy = function () {
    clearBuffers(this._parser);
    this.emit("close");
  };

  function emit(parser, event, data) {
    if(clarinet.INFO) console.log('-- emit', event, data);
    if (parser[event]) parser[event](data);
  }

  function emitNode(parser, event, data) {
    closeValue(parser);
    emit(parser, event, data);
  }

  function closeValue(parser, event) {
    parser.textNode = textopts(parser.opt, parser.textNode);
    if (parser.textNode !== undefined) {
      emit(parser, (event ? event : "onvalue"), parser.textNode);
    }
    parser.textNode = undefined;
  }

  function closeNumber(parser) {
    if (parser.numberNode)
      emit(parser, "onvalue", parseFloat(parser.numberNode));
    parser.numberNode = "";
  }

  function textopts (opt, text) {
    if (text === undefined) {
      return text;
    }
    if (opt.trim) text = text.trim();
    if (opt.normalize) text = text.replace(/\s+/g, " ");
    return text;
  }

  function error (parser, er) {
    closeValue(parser);
    er += "\nLine: "+parser.line+
          "\nColumn: "+parser.column+
          "\nChar: "+parser.c;
    er = new Error(er);
    parser.error = er;
    emit(parser, "onerror", er);
    return parser;
  }

  function end(parser) {
    if (parser.state !== S.VALUE || parser.depth !== 0)
      error(parser, "Unexpected end");

    closeValue(parser);
    parser.c      = "";
    parser.closed = true;
    emit(parser, "onend");
    CParser.call(parser, parser.opt);
    return parser;
  }

  function isWhitespace(c) {
    return c === Char.carriageReturn || c === Char.lineFeed || c === Char.space || c === Char.tab;
  }

  function write (chunk) {
    var parser = this;
    if (this.error) throw this.error;
    if (parser.closed) return error(parser,
      "Cannot write after close. Assign an onready handler.");
    if (chunk === null) return end(parser);
    var i = 0, c = chunk.charCodeAt(0), p = parser.p;
    if (clarinet.DEBUG) console.log('write -> [' + chunk + ']');
    while (c) {
      p = c;
      parser.c = c = chunk.charCodeAt(i++);
      // if chunk doesnt have next, like streaming char by char
      // this way we need to check if previous is really previous
      // if not we need to reset to what the parser says is the previous
      // from buffer
      if(p !== c ) parser.p = p;
      else p = parser.p;

      if(!c) break;

      if (clarinet.DEBUG) console.log(i,c,clarinet.STATE[parser.state]);
      parser.position ++;
      if (c === Char.lineFeed) {
        parser.line ++;
        parser.column = 0;
      } else parser.column ++;
      switch (parser.state) {

        case S.BEGIN:
          if (c === Char.openBrace) parser.state = S.OPEN_OBJECT;
          else if (c === Char.openBracket) parser.state = S.OPEN_ARRAY;
          else if (!isWhitespace(c))
            error(parser, "Non-whitespace before {[.");
        continue;

        case S.OPEN_KEY:
        case S.OPEN_OBJECT:
          if (isWhitespace(c)) continue;
          if(parser.state === S.OPEN_KEY) parser.stack.push(S.CLOSE_KEY);
          else {
            if(c === Char.closeBrace) {
              emit(parser, 'onopenobject');
              this.depth++;
              emit(parser, 'oncloseobject');
              this.depth--;
              parser.state = parser.stack.pop() || S.VALUE;
              continue;
            } else  parser.stack.push(S.CLOSE_OBJECT);
          }
          if(c === Char.doubleQuote) parser.state = S.STRING;
          else error(parser, "Malformed object key should start with \"");
        continue;

        case S.CLOSE_KEY:
        case S.CLOSE_OBJECT:
          if (isWhitespace(c)) continue;
          (parser.state === S.CLOSE_KEY) ? 'key' : 'object';
          if(c === Char.colon) {
            if(parser.state === S.CLOSE_OBJECT) {
              parser.stack.push(S.CLOSE_OBJECT);
              closeValue(parser, 'onopenobject');
               this.depth++;
            } else closeValue(parser, 'onkey');
            parser.state  = S.VALUE;
          } else if (c === Char.closeBrace) {
            emitNode(parser, 'oncloseobject');
            this.depth--;
            parser.state = parser.stack.pop() || S.VALUE;
          } else if(c === Char.comma) {
            if(parser.state === S.CLOSE_OBJECT)
              parser.stack.push(S.CLOSE_OBJECT);
            closeValue(parser);
            parser.state  = S.OPEN_KEY;
          } else error(parser, 'Bad object');
        continue;

        case S.OPEN_ARRAY: // after an array there always a value
        case S.VALUE:
          if (isWhitespace(c)) continue;
          if(parser.state===S.OPEN_ARRAY) {
            emit(parser, 'onopenarray');
            this.depth++;
            parser.state = S.VALUE;
            if(c === Char.closeBracket) {
              emit(parser, 'onclosearray');
              this.depth--;
              parser.state = parser.stack.pop() || S.VALUE;
              continue;
            } else {
              parser.stack.push(S.CLOSE_ARRAY);
            }
          }
               if(c === Char.doubleQuote) parser.state = S.STRING;
          else if(c === Char.openBrace) parser.state = S.OPEN_OBJECT;
          else if(c === Char.openBracket) parser.state = S.OPEN_ARRAY;
          else if(c === Char.t) parser.state = S.TRUE;
          else if(c === Char.f) parser.state = S.FALSE;
          else if(c === Char.n) parser.state = S.NULL;
          else if(c === Char.minus) { // keep and continue
            parser.numberNode += "-";
          } else if(Char._0 <= c && c <= Char._9) {
            parser.numberNode += String.fromCharCode(c);
            parser.state = S.NUMBER_DIGIT;
          } else               error(parser, "Bad value");
        continue;

        case S.CLOSE_ARRAY:
          if(c === Char.comma) {
            parser.stack.push(S.CLOSE_ARRAY);
            closeValue(parser, 'onvalue');
            parser.state  = S.VALUE;
          } else if (c === Char.closeBracket) {
            emitNode(parser, 'onclosearray');
            this.depth--;
            parser.state = parser.stack.pop() || S.VALUE;
          } else if (isWhitespace(c))
              continue;
          else error(parser, 'Bad array');
        continue;

        case S.STRING:
          if (parser.textNode === undefined) {
            parser.textNode = "";
          }

          // thanks thejh, this is an about 50% performance improvement.
          var starti              = i-1
            , slashed = parser.slashed
            , unicodeI = parser.unicodeI
            ;
          STRING_BIGLOOP: while (true) {
            if (clarinet.DEBUG)
              console.log(i,c,clarinet.STATE[parser.state]
                         ,slashed);
            // zero means "no unicode active". 1-4 mean "parse some more". end after 4.
            while (unicodeI > 0) {
              parser.unicodeS += String.fromCharCode(c);
              c = chunk.charCodeAt(i++);
              parser.position++;
              if (unicodeI === 4) {
                // TODO this might be slow? well, probably not used too often anyway
                parser.textNode += String.fromCharCode(parseInt(parser.unicodeS, 16));
                unicodeI = 0;
                starti = i-1;
              } else {
                unicodeI++;
              }
              // we can just break here: no stuff we skipped that still has to be sliced out or so
              if (!c) break STRING_BIGLOOP;
            }
            if (c === Char.doubleQuote && !slashed) {
              parser.state = parser.stack.pop() || S.VALUE;
              parser.textNode += chunk.substring(starti, i-1);
              parser.position += i - 1 - starti;
              break;
            }
            if (c === Char.backslash && !slashed) {
              slashed = true;
              parser.textNode += chunk.substring(starti, i-1);
              parser.position += i - 1 - starti;
              c = chunk.charCodeAt(i++);
              parser.position++;
              if (!c) break;
            }
            if (slashed) {
              slashed = false;
                   if (c === Char.n) { parser.textNode += '\n'; }
              else if (c === Char.r) { parser.textNode += '\r'; }
              else if (c === Char.t) { parser.textNode += '\t'; }
              else if (c === Char.f) { parser.textNode += '\f'; }
              else if (c === Char.b) { parser.textNode += '\b'; }
              else if (c === Char.u) {
                // \uxxxx. meh!
                unicodeI = 1;
                parser.unicodeS = '';
              } else {
                parser.textNode += String.fromCharCode(c);
              }
              c = chunk.charCodeAt(i++);
              parser.position++;
              starti = i-1;
              if (!c) break;
              else continue;
            }

            stringTokenPattern.lastIndex = i;
            var reResult = stringTokenPattern.exec(chunk);
            if (reResult === null) {
              i = chunk.length+1;
              parser.textNode += chunk.substring(starti, i-1);
              parser.position += i - 1 - starti;
              break;
            }
            i = reResult.index+1;
            c = chunk.charCodeAt(reResult.index);
            if (!c) {
              parser.textNode += chunk.substring(starti, i-1);
              parser.position += i - 1 - starti;
              break;
            }
          }
          parser.slashed = slashed;
          parser.unicodeI = unicodeI;
        continue;

        case S.TRUE:
          if (c === Char.r) parser.state = S.TRUE2;
          else error(parser, 'Invalid true started with t'+ c);
        continue;

        case S.TRUE2:
          if (c === Char.u) parser.state = S.TRUE3;
          else error(parser, 'Invalid true started with tr'+ c);
        continue;

        case S.TRUE3:
          if(c === Char.e) {
            emit(parser, "onvalue", true);
            parser.state = parser.stack.pop() || S.VALUE;
          } else error(parser, 'Invalid true started with tru'+ c);
        continue;

        case S.FALSE:
          if (c === Char.a) parser.state = S.FALSE2;
          else error(parser, 'Invalid false started with f'+ c);
        continue;

        case S.FALSE2:
          if (c === Char.l) parser.state = S.FALSE3;
          else error(parser, 'Invalid false started with fa'+ c);
        continue;

        case S.FALSE3:
          if (c === Char.s) parser.state = S.FALSE4;
          else error(parser, 'Invalid false started with fal'+ c);
        continue;

        case S.FALSE4:
          if (c === Char.e) {
            emit(parser, "onvalue", false);
            parser.state = parser.stack.pop() || S.VALUE;
          } else error(parser, 'Invalid false started with fals'+ c);
        continue;

        case S.NULL:
          if (c === Char.u) parser.state = S.NULL2;
          else error(parser, 'Invalid null started with n'+ c);
        continue;

        case S.NULL2:
          if (c === Char.l) parser.state = S.NULL3;
          else error(parser, 'Invalid null started with nu'+ c);
        continue;

        case S.NULL3:
          if(c === Char.l) {
            emit(parser, "onvalue", null);
            parser.state = parser.stack.pop() || S.VALUE;
          } else error(parser, 'Invalid null started with nul'+ c);
        continue;

        case S.NUMBER_DECIMAL_POINT:
          if(c === Char.period) {
            parser.numberNode += ".";
            parser.state       = S.NUMBER_DIGIT;
          } else error(parser, 'Leading zero not followed by .');
        continue;

        case S.NUMBER_DIGIT:
          if(Char._0 <= c && c <= Char._9) parser.numberNode += String.fromCharCode(c);
          else if (c === Char.period) {
            if(parser.numberNode.indexOf('.')!==-1)
              error(parser, 'Invalid number has two dots');
            parser.numberNode += ".";
          } else if (c === Char.e || c === Char.E) {
            if(parser.numberNode.indexOf('e')!==-1 ||
               parser.numberNode.indexOf('E')!==-1 )
               error(parser, 'Invalid number has two exponential');
            parser.numberNode += "e";
          } else if (c === Char.plus || c === Char.minus) {
            if(!(p === Char.e || p === Char.E))
              error(parser, 'Invalid symbol in number');
            parser.numberNode += String.fromCharCode(c);
          } else {
            closeNumber(parser);
            i--; // go back one
            parser.state = parser.stack.pop() || S.VALUE;
          }
        continue;

        default:
          error(parser, "Unknown state: " + parser.state);
      }
    }
    if (parser.position >= parser.bufferCheckPosition)
      checkBufferLength(parser);
    return parser;
  }

})(exports);
});

function JsonStream(blob) {
    var pos = 0;
    var parser = JsonParser(true);
    var rv = {
        pullAsync: function (numBytes) {
            return __awaiter(this, void 0, void 0, function () {
                var slize, jsonPart, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            slize = blob.slice(pos, pos + numBytes);
                            pos += numBytes;
                            return [4 /*yield*/, readBlobAsync(slize, 'text')];
                        case 1:
                            jsonPart = _a.sent();
                            result = parser.write(jsonPart);
                            rv.result = result || {};
                            return [2 /*return*/, result];
                    }
                });
            });
        },
        pullSync: function (numBytes) {
            var slize = blob.slice(pos, pos + numBytes);
            pos += numBytes;
            var jsonPart = readBlobSync(slize, 'text');
            var result = parser.write(jsonPart);
            rv.result = result || {};
            return result;
        },
        done: function () {
            return parser.done();
        },
        eof: function () {
            return pos >= blob.size;
        },
        result: {}
    };
    return rv;
}
function JsonParser(allowPartial) {
    var parser = clarinet_1.parser();
    var level = 0;
    var result;
    var stack = [];
    var obj;
    var key;
    var done = false;
    var array = false;
    parser.onopenobject = function (newKey) {
        var newObj = {};
        newObj.incomplete = true;
        if (!result)
            result = newObj;
        if (obj) {
            stack.push([key, obj, array]);
            if (allowPartial) {
                if (array) {
                    obj.push(newObj);
                }
                else {
                    obj[key] = newObj;
                }
            }
        }
        obj = newObj;
        key = newKey;
        array = false;
        ++level;
    };
    parser.onkey = function (newKey) { return key = newKey; };
    parser.onvalue = function (value) { return array ? obj.push(value) : obj[key] = value; };
    parser.oncloseobject = function () {
        var _a;
        delete obj.incomplete;
        key = null;
        if (--level === 0) {
            done = true;
        }
        else {
            var completedObj = obj;
            _a = stack.pop(), key = _a[0], obj = _a[1], array = _a[2];
            if (!allowPartial) {
                if (array) {
                    obj.push(completedObj);
                }
                else {
                    obj[key] = completedObj;
                }
            }
        }
    };
    parser.onopenarray = function () {
        var newObj = [];
        newObj.incomplete = true;
        if (!result)
            result = newObj;
        if (obj) {
            stack.push([key, obj, array]);
            if (allowPartial) {
                if (array) {
                    obj.push(newObj);
                }
                else {
                    obj[key] = newObj;
                }
            }
        }
        obj = newObj;
        array = true;
        key = null;
        ++level;
    };
    parser.onclosearray = function () {
        var _a;
        delete obj.incomplete;
        key = null;
        if (--level === 0) {
            done = true;
        }
        else {
            var completedObj = obj;
            _a = stack.pop(), key = _a[0], obj = _a[1], array = _a[2];
            if (!allowPartial) {
                if (array) {
                    obj.push(completedObj);
                }
                else {
                    obj[key] = completedObj;
                }
            }
        }
    };
    return {
        write: function (jsonPart) {
            parser.write(jsonPart);
            return result;
        },
        done: function () {
            return done;
        }
    };
}

var DEFAULT_KILOBYTES_PER_CHUNK = 1024;
function importDB(exportedData, options) {
    return __awaiter(this, void 0, void 0, function () {
        var CHUNK_SIZE, stream, dbExport, db;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    options = options || {}; // All booleans defaults to false.
                    CHUNK_SIZE = options.chunkSizeBytes || (DEFAULT_KILOBYTES_PER_CHUNK * 1024);
                    return [4 /*yield*/, loadUntilWeGotEnoughData(exportedData, CHUNK_SIZE)];
                case 1:
                    stream = _a.sent();
                    dbExport = stream.result.data;
                    db = new $n(dbExport.databaseName);
                    db.version(dbExport.databaseVersion).stores(extractDbSchema(dbExport));
                    return [4 /*yield*/, importInto(db, stream, options)];
                case 2:
                    _a.sent();
                    return [2 /*return*/, db];
            }
        });
    });
}
function peakImportFile(exportedData) {
    return __awaiter(this, void 0, void 0, function () {
        var stream;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    stream = JsonStream(exportedData);
                    _a.label = 1;
                case 1:
                    if (!!stream.eof()) return [3 /*break*/, 3];
                    return [4 /*yield*/, stream.pullAsync(5 * 1024)];
                case 2:
                    _a.sent(); // 5 k is normally enough for the headers. If not, it will just do another go.
                    if (stream.result.data && stream.result.data.data) {
                        // @ts-ignore - TS won't allow us to delete a required property - but we are going to cast it.
                        delete stream.result.data.data; // Don't return half-baked data array.
                        return [3 /*break*/, 3];
                    }
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/, stream.result];
            }
        });
    });
}
function importInto(db, exportedData, options) {
    return __awaiter(this, void 0, void 0, function () {
        function importAll() {
            return __awaiter(this, void 0, void 0, function () {
                var _loop_1, _i, _a, tableExport, state_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _loop_1 = function (tableExport) {
                                var tableName, table, tableSchemaStr, sourceRows, rows, i, obj, filter, filteredRows, _c, keys, values;
                                return __generator(this, function (_d) {
                                    switch (_d.label) {
                                        case 0:
                                            if (!tableExport.rows)
                                                return [2 /*return*/, "break"]; // Need to pull more!
                                            if (!tableExport.rows.incomplete && tableExport.rows.length === 0)
                                                return [2 /*return*/, "continue"];
                                            if (progressCallback) {
                                                // Keep ongoing transaction private
                                                $n.ignoreTransaction(function () { return progressCallback(progress); });
                                            }
                                            tableName = tableExport.tableName;
                                            table = db.table(tableName);
                                            tableSchemaStr = dbExport.tables.filter(function (t) { return t.name === tableName; })[0].schema;
                                            if (!table) {
                                                if (!options.acceptMissingTables)
                                                    throw new Error("Exported table " + tableExport.tableName + " is missing in installed database");
                                                else
                                                    return [2 /*return*/, "continue"];
                                            }
                                            if (!options.acceptChangedPrimaryKey &&
                                                tableSchemaStr.split(',')[0] != table.schema.primKey.src) {
                                                throw new Error("Primary key differs for table " + tableExport.tableName + ". ");
                                            }
                                            sourceRows = tableExport.rows;
                                            rows = [];
                                            for (i = 0; i < sourceRows.length; i++) {
                                                obj = sourceRows[i];
                                                if (!obj.incomplete) {
                                                    rows.push(TSON.revive(obj));
                                                }
                                                else {
                                                    break;
                                                }
                                            }
                                            filter = options.filter;
                                            filteredRows = filter ?
                                                tableExport.inbound ?
                                                    rows.filter(function (value) { return filter(tableName, value); }) :
                                                    rows.filter(function (_a) {
                                                        var key = _a[0], value = _a[1];
                                                        return filter(tableName, value, key);
                                                    }) :
                                                rows;
                                            _c = tableExport.inbound ?
                                                [undefined, filteredRows] :
                                                [filteredRows.map(function (row) { return row[0]; }), rows.map(function (row) { return row[1]; })], keys = _c[0], values = _c[1];
                                            if (!options.overwriteValues) return [3 /*break*/, 2];
                                            return [4 /*yield*/, table.bulkPut(values, keys)];
                                        case 1:
                                            _d.sent();
                                            return [3 /*break*/, 4];
                                        case 2: return [4 /*yield*/, table.bulkAdd(values, keys)];
                                        case 3:
                                            _d.sent();
                                            _d.label = 4;
                                        case 4:
                                            progress.completedRows += rows.length;
                                            if (!rows.incomplete) {
                                                progress.completedTables += 1;
                                            }
                                            sourceRows.splice(0, rows.length); // Free up RAM, keep existing array instance.
                                            return [2 /*return*/];
                                    }
                                });
                            };
                            _i = 0, _a = dbExport.data;
                            _b.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                            tableExport = _a[_i];
                            return [5 /*yield**/, _loop_1(tableExport)];
                        case 2:
                            state_1 = _b.sent();
                            if (state_1 === "break")
                                return [3 /*break*/, 4];
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4:
                            // Avoid unnescessary loops in "for (const tableExport of dbExport.data)" 
                            while (dbExport.data.length > 0 && dbExport.data[0].rows && !dbExport.data[0].rows.incomplete) {
                                // We've already imported all rows from the first table. Delete its occurrence
                                dbExport.data.splice(0, 1);
                            }
                            if (!(!jsonStream.done() && !jsonStream.eof())) return [3 /*break*/, 8];
                            if (!readBlobsSynchronously) return [3 /*break*/, 5];
                            // If we can pull from blob synchronically, we don't have to
                            // keep transaction alive using Dexie.waitFor().
                            // This will only be possible in workers.
                            jsonStream.pullSync(CHUNK_SIZE);
                            return [3 /*break*/, 7];
                        case 5: return [4 /*yield*/, $n.waitFor(jsonStream.pullAsync(CHUNK_SIZE))];
                        case 6:
                            _b.sent();
                            _b.label = 7;
                        case 7: return [3 /*break*/, 9];
                        case 8: return [3 /*break*/, 10];
                        case 9:
                            return [3 /*break*/, 0];
                        case 10: return [2 /*return*/];
                    }
                });
            });
        }
        var CHUNK_SIZE, jsonStream, dbExportFile, readBlobsSynchronously, dbExport, progressCallback, progress, _i, _a, table;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    options = options || {}; // All booleans defaults to false.
                    CHUNK_SIZE = options.chunkSizeBytes || (DEFAULT_KILOBYTES_PER_CHUNK * 1024);
                    return [4 /*yield*/, loadUntilWeGotEnoughData(exportedData, CHUNK_SIZE)];
                case 1:
                    jsonStream = _b.sent();
                    dbExportFile = jsonStream.result;
                    readBlobsSynchronously = 'FileReaderSync' in self;
                    dbExport = dbExportFile.data;
                    if (!options.acceptNameDiff && db.name !== dbExport.databaseName)
                        throw new Error("Name differs. Current database name is " + db.name + " but export is " + dbExport.databaseName);
                    if (!options.acceptVersionDiff && db.verno !== dbExport.databaseVersion) {
                        // Possible feature: Call upgraders in some isolated way if this happens... ?
                        throw new Error("Database version differs. Current database is in version " + db.verno + " but export is " + dbExport.databaseVersion);
                    }
                    progressCallback = options.progressCallback;
                    progress = {
                        done: false,
                        completedRows: 0,
                        completedTables: 0,
                        totalRows: dbExport.tables.reduce(function (p, c) { return p + c.rowCount; }, 0),
                        totalTables: dbExport.tables.length
                    };
                    if (progressCallback) {
                        // Keep ongoing transaction private
                        $n.ignoreTransaction(function () { return progressCallback(progress); });
                    }
                    if (!options.clearTablesBeforeImport) return [3 /*break*/, 5];
                    _i = 0, _a = db.tables;
                    _b.label = 2;
                case 2:
                    if (!(_i < _a.length)) return [3 /*break*/, 5];
                    table = _a[_i];
                    return [4 /*yield*/, table.clear()];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4:
                    _i++;
                    return [3 /*break*/, 2];
                case 5:
                    if (!options.noTransaction) return [3 /*break*/, 7];
                    return [4 /*yield*/, importAll()];
                case 6:
                    _b.sent();
                    return [3 /*break*/, 9];
                case 7: return [4 /*yield*/, db.transaction('rw', db.tables, importAll)];
                case 8:
                    _b.sent();
                    _b.label = 9;
                case 9:
                    progress.done = true;
                    if (progressCallback) {
                        // Keep ongoing transaction private
                        $n.ignoreTransaction(function () { return progressCallback(progress); });
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function loadUntilWeGotEnoughData(exportedData, CHUNK_SIZE) {
    return __awaiter(this, void 0, void 0, function () {
        var stream, dbExportFile;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    stream = ('slice' in exportedData ?
                        JsonStream(exportedData) :
                        exportedData);
                    _a.label = 1;
                case 1:
                    if (!!stream.eof()) return [3 /*break*/, 3];
                    return [4 /*yield*/, stream.pullAsync(CHUNK_SIZE)];
                case 2:
                    _a.sent();
                    if (stream.result.data && stream.result.data.data)
                        return [3 /*break*/, 3];
                    return [3 /*break*/, 1];
                case 3:
                    dbExportFile = stream.result;
                    if (!dbExportFile || dbExportFile.formatName != "dexie")
                        throw new Error("Given file is not a dexie export");
                    if (dbExportFile.formatVersion > VERSION) {
                        throw new Error("Format version " + dbExportFile.formatVersion + " not supported");
                    }
                    if (!dbExportFile.data) {
                        throw new Error("No data in export file");
                    }
                    if (!dbExportFile.data.databaseName) {
                        throw new Error("Missing databaseName in export file");
                    }
                    if (!dbExportFile.data.databaseVersion) {
                        throw new Error("Missing databaseVersion in export file");
                    }
                    if (!dbExportFile.data.tables) {
                        throw new Error("Missing tables in export file");
                    }
                    return [2 /*return*/, stream];
            }
        });
    });
}

//
// Extend Dexie interface (runtime wise)
//
$n.prototype["export"] = function (options) {
    return exportDB(this, options);
};
$n.prototype["import"] = function (blob, options) {
    return importInto(this, blob, options);
};
$n["import"] = function (blob, options) { return importDB(blob, options); };
var dexieExportImport = (function () {
    throw new Error("This addon extends Dexie.prototype globally and does not have be included in Dexie constructor's addons options.");
});

/* harmony default export */ const dexie_export_import = ((/* unused pure expression or super */ null && (dexieExportImport)));

//# sourceMappingURL=dexie-export-import.mjs.map

;// CONCATENATED MODULE: ./ui/raidboss/emulator/EmulatorCommon.ts




// Disable no-explicit-any for cloneData as it needs to work on raw objects for performance reasons.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const querySelectorSafe = (node, sel) => {
  const ret = node.querySelector(sel);
  if (!(ret instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
  return ret;
};
const querySelectorAllSafe = (node, sel) => {
  const ret = [...node.querySelectorAll(sel)].map(elem => {
    if (!(elem instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    return elem;
  });
  return ret;
};
const getTemplateChild = (node, sel) => {
  const template = querySelectorSafe(node, sel);
  if (!(template instanceof HTMLTemplateElement)) throw new not_reached/* UnreachableCode */.$();
  const ret = template.content.firstElementChild;
  if (!ret) throw new not_reached/* UnreachableCode */.$();
  if (!(ret instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
  return ret;
};
const cloneSafe = node => {
  const cloned = node.cloneNode(true);
  if (!(cloned instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
  return cloned;
};
class EmulatorCommon {
  static cloneData(data, exclude = ['options', 'party']) {
    const ret = {};

    // Use extra logic for top-level extend for property exclusion
    // This cut the execution time of this code from 41,000ms to 50ms when parsing a 12 minute pull
    for (const i in data) {
      if (exclude.includes(i)) continue;
      if (typeof data[i] === 'object') {
        // Cloning any. See DataType definition above for reasoning.
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        ret[i] = EmulatorCommon._cloneData(data[i]);
        continue;
      }

      // Assignment of any to any. See DataType definition above for reasoning.
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      ret[i] = data[i];
    }
    return ret;
  }
  static _cloneData(data) {
    if (typeof data === 'object') {
      if (Array.isArray(data)) {
        const ret = [];
        for (let i = 0; i < data.length; ++i) {
          // Cloning any. See DataType definition above for reasoning.
          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
          ret[i] = EmulatorCommon._cloneData(data[i]);
        }
        return ret;
      }
      if (data === null) return null;
      if (data instanceof RegExp) return new RegExp(data);
      const ret = {};
      for (const i in data) {
        // Cloning any. See DataType definition above for reasoning.
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        ret[i] = EmulatorCommon._cloneData(data[i]);
      }
      return ret;
    }
    return data;
  }
  static doesLineMatch(line, regexes) {
    if (regexes instanceof RegExp) return regexes.exec(line);
    for (const langStr in regexes) {
      const lang = langStr;
      const res = regexes[lang].exec(line);
      if (res) {
        if (res.groups) res.groups.language = lang;
        return res;
      }
    }
    return null;
  }
  static matchStart(line) {
    let res;
    // Currently all of these regexes have groups if they match at all,
    // but be robust to that changing in the future.
    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.countdownRegexes);
    if (res) {
      return {
        StartIn: (parseInt(res.groups?.time ?? '0') * 1000).toString(),
        StartType: 'Countdown',
        language: res.groups?.language ?? undefined
      };
    }
    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.sealRegexes);
    if (res) {
      return {
        StartIn: '0',
        StartType: 'Seal',
        language: res.groups?.language ?? undefined
      };
    }
    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.engageRegexes);
    if (res) {
      return {
        StartIn: '0',
        StartType: 'Engage',
        language: res.groups?.language ?? undefined
      };
    }
  }
  static matchEnd(line) {
    let res;
    // Currently all of these regexes have groups if they match at all,
    // but be robust to that changing in the future.
    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.winRegex);
    if (res) {
      return {
        EndType: 'Win',
        language: res.groups?.language ?? undefined
      };
    }
    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.wipeRegex);
    if (res) {
      return {
        EndType: 'Wipe',
        language: res.groups?.language ?? undefined
      };
    }
    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.cactbotWipeRegex);
    if (res) {
      return {
        EndType: 'Cactbot Wipe',
        language: res.groups?.language ?? undefined
      };
    }
    res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.unsealRegexes);
    if (res) {
      return {
        EndType: 'Unseal',
        language: res.groups?.language ?? undefined
      };
    }
  }
  static sealRegexes = LocaleNetRegex.areaSeal;
  static engageRegexes = LocaleNetRegex.countdownEngage;
  static countdownRegexes = LocaleNetRegex.countdownStart;
  static unsealRegexes = LocaleNetRegex.areaUnseal;
  static wipeRegex = netregexes/* commonNetRegex.wipe */.sL.wipe;
  static winRegex = netregexes/* default.network6d */.ZP.network6d({
    command: '4000000[23]'
  });
  static cactbotWipeRegex = netregexes/* default.echo */.ZP.echo({
    line: 'cactbot wipe.*?'
  });
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LogRepository.ts
class LogRepository {
  Combatants = {};
  firstTimestamp = Number.MAX_SAFE_INTEGER;
  updateTimestamp(timestamp) {
    this.firstTimestamp = Math.min(this.firstTimestamp, timestamp);
  }
  updateCombatant(id, c) {
    id = id.toUpperCase();
    if (id && id.length) {
      let combatant = this.Combatants[id];
      if (combatant === undefined) {
        combatant = {
          name: c.name,
          job: c.job,
          spawn: c.spawn,
          despawn: c.despawn
        };
        this.Combatants[id] = combatant;
      } else {
        combatant.name = c.name ?? combatant.name;
        combatant.job = c.job ?? combatant.job;
        combatant.spawn = Math.min(combatant.spawn, c.spawn);
        combatant.despawn = Math.max(combatant.despawn, c.despawn);
      }
    }
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/EventBus.ts
// EventBus by definition requires generic parameters.
// Map our stand-in generics to actual generics here.
// eslint-disable-next-line @typescript-eslint/ban-types

// eslint-disable-next-line @typescript-eslint/no-explicit-any

/**
 * This is a base class that classes can extend to inherit event bus capabilities.
 * This allows other classes to listen for events with the `on` function.
 * The inheriting class can fire those events with the `dispatch` function.
 */
class EventBus {
  listeners = {};
  /**
   * Subscribe to an event
   *
   * @param event The event(s) to subscribe to, space separated
   * @param callback The callback to invoke
   * @param scope Optional. The scope to apply the function against
   * @returns The callbacks registered to the event(s)
   */
  on(event, callback, scope) {
    const events = event.split(' ');
    const ret = [];
    scope = scope ?? (typeof window === 'undefined' ? {} : window);
    for (const event of events) {
      const events = this.listeners[event] ??= [];
      if (callback !== undefined) events.push({
        event: event,
        scope: scope,
        callback: callback
      });
      ret.push(...(this.listeners[event] ?? []));
    }
    return ret;
  }

  /**
   * Dispatch an event to any subscribers
   *
   * @param event The event to dispatch
   * @param eventArguments The event arguments to pass to listeners
   * @returns A promise that can be await'd or ignored
   */
  async dispatch(event, ...eventArguments) {
    if (this.listeners[event] === undefined) return;
    for (const l of this.listeners[event] ?? []) {
      const res = l.callback.apply(l.scope, eventArguments);
      await Promise.resolve(res);
    }
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x00.ts


const LineEvent0x00_fields = netlog_defs/* default.GameLog.fields */.Z.GameLog.fields;

// Chat event
class LineEvent0x00 extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.type = parts[LineEvent0x00_fields.code] ?? '';
    this.speaker = parts[LineEvent0x00_fields.name] ?? '';
    this.message = parts.slice(4, -1).join('|');

    // The exact reason for this check isn't clear anymore but may be related to
    // https://github.com/ravahn/FFXIV_ACT_Plugin/issues/250
    if (this.message.split('\u001f\u001f').length > 1) this.invalid = true;
    this.convertedLine = `${this.prefix() + this.type}:${this.speaker}:${this.message.trim()}`;
    this.convertedLine = LineEvent00.replaceChatSymbols(this.convertedLine);
  }
  static replaceChatSymbols(line) {
    for (const rep of LineEvent00.chatSymbolReplacements) line = line.replace(rep.Search, rep.Replace);
    return line;
  }
  static chatSymbolReplacements = [{
    Search: /\uE06F/g,
    Replace: '⇒',
    Type: 'Symbol'
  }, {
    Search: / \uE0BB\uE05C/g,
    Replace: ' ',
    Type: 'Positive Effect'
  }, {
    Search: / \uE0BB\uE05B/g,
    Replace: ' ',
    Type: 'Negative Effect'
  }];
}
class LineEvent00 extends LineEvent0x00 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x01.ts



const LineEvent0x01_fields = netlog_defs/* default.ChangeZone.fields */.Z.ChangeZone.fields;

// Zone change event
class LineEvent0x01 extends LineEvent {
  constructor(repo, networkLine, parts) {
    super(repo, networkLine, parts);
    this.zoneId = parts[LineEvent0x01_fields.id] ?? '';
    this.zoneName = parts[LineEvent0x01_fields.name] ?? '';
    this.zoneNameProperCase = stringhandlers.toProperCase(this.zoneName);
  }
}
class LineEvent01 extends LineEvent0x01 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x02.ts


const LineEvent0x02_fields = netlog_defs/* default.ChangedPlayer.fields */.Z.ChangedPlayer.fields;

// Player change event
class LineEvent0x02 extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x02_fields.id]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x02_fields.name] ?? '';
  }
}
class LineEvent02 extends LineEvent0x02 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x03.ts



const LineEvent0x03_fields = netlog_defs/* default.AddedCombatant.fields */.Z.AddedCombatant.fields;

// Added combatant event
class LineEvent0x03 extends LineEvent {
  isSource = true;
  isJobLevel = true;
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x03_fields.id]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x03_fields.name] ?? '';
    this.jobIdHex = parts[LineEvent0x03_fields.job]?.toUpperCase() ?? '';
    this.jobId = parseInt(this.jobIdHex, 16);
    this.job = util/* default.jobEnumToJob */.Z.jobEnumToJob(this.jobId);
    this.levelString = parts[LineEvent0x03_fields.level] ?? '';
    this.level = parseInt(this.levelString, 16);
    this.ownerId = parts[LineEvent0x03_fields.ownerId]?.toUpperCase() ?? '';
    this.worldId = parts[LineEvent0x03_fields.worldId] ?? '';
    this.worldName = parts[LineEvent0x03_fields.world] ?? '';
    this.npcNameId = parts[LineEvent0x03_fields.npcNameId] ?? '';
    this.npcBaseId = parts[LineEvent0x03_fields.npcBaseId] ?? '';
    this.hp = parseFloat(parts[LineEvent0x03_fields.currentHp] ?? '');
    this.maxHp = parseFloat(parts[LineEvent0x03_fields.hp] ?? '');
    this.mp = parseFloat(parts[LineEvent0x03_fields.currentMp] ?? '');
    this.maxMp = parseFloat(parts[LineEvent0x03_fields.mp] ?? '');
    this.x = parseFloat(parts[LineEvent0x03_fields.x] ?? '');
    this.y = parseFloat(parts[LineEvent0x03_fields.y] ?? '');
    this.z = parseFloat(parts[LineEvent0x03_fields.z] ?? '');
    this.heading = parseFloat(parts[LineEvent0x03_fields.heading] ?? '');
    repo.updateCombatant(this.id, {
      name: this.name,
      spawn: this.timestamp,
      despawn: this.timestamp,
      job: this.jobIdHex
    });
  }
}
class LineEvent03 extends LineEvent0x03 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x04.ts

// Removed combatant event
// Extend the add combatant event to reduce duplicate code since they're
// the same from a data perspective
class LineEvent0x04 extends LineEvent0x03 {
  constructor(repo, line, parts) {
    super(repo, line, parts);
  }
}
class LineEvent04 extends LineEvent0x04 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x0C.ts


const LineEvent0x0C_fields = netlog_defs/* default.PlayerStats.fields */.Z.PlayerStats.fields;

// Player stats event
class LineEvent0x0C extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.class = parts[LineEvent0x0C_fields.job] ?? '';
    this.strength = parts[LineEvent0x0C_fields.strength] ?? '';
    this.dexterity = parts[LineEvent0x0C_fields.dexterity] ?? '';
    this.vitality = parts[LineEvent0x0C_fields.vitality] ?? '';
    this.intelligence = parts[LineEvent0x0C_fields.intelligence] ?? '';
    this.mind = parts[LineEvent0x0C_fields.mind] ?? '';
    this.piety = parts[LineEvent0x0C_fields.piety] ?? '';
    this.attackPower = parts[LineEvent0x0C_fields.attackPower] ?? '';
    this.directHit = parts[LineEvent0x0C_fields.directHit] ?? '';
    this.criticalHit = parts[LineEvent0x0C_fields.criticalHit] ?? '';
    this.attackMagicPotency = parts[LineEvent0x0C_fields.attackMagicPotency] ?? '';
    this.healMagicPotency = parts[LineEvent0x0C_fields.healMagicPotency] ?? '';
    this.determination = parts[LineEvent0x0C_fields.determination] ?? '';
    this.skillSpeed = parts[LineEvent0x0C_fields.skillSpeed] ?? '';
    this.spellSpeed = parts[LineEvent0x0C_fields.spellSpeed] ?? '';
    this.tenacity = parts[LineEvent0x0C_fields.tenacity] ?? '';
    this.localContentId = parts[LineEvent0x0C_fields.localContentId] ?? '';
  }
}
class LineEvent12 extends LineEvent0x0C {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x105.ts


const definition = netlog_defs/* default.CombatantMemory */.Z.CombatantMemory;
const LineEvent0x105_fields = definition.fields;
const isValidChange = change => {
  return change !== undefined && ['Add', 'Change', 'Remove'].includes(change);
};
const isPluginStateKey = key => {
  return definition.repeatingFields.possibleKeys.includes(key);
};

// Combatant memory event
class LineEvent0x105 extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    const change = parts[LineEvent0x105_fields.change];
    if (isValidChange(change)) this.change = change;
    this.idHex = parts[LineEvent0x105_fields.id] ?? '';
    this.id = parseInt(this.idHex, 16);
    const stateSets = parts.slice(definition.repeatingFields.startingIndex, -1);
    const stringStateMap = {};
    for (let i = 0; i < stateSets.length; i += 2) {
      const key = stateSets[i];
      const value = stateSets[i + 1];
      if (key === undefined || value === undefined) continue;
      if (!isPluginStateKey(key)) continue;
      stringStateMap[key] = value;
    }
    this.state = {};

    // Strings
    if (stringStateMap.Distance !== undefined) this.state.Distance = stringStateMap.Distance;
    if (stringStateMap.EffectiveDistance !== undefined) this.state.EffectiveDistance = stringStateMap.EffectiveDistance;
    if (stringStateMap.Name !== undefined) this.state.Name = stringStateMap.Name;
    if (stringStateMap.WorldName !== undefined) this.state.WorldName = stringStateMap.WorldName;

    // Booleans
    if (stringStateMap.IsTargetable !== undefined) this.state.IsTargetable = Boolean(parseInt(stringStateMap.IsTargetable));

    // Base-16 numbers (IDs)
    if (stringStateMap.BNpcID !== undefined) this.state.BNpcID = parseInt(stringStateMap.BNpcID, 16);
    if (stringStateMap.BNpcNameID !== undefined) this.state.BNpcNameID = parseInt(stringStateMap.BNpcNameID, 16);
    if (stringStateMap.NPCTargetID !== undefined) this.state.NPCTargetID = parseInt(stringStateMap.NPCTargetID, 16);
    if (stringStateMap.PCTargetID !== undefined) this.state.PCTargetID = parseInt(stringStateMap.PCTargetID, 16);
    if (stringStateMap.OwnerID !== undefined) this.state.OwnerID = parseInt(stringStateMap.OwnerID, 16);
    if (stringStateMap.TargetID !== undefined) this.state.TargetID = parseInt(stringStateMap.TargetID, 16);
    if (stringStateMap.CastTargetID !== undefined) this.state.CastTargetID = parseInt(stringStateMap.CastTargetID, 16);

    // Numbers
    if (stringStateMap.CurrentWorldID !== undefined) this.state.CurrentWorldID = parseFloat(stringStateMap.CurrentWorldID);
    if (stringStateMap.WorldID !== undefined) this.state.WorldID = parseFloat(stringStateMap.WorldID);
    if (stringStateMap.PartyType !== undefined) this.state.PartyType = parseFloat(stringStateMap.PartyType);
    if (stringStateMap.ID !== undefined) this.state.ID = parseFloat(stringStateMap.ID);
    if (stringStateMap.WeaponId !== undefined) this.state.WeaponId = parseFloat(stringStateMap.WeaponId);
    if (stringStateMap.Type !== undefined) this.state.Type = parseFloat(stringStateMap.Type);
    if (stringStateMap.Job !== undefined) this.state.Job = parseFloat(stringStateMap.Job);
    if (stringStateMap.Level !== undefined) this.state.Level = parseFloat(stringStateMap.Level);
    if (stringStateMap.CurrentHP !== undefined) this.state.CurrentHP = parseFloat(stringStateMap.CurrentHP);
    if (stringStateMap.MaxHP !== undefined) this.state.MaxHP = parseFloat(stringStateMap.MaxHP);
    if (stringStateMap.CurrentMP !== undefined) this.state.CurrentMP = parseFloat(stringStateMap.CurrentMP);
    if (stringStateMap.MaxMP !== undefined) this.state.MaxMP = parseFloat(stringStateMap.MaxMP);
    if (stringStateMap.PosX !== undefined) this.state.PosX = parseFloat(stringStateMap.PosX);
    if (stringStateMap.PosY !== undefined) this.state.PosY = parseFloat(stringStateMap.PosY);
    if (stringStateMap.PosZ !== undefined) this.state.PosZ = parseFloat(stringStateMap.PosZ);
    if (stringStateMap.Heading !== undefined) this.state.Heading = parseFloat(stringStateMap.Heading);
    if (stringStateMap.MonsterType !== undefined) this.state.MonsterType = parseFloat(stringStateMap.MonsterType);
    if (stringStateMap.Status !== undefined) this.state.Status = parseFloat(stringStateMap.Status);
    if (stringStateMap.ModelStatus !== undefined) this.state.ModelStatus = parseFloat(stringStateMap.ModelStatus);
    if (stringStateMap.AggressionStatus !== undefined) this.state.AggressionStatus = parseFloat(stringStateMap.AggressionStatus);
    if (stringStateMap.Radius !== undefined) this.state.Radius = parseFloat(stringStateMap.Radius);
    if (stringStateMap.CurrentGP !== undefined) this.state.CurrentGP = parseFloat(stringStateMap.CurrentGP);
    if (stringStateMap.MaxGP !== undefined) this.state.MaxGP = parseFloat(stringStateMap.MaxGP);
    if (stringStateMap.CurrentCP !== undefined) this.state.CurrentCP = parseFloat(stringStateMap.CurrentCP);
    if (stringStateMap.MaxCP !== undefined) this.state.MaxCP = parseFloat(stringStateMap.MaxCP);
    if (stringStateMap.IsCasting1 !== undefined) this.state.IsCasting1 = parseFloat(stringStateMap.IsCasting1);
    if (stringStateMap.IsCasting2 !== undefined) this.state.IsCasting2 = parseFloat(stringStateMap.IsCasting2);
    if (stringStateMap.CastBuffID !== undefined) this.state.CastBuffID = parseFloat(stringStateMap.CastBuffID);
    if (stringStateMap.CastDurationCurrent !== undefined) this.state.CastDurationCurrent = parseFloat(stringStateMap.CastDurationCurrent);
    if (stringStateMap.CastDurationMax !== undefined) this.state.CastDurationMax = parseFloat(stringStateMap.CastDurationMax);
    if (stringStateMap.TransformationId !== undefined) this.state.TransformationId = parseFloat(stringStateMap.TransformationId);
  }
}
class LineEvent261 extends LineEvent0x105 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x14.ts


const LineEvent0x14_fields = netlog_defs/* default.StartsUsing.fields */.Z.StartsUsing.fields;

// Shorten a few types so dprint doesn't complain when the line gets too long.

// Ability use event
class LineEvent0x14 extends LineEvent {
  isSource = true;
  isTarget = true;
  isAbility = true;
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x14_fields.sourceId]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x14_fields.source] ?? '';
    this.abilityIdHex = parts[LineEvent0x14_fields.id]?.toUpperCase() ?? '';
    this.abilityId = parseInt(this.abilityIdHex, 16);
    this.abilityName = parts[LineEvent0x14_fields.ability] ?? '';
    this.targetId = parts[LineEvent0x14_fields.targetId]?.toUpperCase() ?? '';
    this.targetName = parts[LineEvent0x14_fields.target] ?? '';
    this.duration = parts[LineEvent0x14_fields.castTime] ?? '';
    this.x = parseFloat(parts[LineEvent0x14_fields.x] ?? '');
    this.y = parseFloat(parts[LineEvent0x14_fields.y] ?? '');
    this.z = parseFloat(parts[LineEvent0x14_fields.z] ?? '');
    this.heading = parseFloat(parts[LineEvent0x14_fields.heading] ?? '');
    repo.updateCombatant(this.id, {
      job: undefined,
      name: this.name,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
    repo.updateCombatant(this.targetId, {
      job: undefined,
      name: this.targetName,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
  }
}
class LineEvent20 extends LineEvent0x14 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x15.ts


const LineEvent0x15_fields = netlog_defs/* default.Ability.fields */.Z.Ability.fields;

// Shorten a few types so dprint doesn't complain when the line gets too long.

// Ability hit single target event
class LineEvent0x15 extends LineEvent {
  isSource = true;
  isTarget = true;
  isAbility = true;
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x15_fields.sourceId]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x15_fields.source] ?? '';
    this.flags = parts[LineEvent0x15_fields.flags] ?? '';
    const fieldOffset = this.flags === '3F' ? 2 : 0;
    this.damage = LineEvent.calculateDamage(parts[LineEvent0x15_fields.damage + fieldOffset] ?? '');
    this.abilityId = parseInt(parts[LineEvent0x15_fields.id]?.toUpperCase() ?? '', 16);
    this.abilityName = parts[LineEvent0x15_fields.ability] ?? '';
    this.targetId = parts[LineEvent0x15_fields.targetId]?.toUpperCase() ?? '';
    this.targetName = parts[LineEvent0x15_fields.target] ?? '';
    this.targetHp = parseInt(parts[LineEvent0x15_fields.targetCurrentHp + fieldOffset] ?? '');
    this.targetMaxHp = parseInt(parts[LineEvent0x15_fields.targetMaxHp + fieldOffset] ?? '');
    this.targetMp = parseInt(parts[LineEvent0x15_fields.targetCurrentMp + fieldOffset] ?? '');
    this.targetMaxMp = parseInt(parts[LineEvent0x15_fields.targetMaxMp + fieldOffset] ?? '');
    this.targetX = parseFloat(parts[LineEvent0x15_fields.targetX + fieldOffset] ?? '');
    this.targetY = parseFloat(parts[LineEvent0x15_fields.targetY + fieldOffset] ?? '');
    this.targetZ = parseFloat(parts[LineEvent0x15_fields.targetZ + fieldOffset] ?? '');
    this.targetHeading = parseFloat(parts[LineEvent0x15_fields.targetHeading + fieldOffset] ?? '');
    this.hp = parseInt(parts[LineEvent0x15_fields.currentHp + fieldOffset] ?? '');
    this.maxHp = parseInt(parts[LineEvent0x15_fields.maxHp + fieldOffset] ?? '');
    this.mp = parseInt(parts[LineEvent0x15_fields.currentMp + fieldOffset] ?? '');
    this.maxMp = parseInt(parts[LineEvent0x15_fields.maxMp + fieldOffset] ?? '');
    this.x = parseFloat(parts[LineEvent0x15_fields.x + fieldOffset] ?? '');
    this.y = parseFloat(parts[LineEvent0x15_fields.y + fieldOffset] ?? '');
    this.z = parseFloat(parts[LineEvent0x15_fields.z + fieldOffset] ?? '');
    this.heading = parseFloat(parts[LineEvent0x15_fields.heading + fieldOffset] ?? '');
    repo.updateCombatant(this.id, {
      job: undefined,
      name: this.name,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
    repo.updateCombatant(this.targetId, {
      job: undefined,
      name: this.targetName,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
  }
}
class LineEvent21 extends LineEvent0x15 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x16.ts

// Ability hit multiple/no target event
// Duplicate of 0x15 as far as data
class LineEvent0x16 extends LineEvent0x15 {
  constructor(repo, line, parts) {
    super(repo, line, parts);
  }
}
class LineEvent22 extends LineEvent0x16 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x17.ts


const LineEvent0x17_fields = netlog_defs/* default.NetworkCancelAbility.fields */.Z.NetworkCancelAbility.fields;

// Cancel ability event
class LineEvent0x17 extends LineEvent {
  isSource = true;
  isAbility = true;
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x17_fields.sourceId]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x17_fields.name] ?? '';
    this.abilityId = parseInt(parts[LineEvent0x17_fields.id]?.toUpperCase() ?? '', 16);
    this.abilityName = parts[LineEvent0x17_fields.name] ?? '';
    this.reason = parts[LineEvent0x17_fields.reason] ?? '';
  }
}
class LineEvent23 extends LineEvent0x17 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x18.ts


const LineEvent0x18_fields = netlog_defs/* default.NetworkDoT.fields */.Z.NetworkDoT.fields;

// DoT/HoT event
class LineEvent0x18 extends LineEvent {
  isSource = true;
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x18_fields.id]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x18_fields.name] ?? '';
    this.which = parts[LineEvent0x18_fields.which] ?? '';
    this.effectId = parts[LineEvent0x18_fields.effectId]?.toUpperCase() ?? '';
    const damageString = parts[LineEvent0x18_fields.damage] ?? '';
    this.damage = parseInt(damageString, 16);
    this.hp = parseInt(parts[LineEvent0x18_fields.currentHp] ?? '');
    this.maxHp = parseInt(parts[LineEvent0x18_fields.maxHp] ?? '');
    this.mp = parseInt(parts[LineEvent0x18_fields.currentMp] ?? '');
    this.maxMp = parseInt(parts[LineEvent0x18_fields.maxMp] ?? '');
    this.x = parseFloat(parts[LineEvent0x18_fields.x] ?? '');
    this.y = parseFloat(parts[LineEvent0x18_fields.y] ?? '');
    this.z = parseFloat(parts[LineEvent0x18_fields.z] ?? '');
    this.heading = parseFloat(parts[LineEvent0x18_fields.heading] ?? '');
    repo.updateCombatant(this.id, {
      job: undefined,
      name: this.name,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
  }
}
class LineEvent24 extends LineEvent0x18 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x19.ts


const LineEvent0x19_fields = netlog_defs/* default.WasDefeated.fields */.Z.WasDefeated.fields;

// Combatant defeated event
class LineEvent0x19 extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.targetId = parts[LineEvent0x19_fields.targetId]?.toUpperCase() ?? '';
    this.targetName = parts[LineEvent0x19_fields.target] ?? '';
    this.sourceId = parts[LineEvent0x19_fields.sourceId]?.toUpperCase() ?? '';
    this.sourceName = parts[LineEvent0x19_fields.source] ?? '';
    repo.updateCombatant(this.sourceId, {
      job: undefined,
      name: this.sourceName,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
    repo.updateCombatant(this.targetId, {
      job: undefined,
      name: this.targetName,
      spawn: this.timestamp,
      despawn: this.timestamp
    });
  }
}
class LineEvent25 extends LineEvent0x19 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1A.ts


const LineEvent0x1A_fields = netlog_defs/* default.GainsEffect.fields */.Z.GainsEffect.fields;

// Gain status effect event
// Deliberately don't flag this as LineEventSource or LineEventTarget
// because 0x1A line values aren't accurate
class LineEvent0x1A extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.effectId = parseInt(parts[LineEvent0x1A_fields.effectId]?.toUpperCase() ?? '', 16);
    this.effect = parts[LineEvent0x1A_fields.effect] ?? '';
    this.durationString = parts[LineEvent0x1A_fields.duration] ?? '';
    this.durationFloat = parseFloat(this.durationString);
    this.id = parts[LineEvent0x1A_fields.sourceId]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x1A_fields.source] ?? '';
    this.targetId = parts[LineEvent0x1A_fields.targetId]?.toUpperCase() ?? '';
    this.targetName = parts[LineEvent0x1A_fields.target] ?? '';
    this.stacks = parseInt(parts[LineEvent0x1A_fields.count] ?? '0');
    this.targetMaxHp = parseInt(parts[LineEvent0x1A_fields.targetMaxHp] ?? '');
    this.sourceMaxHp = parseInt(parts[LineEvent0x1A_fields.sourceMaxHp] ?? '');
    repo.updateCombatant(this.id, {
      name: this.name,
      spawn: this.timestamp,
      despawn: this.timestamp,
      job: undefined
    });
    repo.updateCombatant(this.targetId, {
      name: this.targetName,
      spawn: this.timestamp,
      despawn: this.timestamp,
      job: undefined
    });
  }
}
class LineEvent26 extends LineEvent0x1A {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1B.ts


const LineEvent0x1B_fields = netlog_defs/* default.HeadMarker.fields */.Z.HeadMarker.fields;

// Head marker event
class LineEvent0x1B extends LineEvent {
  isSource = true;
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x1B_fields.targetId]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x1B_fields.target] ?? '';
    this.headmarkerId = parts[LineEvent0x1B_fields.id] ?? '';
  }
}
class LineEvent27 extends LineEvent0x1B {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1C.ts


const LineEvent0x1C_fields = netlog_defs/* default.NetworkRaidMarker.fields */.Z.NetworkRaidMarker.fields;

// Floor waymarker event
class LineEvent0x1C extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.operation = parts[LineEvent0x1C_fields.operation] ?? '';
    this.waymark = parts[LineEvent0x1C_fields.waymark] ?? '';
    this.id = parts[LineEvent0x1C_fields.id]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x1C_fields.name] ?? '';
    this.x = parts[LineEvent0x1C_fields.x] ?? '';
    this.y = parts[LineEvent0x1C_fields.y] ?? '';
    this.z = parts[LineEvent0x1C_fields.z] ?? '';
  }
}
class LineEvent28 extends LineEvent0x1C {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1D.ts


const LineEvent0x1D_fields = netlog_defs/* default.NetworkTargetMarker.fields */.Z.NetworkTargetMarker.fields;

// Waymarker
class LineEvent0x1D extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.operation = parts[LineEvent0x1D_fields.operation] ?? '';
    this.waymark = parts[LineEvent0x1D_fields.waymark] ?? '';
    this.id = parts[LineEvent0x1D_fields.id]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x1D_fields.name] ?? '';
    this.targetId = parts[LineEvent0x1D_fields.targetId]?.toUpperCase() ?? '';
    this.targetName = parts[LineEvent0x1D_fields.targetName] ?? '';
  }
}
class LineEvent29 extends LineEvent0x1D {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1E.ts

// Lose status effect event
// Extend the gain status event to reduce duplicate code since they're
// the same from a data perspective
class LineEvent0x1E extends LineEvent0x1A {
  constructor(repo, line, parts) {
    super(repo, line, parts);
  }
}
class LineEvent30 extends LineEvent0x1E {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1F.ts



const splitFunc = s => [s.slice(6, 8), s.slice(4, 6), s.slice(2, 4), s.slice(0, 2)];
const LineEvent0x1F_fields = netlog_defs/* default.NetworkGauge.fields */.Z.NetworkGauge.fields;

// Job gauge event
class LineEvent0x1F extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x1F_fields.id]?.toUpperCase() ?? '';
    this.dataBytes1 = stringhandlers.zeroPad(parts[LineEvent0x1F_fields.data0] ?? '');
    this.dataBytes2 = stringhandlers.zeroPad(parts[LineEvent0x1F_fields.data1] ?? '');
    this.dataBytes3 = stringhandlers.zeroPad(parts[LineEvent0x1F_fields.data2] ?? '');
    this.dataBytes4 = stringhandlers.zeroPad(parts[LineEvent0x1F_fields.data3] ?? '');
    this.jobGaugeBytes = [...splitFunc(this.dataBytes1), ...splitFunc(this.dataBytes2), ...splitFunc(this.dataBytes3), ...splitFunc(this.dataBytes4)];
    this.name = repo.Combatants[this.id]?.name ?? '';
    repo.updateCombatant(this.id, {
      name: repo.Combatants[this.id]?.name,
      spawn: this.timestamp,
      despawn: this.timestamp,
      job: this.jobGaugeBytes[0]?.toUpperCase()
    });
  }
}
class LineEvent31 extends LineEvent0x1F {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x22.ts


const LineEvent0x22_fields = netlog_defs/* default.NameToggle.fields */.Z.NameToggle.fields;

// Nameplate toggle
class LineEvent0x22 extends LineEvent {
  isSource = true;
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x22_fields.id]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x22_fields.name] ?? '';
    this.targetId = parts[LineEvent0x22_fields.targetId]?.toUpperCase() ?? '';
    this.targetName = parts[LineEvent0x22_fields.targetName] ?? '';
    this.targetable = !!parseInt(parts[LineEvent0x22_fields.toggle] ?? '', 16);
  }
}
class LineEvent34 extends LineEvent0x22 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x23.ts


const LineEvent0x23_fields = netlog_defs/* default.Tether.fields */.Z.Tether.fields;

// Tether event
class LineEvent0x23 extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x23_fields.sourceId]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x23_fields.source] ?? '';
    this.targetId = parts[LineEvent0x23_fields.targetId]?.toUpperCase() ?? '';
    this.targetName = parts[LineEvent0x23_fields.target] ?? '';
    this.tetherId = parts[LineEvent0x23_fields.id] ?? '';
  }
}
class LineEvent35 extends LineEvent0x23 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x24.ts


const LineEvent0x24_fields = netlog_defs/* default.LimitBreak.fields */.Z.LimitBreak.fields;

// Limit gauge event
class LineEvent0x24 extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.valueHex = parts[LineEvent0x24_fields.valueHex] ?? '';
    this.valueDec = parseInt(this.valueHex, 16);
    this.bars = parts[LineEvent0x24_fields.bars] ?? '';
  }
}
class LineEvent36 extends LineEvent0x24 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x25.ts


const LineEvent0x25_fields = netlog_defs/* default.NetworkEffectResult.fields */.Z.NetworkEffectResult.fields;

// Action sync event
class LineEvent0x25 extends LineEvent {
  isSource = true;
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x25_fields.id]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x25_fields.name] ?? '';
    this.sequenceId = parts[LineEvent0x25_fields.sequenceId] ?? '';
    this.hp = parseInt(parts[LineEvent0x25_fields.currentHp] ?? '');
    this.maxHp = parseInt(parts[LineEvent0x25_fields.maxHp] ?? '');
    this.mp = parseInt(parts[LineEvent0x25_fields.currentMp] ?? '');
    this.maxMp = parseInt(parts[LineEvent0x25_fields.maxMp] ?? '');
    this.x = parseFloat(parts[LineEvent0x25_fields.x] ?? '');
    this.y = parseFloat(parts[LineEvent0x25_fields.y] ?? '');
    this.z = parseFloat(parts[LineEvent0x25_fields.z] ?? '');
    this.heading = parseFloat(parts[LineEvent0x25_fields.heading] ?? '');
  }
}
class LineEvent37 extends LineEvent0x25 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x26.ts




const LineEvent0x26_fields = netlog_defs/* default.StatusEffect.fields */.Z.StatusEffect.fields;

// Network status effect event
class LineEvent0x26 extends LineEvent {
  isSource = true;
  isJobLevel = true;
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x26_fields.targetId]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x26_fields.target] ?? '';
    this.jobLevelData = parts[LineEvent0x26_fields.jobLevelData] ?? '';
    this.hp = parseInt(parts[LineEvent0x26_fields.hp] ?? '');
    this.maxHp = parseInt(parts[LineEvent0x26_fields.maxHp] ?? '');
    this.mp = parseInt(parts[LineEvent0x26_fields.mp] ?? '');
    this.maxMp = parseInt(parts[LineEvent0x26_fields.maxMp] ?? '');
    this.x = parseFloat(parts[LineEvent0x26_fields.x] ?? '');
    this.y = parseFloat(parts[LineEvent0x26_fields.y] ?? '');
    this.z = parseFloat(parts[LineEvent0x26_fields.z] ?? '');
    this.heading = parseFloat(parts[LineEvent0x26_fields.heading] ?? '');
    const padded = stringhandlers.zeroPad(this.jobLevelData, 8);
    this.jobIdHex = padded.slice(6, 8).toUpperCase();
    this.jobId = parseInt(this.jobIdHex, 16);
    this.job = util/* default.jobEnumToJob */.Z.jobEnumToJob(this.jobId);
    this.level = parseInt(padded.slice(4, 6), 16);
  }
}
class LineEvent38 extends LineEvent0x26 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x27.ts


const LineEvent0x27_fields = netlog_defs/* default.NetworkUpdateHP.fields */.Z.NetworkUpdateHP.fields;

// Network update hp event
class LineEvent0x27 extends LineEvent {
  isSource = true;
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x27_fields.id]?.toUpperCase() ?? '';
    this.name = parts[LineEvent0x27_fields.name] ?? '';
    this.hp = parseInt(parts[LineEvent0x27_fields.currentHp] ?? '');
    this.maxHp = parseInt(parts[LineEvent0x27_fields.maxHp] ?? '');
    this.mp = parseInt(parts[LineEvent0x27_fields.currentMp] ?? '');
    this.maxMp = parseInt(parts[LineEvent0x27_fields.maxMp] ?? '');
    this.x = parseFloat(parts[LineEvent0x27_fields.x] ?? '');
    this.y = parseFloat(parts[LineEvent0x27_fields.y] ?? '');
    this.z = parseFloat(parts[LineEvent0x27_fields.z] ?? '');
    this.heading = parseFloat(parts[LineEvent0x27_fields.heading] ?? '');
  }
}
class LineEvent39 extends LineEvent0x27 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x28.ts


const LineEvent0x28_fields = netlog_defs/* default.Map.fields */.Z.Map.fields;

// ChangeMap event
class LineEvent0x28 extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.id = parts[LineEvent0x28_fields.id] ?? '';
    this.regionName = parts[LineEvent0x28_fields.regionName] ?? '';
    this.placeName = parts[LineEvent0x28_fields.placeName] ?? '';
    this.placeNameSub = parts[LineEvent0x28_fields.placeNameSub] ?? '';
  }
}
class LineEvent40 extends LineEvent0x28 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x29.ts


const LineEvent0x29_fields = netlog_defs/* default.SystemLogMessage.fields */.Z.SystemLogMessage.fields;

// SystemLogMessage event
class LineEvent0x29 extends LineEvent {
  constructor(repo, line, parts) {
    super(repo, line, parts);
    this.instance = parts[LineEvent0x29_fields.instance] ?? '';
    this.id = parts[LineEvent0x29_fields.id] ?? '';
    this.param0 = parts[LineEvent0x29_fields.param0] ?? '';
    this.param1 = parts[LineEvent0x29_fields.param1] ?? '';
    this.param2 = parts[LineEvent0x29_fields.param2] ?? '';
  }
}
class LineEvent41 extends LineEvent0x29 {}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/ParseLine.ts




























class ParseLine {
  static parse(repo, line) {
    let ret;
    const parts = line.split('|');
    const event = parts[0];

    // Don't parse raw network packet lines
    if (event === undefined || event === '252') return;

    // This is ugly, but Webpack prefers being explicit
    switch (`LineEvent${event}`) {
      case 'LineEvent00':
        ret = new LineEvent00(repo, line, parts);
        break;
      case 'LineEvent01':
        ret = new LineEvent01(repo, line, parts);
        break;
      case 'LineEvent02':
        ret = new LineEvent02(repo, line, parts);
        break;
      case 'LineEvent03':
        ret = new LineEvent03(repo, line, parts);
        break;
      case 'LineEvent04':
        ret = new LineEvent04(repo, line, parts);
        break;
      case 'LineEvent12':
        ret = new LineEvent12(repo, line, parts);
        break;
      case 'LineEvent20':
        ret = new LineEvent20(repo, line, parts);
        break;
      case 'LineEvent21':
        ret = new LineEvent21(repo, line, parts);
        break;
      case 'LineEvent22':
        ret = new LineEvent22(repo, line, parts);
        break;
      case 'LineEvent23':
        ret = new LineEvent23(repo, line, parts);
        break;
      case 'LineEvent24':
        ret = new LineEvent24(repo, line, parts);
        break;
      case 'LineEvent25':
        ret = new LineEvent25(repo, line, parts);
        break;
      case 'LineEvent26':
        ret = new LineEvent26(repo, line, parts);
        break;
      case 'LineEvent27':
        ret = new LineEvent27(repo, line, parts);
        break;
      case 'LineEvent28':
        ret = new LineEvent28(repo, line, parts);
        break;
      case 'LineEvent29':
        ret = new LineEvent29(repo, line, parts);
        break;
      case 'LineEvent30':
        ret = new LineEvent30(repo, line, parts);
        break;
      case 'LineEvent31':
        ret = new LineEvent31(repo, line, parts);
        break;
      case 'LineEvent34':
        ret = new LineEvent34(repo, line, parts);
        break;
      case 'LineEvent35':
        ret = new LineEvent35(repo, line, parts);
        break;
      case 'LineEvent36':
        ret = new LineEvent36(repo, line, parts);
        break;
      case 'LineEvent37':
        ret = new LineEvent37(repo, line, parts);
        break;
      case 'LineEvent38':
        ret = new LineEvent38(repo, line, parts);
        break;
      case 'LineEvent39':
        ret = new LineEvent39(repo, line, parts);
        break;
      case 'LineEvent40':
        ret = new LineEvent40(repo, line, parts);
        break;
      case 'LineEvent41':
        ret = new LineEvent41(repo, line, parts);
        break;
      case 'LineEvent261':
        ret = new LineEvent261(repo, line, parts);
        break;
      default:
        ret = new LineEvent(repo, line, parts);
    }

    // Also don't parse lines with a non-sane date. This is 2000-01-01 00:00:00
    if (ret.timestamp < 946684800) return;

    // Finally, if the object marks itself as invalid, skip it
    if (ret.invalid) return;
    return ret;
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/NetworkLogConverter.ts



const isLineEvent = line => {
  return !!line;
};
class NetworkLogConverter extends EventBus {
  convertFile(data) {
    const repo = new LogRepository();
    return this.convertLines(
    // Split data into an array of separate lines, removing any blank lines.
    data.split(NetworkLogConverter.lineSplitRegex).filter(l => l !== ''), repo);
  }
  convertLines(lines, repo) {
    return lines.map(l => ParseLine.parse(repo, l)).filter(isLineEvent);
  }
  static lineSplitRegex = /\r?\n/gm;
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/Encounter.ts








const isPetName = (name, language) => {
  if (language) return pet_names[language].includes(name);
  for (const lang in pet_names) {
    if (!(0,languages/* isLang */.jd)(lang)) throw new not_reached/* UnreachableCode */.$();
    if (pet_names[lang].includes(name)) return true;
  }
  return false;
};
const isValidTimestamp = timestamp => {
  return timestamp > 0 && timestamp < Number.MAX_SAFE_INTEGER;
};
class Encounter {
  static encounterVersion = 2;
  initialOffset = Number.MAX_SAFE_INTEGER;
  endStatus = 'Unknown';
  startStatus = 'Unknown';
  engageAt = Number.MAX_SAFE_INTEGER;
  firstPlayerAbility = Number.MAX_SAFE_INTEGER;
  firstEnemyAbility = Number.MAX_SAFE_INTEGER;
  firstLineIndex = 0;
  startTimestamp = 0;
  endTimestamp = 0;
  duration = 0;
  tzOffsetMillis = 0;
  playbackOffset = 0;
  language = 'en';
  initialTimestamp = Number.MAX_SAFE_INTEGER;
  constructor(encounterDay, encounterZoneId, encounterZoneName, logLines) {
    this.encounterDay = encounterDay;
    this.encounterZoneId = encounterZoneId;
    this.encounterZoneName = encounterZoneName;
    this.logLines = logLines;
    this.version = Encounter.encounterVersion;
  }
  initialize() {
    const startStatuses = new Set();
    for (const line of this.logLines) {
      this.tzOffsetMillis = line.tzOffsetMillis;
      let res = EmulatorCommon.matchStart(line.networkLine);
      if (res) {
        this.firstLineIndex = line.index;
        if (res.StartType) startStatuses.add(res.StartType);
        const startIn = parseInt(res.StartIn);
        if (startIn >= 0) this.engageAt = Math.min(line.timestamp + startIn, this.engageAt);
      } else {
        res = EmulatorCommon.matchEnd(line.networkLine);
        if (res) {
          if (res.EndType) this.endStatus = res.EndType;
        } else if (isLineEventSource(line) && isLineEventTarget(line)) {
          if (line.id.startsWith('1') || line.id.startsWith('4') && isPetName(line.name, this.language)) {
            // Player or pet ability
            if (line.targetId.startsWith('4') && !isPetName(line.targetName, this.language)) {
              // Targetting non player or pet
              this.firstPlayerAbility = Math.min(this.firstPlayerAbility, line.timestamp);
            }
          } else if (line.id.startsWith('4') && !isPetName(line.name, this.language)) {
            // Non-player ability
            if (line.targetId.startsWith('1') || isPetName(line.targetName, this.language)) {
              // Targetting player or pet
              this.firstEnemyAbility = Math.min(this.firstEnemyAbility, line.timestamp);
            }
          }
        }
      }
      const matchedLang = res?.language;
      if ((0,languages/* isLang */.jd)(matchedLang)) this.language = matchedLang;
    }
    this.combatantTracker = new CombatantTracker(this.logLines, this.language);
    this.startTimestamp = this.combatantTracker.firstTimestamp;
    this.endTimestamp = this.combatantTracker.lastTimestamp;
    this.duration = this.endTimestamp - this.startTimestamp;
    if (this.initialOffset === Number.MAX_SAFE_INTEGER) {
      if (this.engageAt < Number.MAX_SAFE_INTEGER) this.initialOffset = this.engageAt - this.startTimestamp;else if (this.firstPlayerAbility < Number.MAX_SAFE_INTEGER) this.initialOffset = this.firstPlayerAbility - this.startTimestamp;else if (this.firstEnemyAbility < Number.MAX_SAFE_INTEGER) this.initialOffset = this.firstEnemyAbility - this.startTimestamp;else this.initialOffset = 0;
    }
    this.initialTimestamp = this.startTimestamp + this.initialOffset;
    const firstLine = this.logLines[this.firstLineIndex];
    if (firstLine && firstLine.offset) this.playbackOffset = firstLine.offset;
    this.startStatus = [...startStatuses].sort().join(', ');
  }
  shouldPersistFight() {
    return isValidTimestamp(this.firstPlayerAbility) && isValidTimestamp(this.firstEnemyAbility);
  }
  upgrade(version) {
    if (Encounter.encounterVersion <= version) return false;
    const repo = new LogRepository();
    const converter = new NetworkLogConverter();
    this.logLines = converter.convertLines(this.logLines.map(l => l.networkLine), repo);
    this.version = Encounter.encounterVersion;
    this.initialize();
    return true;
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/PersistorEncounter.ts

class PersistorEncounter {
  constructor(encounter) {
    if (!encounter.combatantTracker) throw new not_reached/* UnreachableCode */.$();
    this.id = encounter.id ?? 0;
    this.name = encounter.combatantTracker.getMainCombatantName();
    this.start = encounter.startTimestamp;
    this.offset = encounter.initialOffset;
    this.tzOffsetMillis = encounter.tzOffsetMillis;
    this.startStatus = encounter.startStatus;
    this.endStatus = encounter.endStatus;
    this.zoneId = encounter.encounterZoneId;
    this.zoneName = encounter.encounterZoneName;
    this.duration = encounter.endTimestamp - encounter.startTimestamp;
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/Persistor.ts





class Persistor extends $n {
  constructor() {
    super('RaidEmulatorEncounters');
    this.version(1).stores({
      EncounterSummaries: '++id,start,zoneName,[zoneName+start]',
      Encounters: '++id'
    });
    this.encounters = this.table('Encounters');
    this.encounterSummaries = this.table('EncounterSummaries');
    this.encounterSummaries.mapToClass(PersistorEncounter);
    this.use({
      stack: 'dbcore',
      create: down => {
        return {
          ...down,
          table: name => {
            const table = down.table(name);
            if (name === 'Encounters') {
              return {
                ...table,
                get: async req => {
                  const obj = await table.get(req);
                  Object.setPrototypeOf(obj, Encounter.prototype);
                  for (const line of obj.logLines) Object.setPrototypeOf(line, LineEvent.prototype);

                  // Check for encounter upgrade, re-save encounter if it's upgraded.
                  if (obj.upgrade(obj.version)) {
                    await this.persistEncounter(obj);
                    return obj;
                  }
                  obj.initialize();
                  return obj;
                }
              };
            }
            return table;
          }
        };
      }
    });
  }
  async loadEncounter(id) {
    let enc;
    await this.transaction('readwrite', [this.encounters, this.encounterSummaries], async () => {
      enc = await this.encounters.get(id);
    });
    return enc;
  }
  async persistEncounter(baseEncounter) {
    const summary = new PersistorEncounter(baseEncounter);
    if (baseEncounter.id !== undefined) {
      await this.encounterSummaries.put(summary, baseEncounter.id);
      return this.encounters.put(baseEncounter, baseEncounter.id);
    }
    const id = await this.encounters.add(baseEncounter);
    baseEncounter.id = id;
    summary.id = id;
    return this.encounterSummaries.add(summary, id);
  }
  async deleteEncounter(id) {
    await this.encounterSummaries.delete(id);
    return this.encounters.delete(id);
  }
  async clearDB() {
    await this.encounters.clear();
    await this.encounterSummaries.clear();
  }
  async exportDB() {
    return this.export();
  }
  async importDB(file) {
    return this.import(file);
  }
}
;// CONCATENATED MODULE: ./resources/player_override.ts



// Will redirect calls from `onPlayerChangedEvent` to |func| overriding with
// |playerName| and their job.  Job is important for raidboss.
// It might be nice to do HP, because otherwise the math section of
// Ridorana Lighthouse won't work.
//
// Other parts of the player (such that would help the jobs overlay run)
// are deliberately not included here, because it's impossible to run
// jobs remotely due to gauge data being local and many bits of information
// loaded from memory.
// @TODO: Swap the order of these arguments, make playerName optional instead
const addPlayerChangedOverrideListener = (func, playerName) => {
  let lastPlayerChangedEvent = null;
  let lastPlayerJob = null;
  const onPlayerChanged = e => {
    if (playerName !== undefined && playerName.length > 0) {
      e.detail.name = playerName;
      if (lastPlayerJob) {
        // Use the non-overridden job if we don't know an overridden one.
        e.detail.job = lastPlayerJob;
      }
    }
    lastPlayerChangedEvent = e;
    func(e);
  };
  (0,overlay_plugin_api/* addOverlayListener */.PS)('onPlayerChangedEvent', onPlayerChanged);
  if (playerName === undefined || playerName.length === 0) return;
  (0,overlay_plugin_api/* addOverlayListener */.PS)('PartyChanged', e => {
    const player = e.party.find(p => p.name === playerName);
    if (!player) return;
    const newJob = util/* default.jobEnumToJob */.Z.jobEnumToJob(player.job);
    if (newJob === lastPlayerJob) return;
    lastPlayerJob = newJob;
    // This event may come before the first onPlayerChangedEvent.
    if (lastPlayerChangedEvent) onPlayerChanged(lastPlayerChangedEvent);
  });
};

// Common UI for selecting a player.
// Only used for raidboss, but could ostensibly be reused for oopsy,
// if there's ever player specific stuff.
// TODO: it would be nice to show the "connected / not connected" bit in the UI.
const addRemotePlayerSelectUI = lang => {
  const instructionTextByLang = {
    en: 'Select a Player\n(the list will update when in an instance)',
    de: 'Wähle einen Spieler\n(Diese Liste aktualisiert sich, sobald eine Instance betretten wird)',
    fr: 'Sélectionner un joueur\n (la liste se mettra à jour dans une instance)',
    ja: 'プレーヤー名を選択してください\n(インスタンスに入るとリストが更新する)',
    cn: '请选择玩家名称\n(此列表将会在进入副本后更新)',
    ko: '플레이어를 선택하세요\n(인스턴스에 있으면 리스트가 업데이트됩니다.)'
  };
  const forceTTSByLang = {
    en: 'Force Enable Text To Speech',
    de: 'Erzwinge Text in Sprache (TTS)',
    fr: 'Forcer l\'activation de la synthèse vocale (TTS)',
    ja: 'TTSを強制的に有効化する',
    cn: '强制启用TTS',
    ko: 'TTS 기능을 활성화하기'
  };
  const buttonTextByLang = {
    en: 'Start Overlay',
    de: 'Start Overlay',
    fr: 'Démarrer l\'Overlay',
    ja: 'オーバーレイを起動',
    cn: '启用悬浮窗',
    ko: '오버레이 시작'
  };
  const defaultTextByLang = {
    en: '(no override)',
    de: '(kein überschreiben)',
    fr: '(pas de dérogation)',
    ja: '(既定値)',
    cn: '(默认值)',
    ko: '(플레이어 지정 안함)'
  };

  // TODO: probably should save forceTTS as well, maybe save some {} options?
  const kStorageKey = 'cactbot-last-selected-player';
  const savePlayerName = name => {
    window.localStorage.setItem(kStorageKey, name);
  };
  const loadPlayerName = () => {
    return window.localStorage.getItem(kStorageKey);
  };

  // Add common UI to select a player.
  const container = document.createElement('div');
  container.id = 'player-select';
  document.body.appendChild(container);
  const instructionElem = document.createElement('div');
  instructionElem.id = 'player-select-instructions';
  instructionElem.innerHTML = instructionTextByLang[lang] || instructionTextByLang['en'];
  container.appendChild(instructionElem);
  const listElem = document.createElement('div');
  listElem.id = 'player-select-list';
  container.appendChild(listElem);
  const ttsElem = document.createElement('input');
  ttsElem.type = 'checkbox';
  ttsElem.id = 'player-select-tts';
  ttsElem.name = 'player-select-tts';
  container.appendChild(ttsElem);
  const ttsLabel = document.createElement('label');
  ttsLabel.id = 'player-select-tts-label';
  ttsLabel.htmlFor = 'player-select-tts';
  ttsLabel.innerHTML = forceTTSByLang[lang] || forceTTSByLang['en'];
  container.appendChild(ttsLabel);
  const buttonElem = document.createElement('button');
  buttonElem.id = 'player-select-button';
  buttonElem.name = 'player-select-button';
  buttonElem.innerHTML = buttonTextByLang[lang] || buttonTextByLang['en'];
  container.appendChild(buttonElem);
  buttonElem.addEventListener('click', () => {
    const forceTTS = ttsElem.checked;
    let playerName = '';
    let radioIndex = 0;
    for (;;) {
      radioIndex++;
      const elem = document.getElementById(`player-radio-${radioIndex}`);
      if (!elem || !(elem instanceof HTMLInputElement)) break;
      if (!elem.checked) continue;
      playerName = elem.value;
      break;
    }
    if (playerName) savePlayerName(playerName);

    // Preserve existing parameters.
    const currentParams = new URLSearchParams(window.location.search);
    const paramMap = {};
    // Yes, this is (v, k) and not (k, v).
    currentParams.forEach((v, k) => paramMap[k] = decodeURIComponent(v));
    paramMap.player = playerName;
    // Use 1/0 to be consistent with other query parameters rather than string true/false.
    paramMap.forceTTS = forceTTS ? 1 : 0;

    // TODO: overlay_plugin_api.js doesn't support uri encoded OVERLAY_WS parameters.
    // So this can't use URLSearchParams.toString yet.  Manually build string.
    let search = '?';
    for (const [k, v] of Object.entries(paramMap)) search += `${k}=${v}&`;

    // Reload the page with more options.
    window.location.search = search;
  });
  const lastSelectedPlayer = loadPlayerName();
  const buildList = party => {
    while (listElem.firstChild) {
      if (listElem.lastChild) listElem.removeChild(listElem.lastChild);
    }
    let radioCount = 0;
    const addRadio = (name, value, extraClass) => {
      radioCount++;
      const inputName = `player-radio-${radioCount}`;
      const inputElem = document.createElement('input');
      inputElem.type = 'radio';
      inputElem.value = value;
      inputElem.id = inputName;
      inputElem.name = 'player-radio';
      inputElem.classList.add('player-radio', extraClass);
      listElem.appendChild(inputElem);
      const labelElem = document.createElement('label');
      labelElem.htmlFor = inputName;
      labelElem.innerHTML = name;
      listElem.appendChild(labelElem);
      return inputElem;
    };
    const defaultText = defaultTextByLang[lang] || defaultTextByLang['en'];
    const defaultElem = addRadio(defaultText, '', 'player-radio-default');
    defaultElem.checked = true;
    if (lastSelectedPlayer !== null && lastSelectedPlayer.length > 0) {
      const last = addRadio(lastSelectedPlayer, lastSelectedPlayer, 'player-radio-last');
      last.checked = true;
    }
    const partyPlayers = party.filter(p => p.inParty && p.name !== lastSelectedPlayer);
    const partyNames = partyPlayers.map(p => p.name).sort();
    for (const name of partyNames) addRadio(name, name, 'player-radio-party');
    const alliancePlayers = party.filter(p => !p.inParty && p.name !== lastSelectedPlayer);
    const allianceNames = alliancePlayers.map(p => p.name).sort();
    for (const name of allianceNames) addRadio(name, name, 'player-radio-alliance');
  };
  addOverlayListener('PartyChanged', e => {
    buildList(e.party);
  });
  buildList([]);
};
// EXTERNAL MODULE: ./resources/zone_id.ts
var zone_id = __webpack_require__(588);
;// CONCATENATED MODULE: ./ui/raidboss/autoplay_helper.ts
class AutoplayHelper {
  static isButtonCreated = false;
  static getContext() {
    AutoplayHelper.context ??= new AudioContext();
    return AutoplayHelper.context;
  }
  static CheckIfAlreadyRunning() {
    // This check will only ever succeed on running Chromium passing
    //  --autoplay-policy=no-user-gesture-required
    // as command line argument or configuring CEF the correct way.
    // Once https://bugs.chromium.org/p/chromium/issues/detail?id=1106380
    // is fixed this function will return false on every (up-to-date) browser
    const context = AutoplayHelper.getContext();
    return context.state === 'running';
  }
  static Prompt() {
    if (AutoplayHelper.isButtonCreated) {
      return;
    }
    const context = AutoplayHelper.getContext();
    const button = document.createElement('button');
    button.innerText = 'Click to enable audio';
    button.classList.add('autoplay-helper-button');
    button.onclick = function () {
      void context.resume();
    };
    context.onstatechange = function () {
      button.remove();
    };
    document.body.appendChild(button);
    AutoplayHelper.isButtonCreated = true;
  }
  static CheckAndPrompt() {
    if (!AutoplayHelper.CheckIfAlreadyRunning()) AutoplayHelper.Prompt();
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/browser_tts_engine.ts
class TTSItem {
  constructor(text, lang, voice) {
    this.text = text;
    this.item = new SpeechSynthesisUtterance(text);
    if (lang !== undefined) this.item.lang = lang;
    if (voice) this.item.voice = voice;
  }
  play() {
    window.speechSynthesis.speak(this.item);
  }
}
class BrowserTTSEngine {
  ttsItems = {};
  initializeAttempts = 0;
  constructor(cactbotLang) {
    this.cactbotLang = cactbotLang;
    if (window.speechSynthesis !== undefined) {
      // https://bugs.chromium.org/p/chromium/issues/detail?id=334847
      window.speechSynthesis.getVoices();
      window.speechSynthesis.onvoiceschanged = () => this.initializeVoice();
    } else console.error('BrowserTTS error: no browser support for window.speechSynthesis');
  }
  initializeVoice() {
    if (window.speechSynthesis === undefined) return false;
    if (this.speechVoice !== undefined) return true;
    if (this.initializeAttempts > 5) return false;
    this.initializeAttempts++;
    const cactbotLangToSpeechLang = {
      en: 'en-US',
      de: 'de-DE',
      fr: 'fr-FR',
      ja: 'ja-JP',
      // TODO: maybe need to provide an option of zh-CN, zh-HK, zh-TW?
      cn: 'zh-CN',
      ko: 'ko-KR'
    };

    // figure out what TTS engine type we need
    const speechLang = cactbotLangToSpeechLang[this.cactbotLang];
    const voice = window.speechSynthesis.getVoices().find(voice => voice.lang.replaceAll('_', '-') === speechLang);
    if (voice) {
      this.speechLang = speechLang;
      this.speechVoice = voice;
      window.speechSynthesis.onvoiceschanged = null;
      return true;
    }
    console.error('BrowserTTS error: could not find voice');
    return false;
  }
  play(text) {
    // TODO: try to address a report of the constructor not finding voices
    // by lazily looking later.
    if (!this.initializeVoice()) return;
    try {
      let ttsItem = this.ttsItems[text];
      if (!ttsItem) {
        ttsItem = new TTSItem(text, this.speechLang, this.speechVoice);
        this.ttsItems[text] = ttsItem;
      }
      ttsItem.play();
    } catch (e) {
      console.error('Exception performing TTS', e);
    }
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/popup-text.ts












const isRaidbossLooseTimelineTrigger = trigger => {
  return 'isTimelineTrigger' in trigger;
};
const isNetRegexTrigger = trigger => {
  if (trigger && !isRaidbossLooseTimelineTrigger(trigger)) return 'netRegex' in trigger;
  return false;
};
const isRegexTrigger = trigger => {
  if (trigger && !isRaidbossLooseTimelineTrigger(trigger)) return 'regex' in trigger;
  return false;
};
// There should be (at most) six lines of instructions.
const raidbossInstructions = {
  en: ['Instructions as follows:', 'This is debug text for resizing.', 'It goes away when you lock the overlay', 'along with the blue background.', 'Timelines and triggers will show up in supported zones.', 'Test raidboss with a /countdown in Summerford Farms.'],
  de: ['Anweisungen wie folgt:', 'Dies ist ein Debug-Text zur Größenänderung.', 'Er verschwindet, wenn du das Overlay sperrst,', 'zusammen mit dem blauen Hintergrund.', 'Timeline und Trigger werden in den unterstützten Zonen angezeigt.', 'Testen Sie Raidboss mit einem /countdown in Sommerfurt-Höfe.'],
  fr: ['Instructions :', 'Ceci est un texte de test pour redimensionner.', 'Il disparaitra \(ainsi que le fond bleu\) quand', 'l\'overlay sera bloqué.', 'Les timelines et triggers seront affichés dans les zones supportées.', 'Testez raidboss avec un /countdown aux Vergers d\'Estival'],
  ja: ['操作手順：', 'デバッグ用のテキストです。', '青色のオーバーレイを', 'ロックすれば消える。', 'サポートするゾーンにタイムラインとトリガーテキストが表示できる。', 'サマーフォード庄に/countdownコマンドを実行し、raidbossをテストできる。'],
  cn: ['请按以下步骤操作：', '这是供用户调整悬浮窗大小的调试用文本', '当你锁定此蓝色背景的悬浮窗', '该文本即会消失。', '在支持的区域中会自动加载时间轴和触发器。', '可在盛夏农庄使用/countdown命令测试该raidboss模块。'],
  ko: ['<조작 설명>', '크기 조정을 위한 디버그 창입니다', '파란 배경과 이 텍스트는', '오버레이를 위치잠금하면 사라집니다', '지원되는 구역에서 타임라인과 트리거가 표시됩니다', '여름여울 농장에서 초읽기를 실행하여 테스트 해볼 수 있습니다']
};

// Because apparently people don't understand uppercase greek letters,
// add a special case to not uppercase them.
const triggerUpperCase = str => {
  return str.replace(/[^αβγδ]/g, x => x.toUpperCase());
};
const onTriggerException = (trigger, e) => {
  // When a fight ends and there are open promises, from delaySeconds or promise itself,
  // all promises will be rejected.  In this case there is no error; simply return without logging.
  if (e === null || typeof e !== 'object') return;
  let str = `Error in trigger: ${trigger.id !== undefined ? trigger.id : '[unknown trigger id]'}`;
  if (trigger.filename !== undefined) str += ` (${trigger.filename})`;
  console.error(str);
  if (e instanceof Error) {
    const lines = e.stack?.split('\n') ?? [];
    for (let i = 0; i < lines.length; ++i) console.error(lines[i]);
  }
};
const sounds = ['Alarm', 'Alert', 'Info', 'Long', 'Pull'];
const soundStrs = sounds;
const texts = (/* unused pure expression or super */ null && (['info', 'alert', 'alarm']));
const textMap = {
  info: {
    text: 'infoText',
    upperText: 'InfoText',
    upperSound: 'InfoSound',
    upperSoundVolume: 'InfoSoundVolume',
    rumbleDuration: 'InfoRumbleDuration',
    rumbleWeak: 'InfoRumbleWeak',
    rumbleStrong: 'InfoRumbleStrong'
  },
  alert: {
    text: 'alertText',
    upperText: 'AlertText',
    upperSound: 'AlertSound',
    upperSoundVolume: 'AlertSoundVolume',
    rumbleDuration: 'AlertRumbleDuration',
    rumbleWeak: 'AlertRumbleWeak',
    rumbleStrong: 'AlertRumbleStrong'
  },
  alarm: {
    text: 'alarmText',
    upperText: 'AlarmText',
    upperSound: 'AlarmSound',
    upperSoundVolume: 'AlarmSoundVolume',
    rumbleDuration: 'AlarmRumbleDuration',
    rumbleWeak: 'AlarmRumbleWeak',
    rumbleStrong: 'AlarmRumbleStrong'
  }
};

// Helper for handling trigger overrides.
//
// asList will return a list of triggers in the same order as append was called, except:
// If a later trigger has the same id as a previous trigger, it will replace the previous trigger
// and appear in the same order that the previous trigger appeared.
// e.g. a, b1, c, b2 (where b1 and b2 share the same id) yields [a, b2, c] as the final list.
//
// JavaScript dictionaries are *almost* ordered automatically as we would want,
// but want to handle missing ids and integer ids (you shouldn't, but just in case).
class OrderedTriggerList {
  triggers = [];
  idToIndex = {};
  push(trigger) {
    const idx = trigger.id !== undefined ? this.idToIndex[trigger.id] : undefined;
    if (idx !== undefined && trigger.id !== undefined) {
      const oldTrigger = this.triggers[idx];
      if (oldTrigger === undefined) throw new not_reached/* UnreachableCode */.$();

      // TODO: be verbose now while this is fresh, but hide this output behind debug flags later.
      const triggerFile = trigger => trigger.filename !== undefined ? `'${trigger.filename}'` : 'user override';
      const oldFile = triggerFile(oldTrigger);
      const newFile = triggerFile(trigger);
      console.log(`Overriding '${trigger.id}' from ${oldFile} with ${newFile}.`);
      this.triggers[idx] = trigger;
      return;
    }

    // Normal case of a new trigger, with no overriding.
    if (trigger.id !== undefined) this.idToIndex[trigger.id] = this.triggers.length;
    this.triggers.push(trigger);
  }
  asList() {
    return this.triggers;
  }
}
const isObject = x => x instanceof Object;

// User trigger may pass anything as parameters

class TriggerOutputProxy {
  overrideStrings = {};
  responseOutputStrings = {};
  unknownValue = '???';
  constructor(trigger, displayLang, perTriggerAutoConfig) {
    this.trigger = trigger;
    this.displayLang = displayLang;
    this.perTriggerAutoConfig = perTriggerAutoConfig;
    this.outputStrings = trigger.outputStrings ?? {};
    if (trigger.id !== undefined && perTriggerAutoConfig) {
      const config = perTriggerAutoConfig[trigger.id];
      if (config && config.OutputStrings) this.overrideStrings = config.OutputStrings;
    }
    return new Proxy(this, {
      // Response output string subtlety:
      // Take this example response:
      //
      //    response: (data, matches, output) => {
      //      return {
      //        alarmText: output.someAlarm(),
      //        outputStrings: { someAlarm: 'string' }, // <- impossible
      //      };
      //    },
      //
      // Because the object being returned is evaluated all at once, the object
      // cannot simultaneously define outputStrings and use those outputStrings.
      // So, instead, responses need to set `output.responseOutputStrings`.
      // HOWEVER, this also has its own issues!  This value is set for the trigger
      // (which may have multiple active in flight instances).  This *should* be
      // ok because we guarantee that response/alarmText/alertText/infoText/tts
      // are evaluated sequentially for a single trigger before any other trigger
      // instance evaluates that set of triggers.  Finally, for ease of automating
      // the config ui, the response should return the exact same set of
      // outputStrings every time.  Thank you for coming to my TED talk.
      set(target, property, value) {
        if (property === 'responseOutputStrings') {
          if (isObject(value)) {
            target[property] = value;
            return true;
          }
          console.error(`Invalid responseOutputStrings on trigger ${target.trigger.id ?? 'Unknown'}`);
          return false;
        }

        // Be kind to user triggers that do weird things, and just console error this
        // instead of throwing an exception.
        console.error(`Invalid property '${String(property)}' on output.`);
        return false;
      },
      get(target, name) {
        // TODO: add a test that verifies nobody does this.
        if (name === 'toJSON' || typeof name !== 'string') return '{}';

        // Because output.func() must exist at the time of trigger eval,
        // always provide a function even before we know which keys are valid.
        return params => {
          const id = target.trigger.id ?? 'Unknown Trigger';

          // Priority: per-trigger config from ui > response > built-in trigger
          // Ideally, response provides everything and trigger provides nothing,
          // or there's no response and trigger provides everything.  Having
          // this well-defined smooths out the collision edge cases.
          let str = target.getReplacement(target.overrideStrings[name], params, name, id);
          if (str === undefined) {
            const responseString = target.responseOutputStrings[name];
            if (isObject(responseString)) str = target.getReplacement(responseString, params, name, id);
          }
          if (str === undefined) str = target.getReplacement(target.outputStrings[name], params, name, id);
          if (str === undefined) {
            console.error(`Trigger ${target.trigger.id ?? ''} has missing outputString ${name}.`);
            return target.unknownValue;
          }
          return str;
        };
      }
    });
  }
  getReplacement(
  // Can't use optional modifier for this arg since the others aren't optional
  template, params, name, id) {
    // If an output strings entry is edited in the config UI and then blanked,
    // the entry will still exist in the config file as an empty string.
    // These should be ignored as not being an override.
    // TODO: maybe blanked/default entries should be deleted from the config?
    if (template === undefined || template === '') return;
    let value;
    if (typeof template === 'string')
      // user config
      value = template;else value = template[this.displayLang] ?? template['en'];
    if (typeof value !== 'string') {
      console.error(`Trigger ${id} has invalid outputString ${name}.`, JSON.stringify(template));
      return;
    }
    return value.replace(/\${\s*([^}\s]+)\s*}/g, (_fullMatch, key) => {
      if (params !== undefined && key in params) {
        const str = params[key];
        switch (typeof str) {
          case 'string':
            return str;
          case 'number':
            return str.toString();
        }
        console.error(`Trigger ${id} has non-string param value ${key}.`);
        return this.unknownValue;
      }
      console.error(`Trigger ${id} can't replace ${key} in ${JSON.stringify(template)}.`);
      return this.unknownValue;
    });
  }
  static makeOutput(trigger, displayLang, perTriggerAutoConfig) {
    // `Output` is the common type used for the trigger data interface to support arbitrary
    // string keys and always returns a string. However, TypeScript doesn't have good support
    // for the Proxy representing this structure so we need to cast Proxy => unknown => Output
    return new TriggerOutputProxy(trigger, displayLang, perTriggerAutoConfig);
  }
}
const defaultOutput = TriggerOutputProxy.makeOutput({}, 'en');
const wipeCactbotEcho = netregexes/* commonNetRegex.cactbotWipeEcho */.sL.cactbotWipeEcho;
const wipeEndEcho = netregexes/* commonNetRegex.userWipeEcho */.sL.userWipeEcho;
const wipeFadeIn = netregexes/* commonNetRegex.wipe */.sL.wipe;
const isWipe = line => {
  if (wipeCactbotEcho.test(line) || wipeEndEcho.test(line) || wipeFadeIn.test(line)) return true;
  return false;
};
class PopupText {
  triggers = [];
  netTriggers = [];
  timers = {};
  triggerSuppress = {};
  currentTriggerID = 0;
  inCombat = false;
  resetWhenOutOfCombat = true;
  // These are deliberately `| null` for raidemulator extendability reasons

  partyTracker = new PartyTracker();
  kMaxRowsOfText = 2;
  me = '';
  job = 'NONE';
  role = 'none';
  triggerSets = [];
  triggerSetsById = {};
  triggerSetConfig = {};
  zoneName = '';
  zoneId = -1;
  dataInitializers = [];
  constructor(options, timelineLoader, raidbossDataFiles) {
    this.options = options;
    this.timelineLoader = timelineLoader;
    this.raidbossDataFiles = raidbossDataFiles;
    this.options = options;
    this.timelineLoader = timelineLoader;
    this.ProcessDataFiles(raidbossDataFiles);
    this.infoText = document.getElementById('popup-text-info');
    this.alertText = document.getElementById('popup-text-alert');
    this.alarmText = document.getElementById('popup-text-alarm');
    this.parserLang = this.options.ParserLanguage ?? 'en';
    this.displayLang = this.options.AlertsLanguage ?? this.options.DisplayLanguage ?? this.options.ParserLanguage ?? 'en';
    if (this.options.IsRemoteRaidboss) {
      this.ttsEngine = new BrowserTTSEngine(this.displayLang);
      this.ttsSay = text => {
        this.ttsEngine?.play(this.options.TransformTts(text));
      };
    } else {
      this.ttsSay = text => {
        void (0,overlay_plugin_api/* callOverlayHandler */.ae)({
          call: 'cactbotSay',
          text: this.options.TransformTts(text)
        });
      };
    }
    this.data = this.getDataObject();

    // check to see if we need user interaction to play audio
    // only if audio is enabled in options
    if (this.options.AudioAllowed) AutoplayHelper.CheckAndPrompt();
    this.Reset();
    this.AddDebugInstructions();
    this.HookOverlays();
  }
  AddDebugInstructions() {
    raidbossInstructions[this.displayLang].forEach((line, i) => {
      const elem = document.getElementById(`instructions-${i}`);
      if (!elem) return;
      elem.innerHTML = line;
    });
  }
  HookOverlays() {
    (0,overlay_plugin_api/* addOverlayListener */.PS)('PartyChanged', e => {
      this.partyTracker.onPartyChanged(e);
    });
    addPlayerChangedOverrideListener(e => {
      this.OnPlayerChange(e);
    }, this.options.PlayerNameOverride);
    (0,overlay_plugin_api/* addOverlayListener */.PS)('ChangeZone', e => {
      this.OnChangeZone(e);
    });
    (0,overlay_plugin_api/* addOverlayListener */.PS)('onInCombatChangedEvent', e => {
      this.SetInCombat(e.detail.inGameCombat);
    });
    (0,overlay_plugin_api/* addOverlayListener */.PS)('onLogEvent', e => {
      this.OnLog(e);
    });
    (0,overlay_plugin_api/* addOverlayListener */.PS)('LogLine', e => {
      this.OnNetLog(e);
    });
  }
  OnPlayerChange(e) {
    if (this.job !== e.detail.job || this.me !== e.detail.name) this.OnJobChange(e);
    this.data.currentHP = e.detail.currentHP;
  }
  ProcessDataFiles(files) {
    this.triggerSets = [];
    this.triggerSetsById = {};
    for (const [filename, json] of Object.entries(files)) {
      if (!filename.endsWith('.js') && !filename.endsWith('.ts')) continue;
      if (typeof json !== 'object') {
        console.log(`Unexpected JSON from ${filename}, expected an array`);
        continue;
      }
      if (!json.triggers) {
        console.log(`Unexpected JSON from ${filename}, expected a triggers`);
        continue;
      }
      if (typeof json.triggers !== 'object' || !(json.triggers.length >= 0)) {
        console.log(`Unexpected JSON from ${filename}, expected triggers to be an array`);
        continue;
      }
      const processedSet = {
        filename: filename,
        ...json
      };
      this.triggerSets.push(processedSet);
    }

    // User triggers must come last so that they override built-in files.
    this.triggerSets.push(...this.options.Triggers);

    // Eliminate any trigger sets with duplicate ids and record a lookup by id.
    this.triggerSets = this.triggerSets.filter(triggerSet => {
      if (triggerSet.id === undefined) return true;
      if (this.triggerSetsById[triggerSet.id] !== undefined) {
        console.log(`${triggerSet.filename ?? '???'} has duplicate triggerSet id ${triggerSet.id}, ignoring triggers`);
        return false;
      }
      this.triggerSetsById[triggerSet.id] = triggerSet;
      return true;
    });
  }
  OnChangeZone(e) {
    // Note: this must check zone id and not zone name, as there are some zone name collisions.
    if (this.zoneId === e.zoneID) return;
    this.zoneName = e.zoneName;
    this.zoneId = e.zoneID;
    this.ReloadTimelines();
  }
  ReloadTimelines() {
    if (!this.me || !this.zoneName || !this.timelineLoader.IsReady()) return;

    // Drop the triggers and timelines from the previous zone, so we can add new ones.
    this.triggers = [];
    this.netTriggers = [];
    this.dataInitializers = [];
    this.triggerSetConfig = {};
    let timelineFiles = [];
    let timelines = [];
    const replacements = [];
    const timelineStyles = [];
    this.resetWhenOutOfCombat = true;
    const orderedTriggers = new OrderedTriggerList();

    // Some user timelines may rely on having valid init data
    // Don't use `this.Reset()` since that clears other things as well
    this.data = this.getDataObject();

    // Recursively/iteratively process timeline entries for triggers.
    // Functions get called with data, arrays get iterated, strings get appended.
    const addTimeline = function (obj) {
      if (Array.isArray(obj)) {
        for (const objVal of obj) addTimeline(objVal);
      } else if (typeof obj === 'function') {
        addTimeline(obj(this.data));
      } else if (obj !== undefined) {
        timelines.push(obj);
      }
    }.bind(this);

    // construct something like regexDe or regexFr.
    const langSuffix = this.parserLang.charAt(0).toUpperCase() + this.parserLang.slice(1);
    const regexParserLang = `regex${langSuffix}`;
    const netRegexParserLang = `netRegex${langSuffix}`;
    for (const set of this.triggerSets) {
      // zoneRegex can be undefined, a regex, or translatable object of regex.
      const haveZoneRegex = ('zoneRegex' in set);
      const haveZoneId = ('zoneId' in set);
      if (!haveZoneRegex && !haveZoneId || haveZoneRegex && haveZoneId) {
        console.error(`Trigger set must include exactly one of zoneRegex or zoneId property`);
        continue;
      }
      if (haveZoneId && set.zoneId === undefined) {
        const filename = set.filename !== undefined ? `'${set.filename}'` : '(user file)';
        console.error(`Trigger set has zoneId, but with nothing specified in ${filename}.  ` + `Did you misspell the ZoneId.ZoneName?`);
        continue;
      }
      if (set.zoneId !== undefined) {
        if (set.zoneId !== zone_id/* default.MatchAll */.Z.MatchAll && set.zoneId !== this.zoneId && !(typeof set.zoneId === 'object' && set.zoneId.includes(this.zoneId))) continue;
      } else if (set.zoneRegex) {
        let zoneRegex = set.zoneRegex;
        if (typeof zoneRegex !== 'object') {
          console.error(`zoneRegex must be translatable object or regexp: ${JSON.stringify(set.zoneRegex)}`);
          continue;
        } else if (!(zoneRegex instanceof RegExp)) {
          const parserLangRegex = zoneRegex[this.parserLang];
          if (parserLangRegex) {
            zoneRegex = parserLangRegex;
          } else if (zoneRegex['en']) {
            zoneRegex = zoneRegex['en'];
          } else {
            console.error(`unknown zoneRegex parser language: ${JSON.stringify(set.zoneRegex)}`);
            continue;
          }
          if (!(zoneRegex instanceof RegExp)) {
            console.error(`zoneRegex must be regexp: ${JSON.stringify(set.zoneRegex)}`);
            continue;
          }
        }
        if (this.zoneName.search(resources_regexes/* default.parse */.Z.parse(zoneRegex)) < 0) continue;
      }
      if (this.options.Debug) {
        if (set.id !== undefined) console.log(`Loading id ${set.id}`);else if (set.filename !== undefined) console.log(`Loading ${set.filename}`);else console.log('Loading user triggers for zone');
      }
      const triggerSetAutoConfig = set.id !== undefined ? this.options.PerTriggerSetAutoConfig[set.id] : undefined;
      const loadThisSet = set.id === undefined ? [] : [set.id];
      for (const id of [...loadThisSet, ...(set.loadConfigs ?? [])]) {
        // In case a trigger set id changes and somebody wants to refer to
        // the old id for a backcompat path in triggers, don't early out.
        // Also don't print errors here for missing sets or configs, because backcompat
        // should be able to load from outdated trigger (set) ids without printing errors.
        const loadSet = this.triggerSetsById[id];

        // Load the raw saved options from TriggerSetConfig and using the templates,
        // set appropriate defaults as needed.
        const loadSetConfig = loadSet?.config;
        if (loadSet !== undefined && loadSetConfig !== undefined) {
          user_config/* default.processOptions */.Z.processOptions(this.options, this.triggerSetConfig, this.options.TriggerSetConfig[id] ?? {}, loadSetConfig);
        }

        // Also make sure that any keys that don't correspond to config entries are set
        // so that triggers can use this for back compat.
        for (const [key, value] of Object.entries(this.options.TriggerSetConfig[id] ?? {})) this.triggerSetConfig[key] ??= value;
      }
      const setFilename = set.filename ?? 'Unknown';
      if (set.initData) {
        this.dataInitializers.push({
          file: setFilename,
          func: set.initData
        });
      }

      // Adjust triggers for the parser language.
      if (set.triggers && this.options.AlertsEnabled) {
        for (const [index, tr] of set.triggers.entries()) {
          const trigger = tr;
          // Add an additional resolved regex here to save
          // time later.  This will clobber each time we
          // load this, but that's ok.
          trigger.filename = setFilename;
          const id = trigger.id ?? `${setFilename} trigger[${index}]`;

          // Store trigger set options with the trigger itself,
          // as it may get overridden by a trigger with the same
          // id from a different trigger set.
          trigger.triggerSetAutoConfig = triggerSetAutoConfig;
          this.ProcessTrigger(trigger);
          orderedTriggers.push(trigger);
          const triggerObject = trigger;

          // `regex` and `regexDe` (etc) are deprecated, however they may still be used
          // by user triggers, and so are still checked here.  `regexDe` and friends
          // will never be auto-translated and are assumed to be correct.
          // TODO: maybe we could consider removing these once timelines don't need parsed lines?
          if (isRegexTrigger(trigger)) {
            const defaultRegex = trigger.regex;
            const localeRegex = triggerObject[regexParserLang];
            if (localeRegex instanceof RegExp) {
              trigger.localRegex = resources_regexes/* default.parse */.Z.parse(localeRegex);
            } else {
              const trans = translateRegex(defaultRegex, this.parserLang, set.timelineReplace);
              trigger.localRegex = resources_regexes/* default.parse */.Z.parse(trans);
            }
          }

          // `netRegexDe` (etc) is also deprecated, but they also may still be used by
          // user triggers.  If they exist, they will take precedence over `netRegex`.
          // `netRegex` will be auto-translated into the parser language.  `netRegexDe`
          // and friends will never be auto-translated and are assumed to be correct.
          if (isNetRegexTrigger(trigger)) {
            const defaultNetRegex = trigger.netRegex;
            const localeNetRegex = triggerObject[netRegexParserLang];
            if (localeNetRegex instanceof RegExp) {
              // localized regex don't need to handle net-regex auto build
              trigger.localNetRegex = resources_regexes/* default.parse */.Z.parse(localeNetRegex);
            } else if (defaultNetRegex !== undefined) {
              // simple netRegex trigger, need to build netRegex and translate
              if (defaultNetRegex instanceof RegExp) {
                const trans = translateRegex(defaultNetRegex, this.parserLang, set.timelineReplace);
                trigger.localNetRegex = resources_regexes/* default.parse */.Z.parse(trans);
              } else if (trigger.type === undefined) {
                console.error(`Trigger ${id}: without type property needs RegExp as netRegex`);
              } else {
                const re = (0,netregexes/* buildNetRegexForTrigger */.BW)(trigger.type, translateRegexBuildParam(defaultNetRegex, this.parserLang, set.timelineReplace).params);
                trigger.localNetRegex = resources_regexes/* default.parse */.Z.parse(re);
              }
            }
          }
          if (trigger.localRegex === undefined && trigger.localNetRegex === undefined && !('disabled' in trigger)) {
            // All triggers are added for consistency reasons in overriding/disabling, however
            // show an error if for some reason we haven't been able to build a regex.
            console.error(`Trigger ${id}: missing regex and netRegex; trigger will be ignored`);
          }
        }
      }
      if (set.overrideTimelineFile) {
        const filename = set.filename !== undefined ? `'${set.filename}'` : '(user file)';
        console.log(`Overriding timeline from ${filename}.`);

        // If the timeline file override is set, all previously loaded timeline info is dropped.
        // Styles, triggers, and translations are kept, as they may still apply to the new one.
        timelineFiles = [];
        timelines = [];
      }

      // And set the timeline files/timelines from each set that matches.
      if (set.timelineFile !== undefined) {
        if (set.filename !== undefined) {
          const dir = set.filename.slice(0, Math.max(0, set.filename.lastIndexOf('/')));
          timelineFiles.push(`${dir}/${set.timelineFile}`);
        } else {
          // Note: For user files, this should get handled by raidboss_config.js,
          // where `timelineFile` should get converted to `timeline`.
          console.error(`Can't specify timelineFile in non-manifest file:${set.timelineFile}`);
        }
      }
      if (set.timeline !== undefined) addTimeline(set.timeline);
      if (set.timelineReplace) replacements.push(...set.timelineReplace);
      if (set.timelineTriggers) {
        for (const trigger of set.timelineTriggers) {
          // Timeline triggers are never translated.
          this.ProcessTrigger(trigger);
          trigger.isTimelineTrigger = true;
          trigger.triggerSetAutoConfig = triggerSetAutoConfig;
          orderedTriggers.push(trigger);
        }
      }
      if (set.timelineStyles) timelineStyles.push(...set.timelineStyles);
      if (set.resetWhenOutOfCombat !== undefined) this.resetWhenOutOfCombat &&= set.resetWhenOutOfCombat;
    }

    // Store all the collected triggers in order, and filter out disabled triggers.
    const filterEnabled = trigger => !('disabled' in trigger && trigger.disabled);
    const allTriggers = orderedTriggers.asList().filter(filterEnabled);
    this.triggers = allTriggers.filter(x => x.localRegex !== undefined);
    this.netTriggers = allTriggers.filter(x => x.localNetRegex !== undefined);
    const timelineTriggers = allTriggers.filter(isRaidbossLooseTimelineTrigger);
    this.Reset();
    this.timelineLoader.SetTimelines(timelineFiles, timelines, replacements, timelineTriggers, timelineStyles, this.zoneId);
  }
  ProcessTrigger(trigger) {
    // These properties are used internally by ReloadTimelines only and should
    // not exist on user triggers.  However, the trigger objects themselves are
    // reused when reloading pages, and so it is impossible to verify that
    // these properties don't exist.  Therefore, just delete them silently.
    if (isRaidbossLooseTimelineTrigger(trigger)) delete trigger.isTimelineTrigger;
    delete trigger.localRegex;
    delete trigger.localNetRegex;
    trigger.output = TriggerOutputProxy.makeOutput(trigger, this.displayLang, this.options.PerTriggerAutoConfig);
  }
  OnJobChange(e) {
    this.me = e.detail.name;
    this.job = e.detail.job;
    this.role = util/* default.jobToRole */.Z.jobToRole(this.job);
    this.ReloadTimelines();
  }
  SetInCombat(inCombat) {
    if (this.inCombat === inCombat) return;
    this.inCombat = inCombat;
    this.data.inCombat = inCombat;
    if (!this.resetWhenOutOfCombat) return;

    // Stop timers when stopping combat to stop any active timers that
    // are delayed.  However, also reset when starting combat.
    // This prevents late attacks from affecting |data| which
    // throws off the next run, potentially.
    if (!this.inCombat) {
      this.StopTimers();
      this.timelineLoader.StopCombat();
    }
    if (this.inCombat) this.Reset();
  }
  ShortNamify(name) {
    // TODO: make this unique among the party in case of first name collisions.
    // TODO: probably this should be a general cactbot utility.
    if (typeof name !== 'string') {
      if (typeof name !== 'undefined') console.error('called ShortNamify with non-string');
      return '???';
    }
    const nick = this.options.PlayerNicks[name];
    if (nick !== undefined) return nick;
    const idx = name.indexOf(' ');
    return idx < 0 ? name : name.slice(0, idx);
  }
  Reset() {
    util/* default.clearWatchCombatants */.Z.clearWatchCombatants();
    this.data = this.getDataObject();
    this.StopTimers();
    this.triggerSuppress = {};
  }
  StopTimers() {
    this.timers = {};
  }
  OnLog(e) {
    // This could conceivably be determined based on the line's contents as well, but
    // not sure if that's worth the effort
    const currentTime = +new Date();
    for (const log of e.detail.logs) {
      for (const trigger of this.triggers) {
        const r = trigger.localRegex?.exec(log);
        if (r) this.OnTrigger(trigger, r, currentTime);
      }
    }
  }
  OnNetLog(e) {
    const log = e.rawLine;
    // This could conceivably be determined based on `new Date(e.line[1])` as well, but
    // not sure if that's worth the effort
    const currentTime = +new Date();
    if (isWipe(log)) {
      // isWipe can be called with `/e end` to stop the timeline due to e.g. countdown but no pull
      // However, `this.inCombat` will already be `false` in that case preventing the timeline from
      // getting stopped. If we're not inCombat and we've hit the wipe conditions defined by
      // `isWipe`, just set it to true first and then to false
      if (!this.inCombat) this.SetInCombat(true);
      this.SetInCombat(false);
    }
    for (const trigger of this.netTriggers) {
      const r = trigger.localNetRegex?.exec(log);
      if (r) this.OnTrigger(trigger, r, currentTime);
    }
  }
  OnTrigger(trigger, matches, currentTime) {
    try {
      this.OnTriggerInternal(trigger, matches, currentTime);
    } catch (e) {
      onTriggerException(trigger, e);
    }
  }
  OnTriggerInternal(trigger, matches, currentTime) {
    if (this._onTriggerInternalCheckSuppressed(trigger, currentTime)) return;
    let groups = {};
    // If using named groups, treat matches.groups as matches
    // so triggers can do things like matches.target.
    if (matches && matches.groups) {
      groups = matches.groups;
    } else if (matches) {
      // If there are no matching groups, reproduce the old js logic where
      // groups ended up as the original RegExpExecArray object
      matches.forEach((value, idx) => {
        groups[idx] = value;
      });
    }

    // Set up a helper object so we don't have to throw
    // a ton of info back and forth between subfunctions
    const triggerHelper = this._onTriggerInternalGetHelper(trigger, groups, currentTime);
    if (!this._onTriggerInternalCondition(triggerHelper)) return;
    this._onTriggerInternalPreRun(triggerHelper);

    // Evaluate for delay here, but run delay later
    const delayPromise = this._onTriggerInternalDelaySeconds(triggerHelper);
    this._onTriggerInternalDurationSeconds(triggerHelper);
    this._onTriggerInternalSuppressSeconds(triggerHelper);
    const triggerPostDelay = () => {
      const promise = this._onTriggerInternalPromise(triggerHelper);
      const triggerPostPromise = () => {
        this._onTriggerInternalSound(triggerHelper);
        this._onTriggerInternalSoundVolume(triggerHelper);
        this._onTriggerInternalResponse(triggerHelper);
        this._onTriggerInternalAlarmText(triggerHelper);
        this._onTriggerInternalAlertText(triggerHelper);
        this._onTriggerInternalInfoText(triggerHelper);

        // Rumble isn't a trigger function, so only needs to be ordered
        // after alarm/alert/info.
        this._onTriggerInternalRumble(triggerHelper);

        // Priority audio order:
        // * user disabled (play nothing)
        // * if tts options are enabled globally or for this trigger:
        //   * user TTS triggers tts override
        //   * tts entries in the trigger
        //   * default alarm tts
        //   * default alert tts
        //   * default info tts
        // * if sound options are enabled globally or for this trigger:
        //   * user trigger sound overrides
        //   * sound entries in the trigger
        //   * alarm noise
        //   * alert noise
        //   * info noise
        // * else, nothing
        //
        // In general, tts comes before sounds and user overrides come
        // before defaults.  If a user trigger or tts entry is specified as
        // being valid but empty, this will take priority over the default
        // tts texts from alarm/alert/info and will prevent tts from playing
        // and allowing sounds to be played instead.
        this._onTriggerInternalTTS(triggerHelper);
        this._onTriggerInternalPlayAudio(triggerHelper);
        this._onTriggerInternalRun(triggerHelper);
      };

      // The trigger body must run synchronously when there is no promise.
      if (promise) promise.then(triggerPostPromise, e => onTriggerException(trigger, e));else triggerPostPromise();
    };

    // The trigger body must run synchronously when there is no delay.
    if (delayPromise) delayPromise.then(triggerPostDelay, e => onTriggerException(trigger, e));else triggerPostDelay();
  }

  // Build a default triggerHelper object for this trigger
  _onTriggerInternalGetHelper(trigger, matches, now) {
    const id = trigger.id;
    let options = {};
    let config = {};
    let suppressed = false;
    if (id !== undefined) {
      options = this.options.PerTriggerOptions[id] ?? options;
      config = this.options.PerTriggerAutoConfig[id] ?? config;
      suppressed = this.options.DisabledTriggers[id] ?? suppressed;
    }
    const triggerHelper = {
      trigger: trigger,
      now: now,
      triggerOptions: options,
      triggerAutoConfig: config,
      // This setting only suppresses output, trigger still runs for data/logic purposes
      userSuppressedOutput: suppressed,
      matches: matches,
      // Default options
      textAlertsEnabled: this.options.TextAlertsEnabled,
      soundAlertsEnabled: this.options.SoundAlertsEnabled,
      spokenAlertsEnabled: this.options.SpokenAlertsEnabled,
      groupSpokenAlertsEnabled: this.options.GroupSpokenAlertsEnabled,
      valueOrFunction: f => {
        let result = f;
        if (typeof result === 'function') result = result(this.data, triggerHelper.matches, triggerHelper.output);
        // All triggers return either a string directly, or an object
        // whose keys are different parser language based names.  For simplicity,
        // this is valid to do for any trigger entry that can handle a function.
        // In case anybody wants to encapsulate any fancy grammar, the values
        // in this object can also be functions.
        if (typeof result !== 'object' || result === null) return result;
        return triggerHelper.valueOrFunction(result[this.displayLang] ?? result['en']);
      },
      get output() {
        if (this.trigger.output) return this.trigger.output;
        console.log(`Missing trigger.output for trigger ${trigger.id ?? 'Unknown'}`);
        return defaultOutput;
      }
    };
    this._onTriggerInternalHelperDefaults(triggerHelper);
    return triggerHelper;
  }
  _onTriggerInternalCheckSuppressed(trigger, when) {
    const id = trigger.id;
    if (id !== undefined) {
      const suppress = this.triggerSuppress[id];
      if (suppress !== undefined) {
        if (suppress > when) return true;
        delete this.triggerSuppress[id];
      }
    }
    return false;
  }
  _onTriggerInternalCondition(triggerHelper) {
    const condition = triggerHelper.triggerOptions.Condition ?? triggerHelper.trigger.condition;
    // If the condition is missing or hardcoded as `true`
    if (condition === undefined || condition === true) return true;
    // If the condition is hardcoded as `false`
    else if (condition === false) return false;
    const conditionFuncReturn = condition(this.data, triggerHelper.matches, triggerHelper.output);
    if (conditionFuncReturn === true) return true;
    // Treat all other return values as false (undefined | false)
    return false;
  }

  // Set defaults for triggerHelper object (anything that won't change based on
  // other trigger functions running)
  _onTriggerInternalHelperDefaults(triggerHelper) {
    // Options priority:
    // backcompat triggerOptions > trigger autoconfig > trigger set autoconfig > top level option
    triggerHelper.textAlertsEnabled = triggerHelper.triggerOptions.TextAlert ?? triggerHelper.triggerAutoConfig.TextAlertsEnabled ?? triggerHelper.trigger.triggerSetAutoConfig?.TextAlertsEnabled ?? triggerHelper.textAlertsEnabled;
    triggerHelper.soundAlertsEnabled = triggerHelper.triggerOptions.SoundAlert ?? triggerHelper.triggerAutoConfig.SoundAlertsEnabled ?? triggerHelper.trigger.triggerSetAutoConfig?.SoundAlertsEnabled ?? triggerHelper.soundAlertsEnabled;
    triggerHelper.spokenAlertsEnabled = triggerHelper.triggerOptions.SpeechAlert ?? triggerHelper.triggerAutoConfig.SpokenAlertsEnabled ?? triggerHelper.trigger.triggerSetAutoConfig?.SpokenAlertsEnabled ?? triggerHelper.spokenAlertsEnabled;

    // Load settings from triggerOptions if they're set
    triggerHelper.groupSpokenAlertsEnabled = triggerHelper.triggerOptions.GroupSpeechAlert ?? triggerHelper.groupSpokenAlertsEnabled;

    // If the user has suppressed all output for the trigger, reflect that here
    if (triggerHelper.userSuppressedOutput) {
      triggerHelper.textAlertsEnabled = false;
      triggerHelper.soundAlertsEnabled = false;
      triggerHelper.spokenAlertsEnabled = false;
      triggerHelper.groupSpokenAlertsEnabled = false;
    }

    // If the user has disabled audio output, reflect that here
    if (!this.options.AudioAllowed) {
      triggerHelper.soundAlertsEnabled = false;
      triggerHelper.spokenAlertsEnabled = false;
      triggerHelper.groupSpokenAlertsEnabled = false;
    }
  }
  _onTriggerInternalPreRun(triggerHelper) {
    triggerHelper.trigger?.preRun?.(this.data, triggerHelper.matches, triggerHelper.output);
  }
  _onTriggerInternalDelaySeconds(triggerHelper) {
    const delay = 'delaySeconds' in triggerHelper.trigger ? triggerHelper.valueOrFunction(triggerHelper.trigger.delaySeconds) : 0;
    if (typeof delay !== 'number') return;
    const adjust = triggerHelper.triggerAutoConfig.DelayAdjust ?? 0;
    const adjustedDelay = Math.max(delay ?? 0 + adjust, 0);
    if (adjustedDelay <= 0) return;
    const triggerID = this.currentTriggerID++;
    this.timers[triggerID] = true;
    return new Promise((res, rej) => {
      window.setTimeout(() => {
        if (this.timers[triggerID]) res();else rej(new Error('stopped'));
        delete this.timers[triggerID];
      }, adjustedDelay * 1000);
    });
  }
  _onTriggerInternalDurationSeconds(triggerHelper) {
    let valueDuration = triggerHelper.valueOrFunction(triggerHelper.trigger.durationSeconds);
    if (typeof valueDuration !== 'number') valueDuration = undefined;
    triggerHelper.duration = {
      fromConfig: triggerHelper.triggerAutoConfig.Duration,
      fromTrigger: valueDuration,
      alarmText: this.options.DisplayAlarmTextForSeconds,
      alertText: this.options.DisplayAlertTextForSeconds,
      infoText: this.options.DisplayInfoTextForSeconds
    };
  }
  _onTriggerInternalSuppressSeconds(triggerHelper) {
    const suppress = 'suppressSeconds' in triggerHelper.trigger ? triggerHelper.valueOrFunction(triggerHelper.trigger.suppressSeconds) : 0;
    if (typeof suppress !== 'number') return;
    if (triggerHelper.trigger.id !== undefined && suppress > 0) this.triggerSuppress[triggerHelper.trigger.id] = triggerHelper.now + suppress * 1000;
  }
  _onTriggerInternalPromise(triggerHelper) {
    let promise;
    if ('promise' in triggerHelper.trigger) {
      const id = triggerHelper.trigger.id ?? 'Unknown';
      if (typeof triggerHelper.trigger.promise === 'function') {
        promise = triggerHelper.trigger.promise(this.data, triggerHelper.matches, triggerHelper.output);

        // Make sure we actually get a Promise back from the function
        if (Promise.resolve(promise) !== promise) {
          console.error(`Trigger ${id}: promise function did not return a promise`);
          promise = undefined;
        }
      } else {
        console.error(`Trigger ${id}: promise defined but not a function`);
      }
    }
    return promise;
  }
  _onTriggerInternalSound(triggerHelper) {
    const result = triggerHelper.valueOrFunction(triggerHelper.trigger.sound);
    if (typeof result === 'string') triggerHelper.soundUrl = result;
  }
  _onTriggerInternalSoundVolume(triggerHelper) {
    const result = triggerHelper.valueOrFunction(triggerHelper.trigger.soundVolume);
    if (typeof result === 'number') triggerHelper.triggerSoundVol = result;
  }
  _onTriggerInternalResponse(triggerHelper) {
    let response = {};
    const trigger = triggerHelper.trigger;
    if (trigger.response) {
      // Can't use ValueOrFunction here as r returns a non-localizable object.
      response = trigger.response;
      while (typeof response === 'function') response = response(this.data, triggerHelper.matches, triggerHelper.output);

      // Turn falsy values into a default no-op response.
      if (!response) response = {};
    }
    triggerHelper.response = response;
  }
  _onTriggerInternalAlarmText(triggerHelper) {
    this._addTextFor('alarm', triggerHelper);
  }
  _onTriggerInternalAlertText(triggerHelper) {
    this._addTextFor('alert', triggerHelper);
  }
  _onTriggerInternalInfoText(triggerHelper) {
    this._addTextFor('info', triggerHelper);
  }
  _onTriggerInternalRumble(triggerHelper) {
    if (!this.options.RumbleEnabled) return;

    // getGamepads returns a "GamePadList" which isn't iterable.
    [...navigator.getGamepads()].forEach(gp => {
      // This list also contains nulls so that the gamepad index is preserved.
      if (!gp) return;

      // `vibrationActuator` is supported in CEF but is not in the spec yet.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const gamepad = gp;

      // Future calls to `playEffect` will cut off the previous effect.
      // eslint-disable-next-line max-len
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
      void gamepad?.vibrationActuator?.playEffect(gamepad.vibrationActuator.type, {
        startDelay: 0,
        duration: triggerHelper.rumbleDurationMs,
        weakMagnitude: triggerHelper.rumbleWeak,
        strongMagnitude: triggerHelper.rumbleStrong
      });
    });
  }
  _onTriggerInternalTTS(triggerHelper) {
    if (!triggerHelper.groupSpokenAlertsEnabled || typeof triggerHelper.ttsText === 'undefined') {
      let result = undefined;
      if (triggerHelper.triggerOptions.TTSText !== undefined) {
        result = triggerHelper.valueOrFunction(triggerHelper.triggerOptions.TTSText);
      } else if (triggerHelper.trigger.tts !== undefined) {
        // Allow null/false/NaN/0/'' in this branch.
        result = triggerHelper.valueOrFunction(triggerHelper.trigger.tts);
      } else if (triggerHelper.response) {
        const resp = triggerHelper.response;
        if (resp.tts !== undefined) result = triggerHelper.valueOrFunction(resp.tts);
      }

      // Allow falsey values to disable tts entirely
      // Undefined will fall back to defaultTTSText
      if (result !== undefined) {
        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
        if (result) triggerHelper.ttsText = result?.toString();
      } else {
        triggerHelper.ttsText = triggerHelper.defaultTTSText;
      }
    }
  }
  _onTriggerInternalPlayAudio(triggerHelper) {
    if (triggerHelper.trigger.sound !== undefined && triggerHelper.soundUrl !== undefined && soundStrs.includes(triggerHelper.soundUrl)) {
      const namedSound = `${triggerHelper.soundUrl}Sound`;
      const namedSoundVolume = `${triggerHelper.soundUrl}SoundVolume`;
      const sound = this.options[namedSound];
      if (typeof sound === 'string') {
        triggerHelper.soundUrl = sound;
        const soundVol = this.options[namedSoundVolume];
        if (typeof soundVol === 'number') triggerHelper.soundVol = soundVol;
      }
    }
    triggerHelper.soundUrl = triggerHelper.triggerOptions.SoundOverride ?? triggerHelper.soundUrl;
    triggerHelper.soundVol = triggerHelper.triggerOptions.VolumeOverride ?? triggerHelper.triggerSoundVol ?? triggerHelper.soundVol;

    // Text to speech overrides all other sounds.  This is so
    // that a user who prefers tts can still get the benefit
    // of infoText triggers without tts entries by turning
    // on (speech=true, text=true, sound=true) but this will
    // not cause tts to play over top of sounds or noises.
    if (triggerHelper.ttsText !== undefined && triggerHelper.spokenAlertsEnabled) {
      // Heuristics for auto tts.
      // * In case this is an integer.
      triggerHelper.ttsText = triggerHelper.ttsText.toString();
      // * Remove a bunch of chars.
      triggerHelper.ttsText = triggerHelper.ttsText.replace(/[#!]/g, '');
      // * slashes between mechanics
      triggerHelper.ttsText = triggerHelper.ttsText.replace('/', ' ');
      // * tildes at the end for emphasis
      triggerHelper.ttsText = triggerHelper.ttsText.replace(/~+$/, '');
      // * arrows helping visually simple to understand e.g. ↖ Front left / Back right ↘
      triggerHelper.ttsText = triggerHelper.ttsText.replace(/[↖-↙]/g, '');
      // * Korean TTS reads wrong with '1번째'
      triggerHelper.ttsText = triggerHelper.ttsText.replace('1번째', '첫번째');
      // * arrows at the front or the end are directions, e.g. "east =>"
      triggerHelper.ttsText = triggerHelper.ttsText.replace(/[-=]>\s*$/g, '');
      triggerHelper.ttsText = triggerHelper.ttsText.replace(/^\s*<[-=]/g, '');
      // * arrows in the middle are a sequence, e.g. "in => out => spread"
      const arrowReplacement = {
        en: ' then ',
        de: ' dann ',
        fr: ' puis ',
        ja: 'や',
        cn: '然后',
        ko: ' 그리고 '
      };
      triggerHelper.ttsText = triggerHelper.ttsText.replace(/\s*(<[-=]|[=-]>)\s*/g, arrowReplacement[this.displayLang]);
      this.ttsSay(triggerHelper.ttsText);
    } else if (triggerHelper.soundUrl !== undefined && triggerHelper.soundAlertsEnabled) {
      this._playAudioFile(triggerHelper, triggerHelper.soundUrl, triggerHelper.soundVol);
    }
  }
  _onTriggerInternalRun(triggerHelper) {
    triggerHelper.trigger?.run?.(this.data, triggerHelper.matches, triggerHelper.output);
  }
  _createTextFor(triggerHelper, text, textType, lowerTextKey, duration) {
    // info-text
    const textElementClass = `${textType}-text`;
    if (textType !== 'info') text = triggerUpperCase(text);
    const holder = this[lowerTextKey]?.getElementsByClassName('holder')[0];
    const div = this._makeTextElement(triggerHelper, text, textElementClass);
    if (!holder) throw new not_reached/* UnreachableCode */.$();
    holder.appendChild(div);
    if (holder.children.length > this.kMaxRowsOfText) holder.firstChild?.remove();
    window.setTimeout(() => {
      if (holder.contains(div)) holder.removeChild(div);
    }, duration * 1000);
  }
  _addTextFor(textType, triggerHelper) {
    // infoText
    const lowerTextKey = textMap[textType].text;
    // InfoText
    const upperTextKey = textMap[textType].upperText;
    // InfoSound
    const upperSound = textMap[textType].upperSound;
    // InfoSoundVolume
    const upperSoundVolume = textMap[textType].upperSoundVolume;
    let textObj = triggerHelper.triggerOptions[upperTextKey];
    if (textObj === undefined && triggerHelper.trigger[lowerTextKey] !== undefined) textObj = triggerHelper.trigger[lowerTextKey];
    if (textObj === undefined && triggerHelper.response !== undefined) textObj = triggerHelper.response[lowerTextKey];
    if (textObj === undefined || textObj === null) return;
    let text = triggerHelper.valueOrFunction(textObj);
    if (text === undefined || text === null) return;
    if (typeof text === 'number') text = text.toString();
    if (typeof text !== 'string') text = String(text);
    // Ignore empty strings so that config ui "blank spaces" are ignored.
    text = text.trim();
    if (text === '') return;
    triggerHelper.defaultTTSText = triggerHelper.defaultTTSText ?? text;
    if (text && typeof text === 'string' && triggerHelper.textAlertsEnabled) {
      // per-trigger option > trigger field > option duration by text type
      let duration = triggerHelper.duration?.fromConfig ?? triggerHelper.duration?.fromTrigger;
      if (duration === undefined && triggerHelper.duration) duration = triggerHelper.duration[lowerTextKey];
      if (duration === undefined) duration = 0;
      this._createTextFor(triggerHelper, text, textType, lowerTextKey, duration);
      if (triggerHelper.soundUrl === undefined) {
        triggerHelper.soundUrl = this.options[upperSound];
        triggerHelper.soundVol = this.options[upperSoundVolume];
      }
      if (triggerHelper.rumbleDurationMs === undefined) {
        triggerHelper.rumbleDurationMs = this.options[textMap[textType].rumbleDuration];
        triggerHelper.rumbleWeak = this.options[textMap[textType].rumbleWeak];
        triggerHelper.rumbleStrong = this.options[textMap[textType].rumbleStrong];
      }
    }
  }
  _makeTextElement(_triggerHelper, text, className) {
    const div = document.createElement('div');
    div.classList.add(className);
    div.classList.add('animate-text');
    div.innerText = text;
    return div;
  }
  _playAudioFile(_triggerHelper, url, volume) {
    const audio = new Audio(url);
    audio.volume = volume ?? 1;
    void audio.play();
  }
  getDataObject() {
    let preserveHP = 0;
    // Note that this function gets called in the constructor, before `this.data` has been set.
    if (this.data?.currentHP) preserveHP = this.data.currentHP;

    // TODO: make a breaking change at some point and
    // make all this style consistent, sorry.
    const data = {
      me: this.me,
      job: this.job,
      role: this.role,
      party: this.partyTracker,
      lang: this.parserLang,
      parserLang: this.parserLang,
      displayLang: this.displayLang,
      currentHP: preserveHP,
      options: this.options,
      inCombat: this.inCombat,
      triggerSetConfig: this.triggerSetConfig,
      ShortName: this.ShortNamify.bind(this),
      StopCombat: () => this.SetInCombat(false),
      ParseLocaleFloat: parseFloat,
      CanStun: () => util/* default.canStun */.Z.canStun(this.job),
      CanSilence: () => util/* default.canSilence */.Z.canSilence(this.job),
      CanSleep: () => util/* default.canSleep */.Z.canSleep(this.job),
      CanCleanse: () => util/* default.canCleanse */.Z.canCleanse(this.job),
      CanFeint: () => util/* default.canFeint */.Z.canFeint(this.job),
      CanAddle: () => util/* default.canAddle */.Z.canAddle(this.job)
    };
    let triggerData = {};
    for (const initObj of this.dataInitializers) {
      const init = initObj.func;
      const initData = init();
      if (typeof initData === 'object') {
        triggerData = {
          ...triggerData,
          ...initData
        };
      } else {
        console.log(`Error in file: ${initObj.file}: these triggers may not work;
        initData function returned invalid object: ${init.toString()}`);
      }
    }
    return {
      ...triggerData,
      ...data
    };
  }
}
class PopupTextGenerator {
  constructor(popupText) {
    this.popupText = popupText;
  }
  Info(text, currentTime) {
    this.popupText.OnTrigger({
      infoText: text,
      tts: text
    }, null, currentTime);
  }
  Alert(text, currentTime) {
    this.popupText.OnTrigger({
      alertText: text,
      tts: text
    }, null, currentTime);
  }
  Alarm(text, currentTime) {
    this.popupText.OnTrigger({
      alarmText: text,
      tts: text
    }, null, currentTime);
  }
  TTS(text, currentTime) {
    this.popupText.OnTrigger({
      infoText: text,
      tts: text
    }, null, currentTime);
  }
  Trigger(trigger, matches, currentTime) {
    this.popupText.OnTrigger(trigger, matches, currentTime);
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/timeline.ts





// Hi, sorry about this whole class.  This is all pretty old code and honestly could
// probably all be entirely rewritten at this point if anybody has the time or brain.
//
// This TimelineController class is involved in playing back the timeline efficiently.
// As it says on the tin, it's the controller here and HtmlTimelineUI is the view.
// The UI does very little and relies on TimelineController to manually add and remove
// timer bars as necessary.  It does some animations when things are removed, but
// only when it's been told to remove them.
//
// When any time is resynced even slightly, then all of the bars are removed and readded
// with new times.  (This could probably be better to just update them in place!).
// Similarly, any jump (even with lookahead) can't do any UI animations or anything
// because the lookahead bars don't know anything about the new bars at the jump location.
// This is kind of jarring but hopefully most people don't notice it.
//
// Things are also very precarious in terms of how this class walks through things.
// If this.activeEvents is out of sync or unsorted, then it will clog up and new bars
// will not be able to be added.  Durations are extremely awkward as they are manually
// added once their original event has passed.  This means that if you ever jump
// to a new location with an ongoing duration from the past, it will not appear.
// It also has some issues if the duration extends past the jump (see comments inline).
// Also because of this, we have to look through every event all the time to figure
// out if there's a duration to care about (and probably we could figure this out
// ahead of time like we do with placing text events + beforeSeconds at the correct
// place in the timeline).
//
// There's also no testing, sorry.

const kBig = 1000000000; // Something bigger than any fight length in seconds.

const activeText = {
  en: 'Active:',
  de: 'Aktiv:',
  fr: 'Active :',
  ja: '(進行):',
  cn: '(进行中):',
  ko: '시전중:'
};
class TimelineUI {
  timeline = null;
  Init() {
    /* noop */
  }
  AddDebugInstructions() {
    /* noop */
  }
  SetPopupTextInterface(_popupText) {
    /* noop */
  }
  Reset() {
    /* noop */
  }
  SetTimeline(timeline) {
    this.Init();
    this.Reset();
    this.timeline = timeline;
    if (this.timeline) this.timeline.ui = this;
  }
  OnAddTimer(_fightNow, _e, _channeling) {
    /* noop */
  }
  OnRemoveTimer(_e, _expired, _force = false) {
    /* noop */
  }
  OnShowInfoText(_text, _currentTime) {
    /* noop */
  }
  OnShowAlertText(_text, _currentTime) {
    /* noop */
  }
  OnShowAlarmText(_text, _currentTime) {
    /* noop */
  }
  OnSpeakTTS(_text, _currentTime) {
    /* noop */
  }
  OnTrigger(_trigger, _matches, _currentTime) {
    /* noop */
  }
  OnSyncTime(_fightNow, _running) {
    /* noop */
  }
}
const initialNextEventState = {
  index: 0,
  minFightNow: 0,
  timeOffset: 0,
  sortKeyOffset: 0,
  jumpCount: 0
};
class Timeline {
  timebase = 0;
  nextEventState = {
    ...initialNextEventState
  };
  nextText = 0;
  nextSyncStart = 0;
  nextSyncEnd = 0;
  nextForceJump = 0;
  updateTimer = 0;
  constructor(text, replacements, triggers, styles, options, zoneId) {
    this.options = options;
    this.zoneId = zoneId;
    this.replacements = replacements;
    const lang = this.options.TimelineLanguage || this.options.ParserLanguage || 'en';
    this.activeText = lang in activeText ? activeText[lang] : activeText['en'];

    // Not sorted.
    this.activeSyncs = [];
    // Sorted by event occurrence time.
    this.activeEvents = [];
    // A set of names which will not be notified about.
    this.ignores = {};
    // Sorted by event occurrence time.
    this.events = [];
    // Sorted by event occurrence time.
    this.texts = [];
    // Sorted by sync.start time.
    this.syncStarts = [];
    // Sorted by sync.end time.
    this.syncEnds = [];
    // Sorted by event occurrence time.
    this.forceJumps = [];
    this.LoadFile(text, triggers, styles);
    this.Stop();
  }
  LoadFile(text, triggers, styles) {
    const parsed = new TimelineParser(text, this.replacements, triggers, styles, this.options, this.zoneId);
    this.ignores = parsed.ignores;
    this.events = parsed.events;
    this.texts = parsed.texts;
    this.syncStarts = parsed.syncStarts;
    this.syncEnds = parsed.syncEnds;
    this.forceJumps = parsed.forceJumps;
  }
  Stop() {
    this.timebase = 0;
    this.nextEventState = {
      ...initialNextEventState
    };
    this.nextText = 0;
    this.nextSyncStart = 0;
    this.nextSyncEnd = 0;
    this.nextForceJump = 0;
    const fightNow = 0;
    this._AdvanceTimeTo(fightNow);
    this._CollectActiveSyncs(fightNow);
    this._ClearTimers();
    this._CancelUpdate();
    this.ui?.OnSyncTime(fightNow, false);
  }
  SyncTo(fightNow, currentTime, _sync) {
    // If we ever sync somewhere else, then remove any active overhanging windows from force jumps.
    this.activeLastForceJumpSync = undefined;

    // This records the actual time which aligns with "0" in the timeline.
    const newTimebase = new Date(currentTime - fightNow * 1000).valueOf();
    // Skip syncs that are too close.  Many syncs happen on abilities that
    // hit 8 to 24 people, and so this is a lot of churn.
    if (Math.abs(newTimebase - this.timebase) <= 2) return;
    this.timebase = newTimebase;
    this.nextEventState = {
      ...initialNextEventState
    };
    this.nextText = 0;
    this.nextSyncStart = 0;
    this.nextSyncEnd = 0;

    // This will skip text events without running them.
    this._AdvanceTimeTo(fightNow);
    this._CollectActiveSyncs(fightNow);

    // Clear all timers except any synthetic duration events.
    // This is because if the sync goes even a hair into the future, then
    // the duration ending event will get dropped here.

    // FIXME: we could be smarter here and know ahead of time where all the duration
    // events are, so that we could skip ahead into the future where a duration
    // event has started but not expired and have that work properly.
    this._AddDurationTimers(fightNow);
    this._ClearExceptRunningDurationTimers(fightNow);
    this._AddUpcomingTimers(fightNow);
    this._CancelUpdate();
    this._ScheduleUpdate(fightNow);
    this.ui?.OnSyncTime(fightNow, true);
  }
  _CollectActiveSyncs(fightNow) {
    this.activeSyncs = [];
    for (let i = this.nextSyncEnd; i < this.syncEnds.length; ++i) {
      const syncEnd = this.syncEnds[i];
      if (syncEnd && syncEnd.start <= fightNow) this.activeSyncs.push(syncEnd);
    }
    if (this.activeLastForceJumpSync !== undefined && this.activeLastForceJumpSync.start <= fightNow && this.activeLastForceJumpSync.end > fightNow) {
      this.activeSyncs.push(this.activeLastForceJumpSync);
    } else {
      this.activeLastForceJumpSync = undefined;
    }
  }
  OnLogLine(line, currentTime) {
    for (const sync of this.activeSyncs) {
      if (sync.regex.test(line)) {
        if ('jump' in sync) {
          if (!sync.jump) {
            this.SyncTo(0, currentTime, sync);
            this.Stop();
          } else {
            this.SyncTo(sync.jump, currentTime, sync);
          }
        } else {
          this.SyncTo(sync.time, currentTime, sync);
        }
        break;
      }
    }
  }
  _AdvanceTimeTo(fightNow) {
    // This function advances time to fightNow without processing any events.
    let event = this.events[this.nextEventState.index];
    while (this.nextEventState.index < this.events.length && event && event.time + this.nextEventState.timeOffset <= fightNow) event = this.events[++this.nextEventState.index];
    let text = this.texts[this.nextText];
    while (this.nextText < this.texts.length && text && text.time <= fightNow) text = this.texts[++this.nextText];
    let syncStart = this.syncStarts[this.nextSyncStart];
    while (this.nextSyncStart < this.syncStarts.length && syncStart && syncStart.start <= fightNow) syncStart = this.syncStarts[++this.nextSyncStart];
    let syncEnd = this.syncEnds[this.nextSyncEnd];
    while (this.nextSyncEnd < this.syncEnds.length && syncEnd && syncEnd.end <= fightNow) syncEnd = this.syncEnds[++this.nextSyncEnd];
    let forceJump = this.forceJumps[this.nextForceJump];
    while (this.nextForceJump < this.forceJumps.length && forceJump && forceJump.time <= fightNow) forceJump = this.forceJumps[++this.nextForceJump];
  }
  _ClearTimers() {
    for (const activeEvent of this.activeEvents) this.ui?.OnRemoveTimer(activeEvent, false);
    this.activeEvents = [];
  }
  _ClearExceptRunningDurationTimers(fightNow) {
    const durationEvents = [];
    for (const event of this.activeEvents) {
      if (event.isDur && event.time > fightNow) {
        durationEvents.push(event);
        continue;
      }
      this.ui?.OnRemoveTimer(event, false, true);
    }
    this.activeEvents = durationEvents;
  }
  _RemoveExpiredTimers(fightNow) {
    let activeEvent = this.activeEvents[0];
    while (this.activeEvents.length && activeEvent && activeEvent.time <= fightNow) {
      this.ui?.OnRemoveTimer(activeEvent, true);
      this.activeEvents.splice(0, 1);
      activeEvent = this.activeEvents[0];
    }
  }
  _AddDurationTimers(fightNow) {
    const events = [];
    for (let i = 0; i < this.activeEvents.length; ++i) {
      const e = this.activeEvents[i];
      if (e && e.time <= fightNow && e.duration) {
        const durationEvent = {
          // FIXME: it is incorrect to have a duration timer share an id with its non-duration
          // origin when the duration extends across the end of a short loop.  Re-adding the
          // non-duration origin will remove (due to same id) the ongoing duration timer.
          // HOWEVER, there's also various issues (sortKey is incorrect, and activeEvent.time
          // also needs to be adjusted) so for now we'll work around this by just not supporting
          // durations that extend across jumps.
          //
          // Example timeline:
          //   3 "Loop Target"
          //   7 "Long Duration Event" duration 100
          //   8 "Jump Backwards to Loop Target" sync /etc/ jump 3
          id: e.id,
          time: e.time + e.duration,
          sortKey: e.sortKey,
          name: e.name,
          text: `${this.activeText} ${e.text}`,
          isDur: true
        };
        events.push(durationEvent);
        this.activeEvents.splice(i, 1);
        this.ui?.OnRemoveTimer(e, false, true);
        this.ui?.OnAddTimer(fightNow, durationEvent, true);
        --i;
      }
    }
    if (events.length) Array.prototype.push.apply(this.activeEvents, events);
    this.activeEvents.sort((a, b) => {
      return a.time - b.time;
    });
  }
  _AddUpcomingTimers(fightNow) {
    while (this.nextEventState.index < this.events.length && this.activeEvents.length < this.options.MaxNumberOfTimerBars) {
      const e = this.events[this.nextEventState.index];
      if (e === undefined) throw new not_reached/* UnreachableCode */.$();

      // If we have too many bars, just hold at this next event state
      // until space frees up and we can start processing again.
      const timeUntilEvent = e.time + this.nextEventState.timeOffset - fightNow;
      if (timeUntilEvent > this.options.ShowTimerBarsAtSeconds) break;
      ++this.nextEventState.index;

      // If this event is before a forced jump or has already happened, skip.
      if (e.time <= this.nextEventState.minFightNow || timeUntilEvent <= 0) continue;
      if (!(e.name in this.ignores)) {
        const activeEvent = {
          ...e,
          id: `${e.id}-${this.nextEventState.jumpCount}`,
          time: e.time + this.nextEventState.timeOffset,
          sortKey: e.sortKey + this.nextEventState.sortKeyOffset
        };
        this.activeEvents.push(activeEvent);
        this.ui?.OnAddTimer(fightNow, activeEvent, false);
      }
      const sync = e.sync;
      if (sync?.jumpType === 'force' && sync?.jump !== undefined) {
        this.nextEventState.index = 0;
        this.nextEventState.minFightNow = sync.jump;
        this.nextEventState.timeOffset += sync.time - sync.jump;
        this.nextEventState.jumpCount++;
        // All events are numbered with a sort key.  We could find the max sort key of all
        // timeline entries and multiply by jump count to get an ordering such that
        // all sort keys at a higher jump count sort after previous ones.  However,
        // since we doing a forced jump lookahead at this point, we will never see anything higher
        // than `e.sortKey`, so we can use that as a max.  Once the timeline syncs for any
        // reason, we'll be back to jumpCount=0 and normal sort keys.  Sadly, this will not
        // be true if we ever fix the duration bug across loops (see comments inline)
        // but it's a band-aid for now, sorry.  Probably HtmlTimelineUI needs smarter ordering.
        this.nextEventState.sortKeyOffset = e.sortKey * this.nextEventState.jumpCount;
      }
    }
  }
  _AddPassedTexts(fightNow, currentTime) {
    while (this.nextText < this.texts.length) {
      const t = this.texts[this.nextText];
      if (!t) break;
      if (t.time > fightNow) break;
      if (t.type === 'info') this.ui?.OnShowInfoText(t.text, currentTime);else if (t.type === 'alert') this.ui?.OnShowAlertText(t.text, currentTime);else if (t.type === 'alarm') this.ui?.OnShowAlarmText(t.text, currentTime);else if (t.type === 'tts') this.ui?.OnSpeakTTS(t.text, currentTime);else if (t.type === 'trigger') this.ui?.OnTrigger(t.trigger, t.matches, currentTime);
      ++this.nextText;
    }
  }
  _CancelUpdate() {
    if (this.updateTimer) {
      window.clearTimeout(this.updateTimer);
      this.updateTimer = 0;
    }
  }
  _ScheduleUpdate(fightNow) {
    console.assert(this.timebase, '_ScheduleUpdate called while stopped');
    let nextEventStarting = kBig;
    let nextTextOccurs = kBig;
    let nextEventEnding = kBig;
    let nextSyncStarting = kBig;
    let nextSyncEnding = kBig;
    if (this.nextEventState.index < this.events.length) {
      const nextEvent = this.events[this.nextEventState.index];
      if (nextEvent) {
        const nextEventEndsAt = nextEvent.time + this.nextEventState.timeOffset;
        console.assert(nextEventStarting > fightNow, 'nextEvent wasn\'t updated before calling _ScheduleUpdate');
        // There might be more events than we can show, so the next event might be in
        // the past. If that happens, then ignore it, as we can't use that for our timer.
        const showNextEventAt = nextEventEndsAt - this.options.ShowTimerBarsAtSeconds;
        if (showNextEventAt > fightNow) nextEventStarting = showNextEventAt;
      }
    }
    if (this.nextText < this.texts.length) {
      const nextText = this.texts[this.nextText];
      if (nextText) {
        nextTextOccurs = nextText.time;
        console.assert(nextTextOccurs > fightNow, 'nextText wasn\'t updated before calling _ScheduleUpdate');
      }
    }
    if (this.activeEvents.length > 0) {
      const activeEvent = this.activeEvents[0];
      if (activeEvent) {
        nextEventEnding = activeEvent.time;
        console.assert(nextEventEnding > fightNow, 'Expired activeEvents weren\'t pruned before calling _ScheduleUpdate');
      }
    }
    if (this.nextSyncStart < this.syncStarts.length) {
      const syncStarts = this.syncStarts[this.nextSyncStart];
      if (syncStarts) {
        nextSyncStarting = syncStarts.start;
        console.assert(nextSyncStarting > fightNow, 'nextSyncStart wasn\'t updated before calling _ScheduleUpdate');
      }
    }
    if (this.nextSyncEnd < this.syncEnds.length) {
      const syncEnds = this.syncEnds[this.nextSyncEnd];
      if (syncEnds) {
        nextSyncEnding = syncEnds.end;
        console.assert(nextSyncEnding > fightNow, 'nextSyncEnd wasn\'t updated before calling _ScheduleUpdate');
      }
    }
    const forceEnd = this.activeLastForceJumpSync?.end;
    if (forceEnd !== undefined && forceEnd < nextSyncEnding) nextSyncEnding = forceEnd;
    const nextTime = Math.min(nextEventStarting, nextEventEnding, nextTextOccurs, nextSyncStarting, nextSyncEnding);
    if (nextTime === kBig) return;
    console.assert(nextTime > fightNow, 'nextTime is in the past');
    this._CancelUpdate();
    this.updateTimer = window.setTimeout(() => this._OnUpdateTimer(Date.now()), (nextTime - fightNow) * 1000);
  }
  _OnUpdateTimer(currentTime) {
    console.assert(this.timebase, '_OnTimerUpdate called while stopped');
    // Round to ~30ms precision to avoid micro changes of fightNow from 10 to 10.003.
    // Also round *up*, as these timers are always scheduled for the next event
    // and it doesn't make sense to schedule something for 0.8s out and then
    // round down to 0.799s and need another timer to have that text complete.
    const fightNow = Math.ceil(32 * (currentTime - this.timebase) / 1000) / 32;

    // Unlike other jumps which happen "immediately", an unconditional jump may have happened
    // in the past (+/- some timer variation).  Should we just consider that the update
    // always happens exactly at the time it should?
    const unconditionalJump = this._CheckUnconditionalJump(fightNow);
    if (unconditionalJump) {
      const jumpSource = unconditionalJump.time;
      this._AddPassedTexts(jumpSource, currentTime);
      const jumpDest = unconditionalJump.jump;
      if (jumpDest === undefined) throw new not_reached/* UnreachableCode */.$();
      const offset = fightNow - jumpSource;
      this.SyncTo(jumpDest, currentTime - offset);

      // Handle "overhanging" windows on unconditional jumps, by rewriting:
      //   old: 500.0 sync /something/ window 20,10 jump 300
      //   new: 300.0 sync /something window 0,10 jump 300
      this.activeLastForceJumpSync = {
        ...unconditionalJump,
        time: jumpDest,
        start: jumpDest,
        end: unconditionalJump.end - unconditionalJump.time + jumpDest,
        jumpType: 'normal'
      };
      this._OnUpdateTimer(currentTime);
      return;
    }

    // Send text events now or they'd be skipped by _AdvanceTimeTo().
    this._AddPassedTexts(fightNow, currentTime);
    this._AdvanceTimeTo(fightNow);
    this._CollectActiveSyncs(fightNow);
    this._AddDurationTimers(fightNow);
    this._RemoveExpiredTimers(fightNow);
    this._AddUpcomingTimers(fightNow);
    this._ScheduleUpdate(fightNow);
  }
  _CheckUnconditionalJump(fightNow) {
    const forceJump = this.forceJumps[this.nextForceJump];
    if (forceJump && forceJump.time <= fightNow) return forceJump;
  }
}
class TimelineController {
  activeTimeline = null;
  constructor(options, ui, raidbossDataFiles) {
    this.options = options;
    this.ui = ui;
    this.options = options;
    this.ui = ui;
    this.timelines = {};
    for (const [filename, file] of Object.entries(raidbossDataFiles)) {
      if (!filename.endsWith('.txt') || typeof file !== 'string') continue;
      this.timelines[filename] = file;
    }

    // Used to suppress any Engage! if there's a wipe between /countdown and Engage!.
    this.suppressNextEngage = false;
    this.wipeRegex = netregexes/* commonNetRegex.wipe */.sL.wipe;
  }
  SetPopupTextInterface(popupText) {
    this.ui.SetPopupTextInterface(popupText);
  }
  SetInCombat(inCombat) {
    // Wipe lines come before combat is false, but because OnLogEvent doesn't process
    // lines when out of combat, suppress any engages that come before the next countdown
    // just as a safety, especially for old ARR content where wipe lines don't happen.
    if (!inCombat) this.suppressNextEngage = true;
    if (!inCombat && this.activeTimeline) this.activeTimeline.Stop();
  }
  OnLogEvent(e) {
    if (!this.activeTimeline) return;
    const currentTime = Date.now();
    for (const log of e.detail.logs) {
      if (LocaleRegex.countdownStart[this.options.ParserLanguage].test(log)) {
        // As you can't start a countdown while in combat, the next engage is real.
        this.suppressNextEngage = false;
      } else if (LocaleRegex.countdownEngage[this.options.ParserLanguage].test(log)) {
        // If we see an engage after a wipe, but before combat has started otherwise
        // (e.g. countdown > wipe > face pull > engage), don't process this engage line
        if (this.suppressNextEngage) continue;
      } else if (this.wipeRegex.test(log)) {
        // If we see a wipe, ignore the next engage.  If we see a countdown before that wipe,
        // we will clear this.  Therefore, this will only apply to active countdowns.
        this.suppressNextEngage = true;
      }
      this.activeTimeline.OnLogLine(log, currentTime);
    }
  }
  SetActiveTimeline(timelineFiles, timelines, replacements, triggers, styles, zoneId) {
    this.activeTimeline = null;
    let text = '';

    // Get the text from each file in |timelineFiles|.
    for (const timelineFile of timelineFiles) {
      const name = this.timelines[timelineFile];
      if (name !== undefined) text = `${text}\n${name}`;else console.log(`Timeline file not found: ${timelineFile}`);
    }
    // Append text from each block in |timelines|.
    for (const timeline of timelines) text = `${text}\n${timeline}`;
    if (text) {
      this.activeTimeline = new Timeline(text, replacements, triggers, styles, this.options, zoneId);
    }
    this.ui.SetTimeline(this.activeTimeline);
  }
  IsReady() {
    return this.timelines !== null;
  }
}
class TimelineLoader {
  constructor(timelineController) {
    this.timelineController = timelineController;
    this.timelineController = timelineController;
  }
  SetTimelines(timelineFiles, timelines, replacements, triggers, styles, zoneId) {
    this.timelineController.SetActiveTimeline(timelineFiles, timelines, replacements, triggers, styles, zoneId);
  }
  IsReady() {
    return this.timelineController.IsReady();
  }
  StopCombat() {
    this.timelineController.SetInCombat(false);
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorTimeline.ts

class RaidEmulatorTimeline extends Timeline {
  emulatedStatus = 'pause';
  constructor(text, replacements, triggers, styles, options, zoneId) {
    super(text, replacements, triggers, styles, options, zoneId);
  }
  bindTo(emulator) {
    this.emulator = emulator;
    emulator.on('play', () => {
      this.emulatedStatus = 'play';
    });
    emulator.on('pause', () => {
      this.emulatedStatus = 'pause';
    });
  }
  emulatedSync(currentLogTime) {
    if (!currentLogTime) return;

    // This is a bit complicated due to jumps in timelines. If we've already got a timebase,
    // fightNow needs to be calculated based off of that instead of initialOffset
    // timebase = 0 when not set
    const baseTimestamp = this.timebase || this.emulator?.currentEncounter?.encounter?.initialTimestamp || currentLogTime;
    const fightNow = (currentLogTime - baseTimestamp) / 1000;
    this.SyncTo(fightNow, currentLogTime);
    this._OnUpdateTimer(currentLogTime);
  }
  _ScheduleUpdate(_fightNow) {
    // Override
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorTimelineUI.ts



class RaidEmulatorTimelineUI extends TimelineUI {
  emulatedTimerBars = [];
  emulatedStatus = 'pause';
  constructor(options) {
    super();
    this.options = options;
    const container = document.querySelector('.timer-bar-container');
    if (!(container instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    this.$barContainer = container;
    const pTemplate = document.querySelector('template.progress');
    if (!(pTemplate instanceof HTMLTemplateElement)) throw new not_reached/* UnreachableCode */.$();
    if (!(pTemplate.content.firstElementChild instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    this.$progressTemplate = pTemplate.content.firstElementChild;
  }
  bindTo(emulator) {
    emulator.on('tick', (currentLogTime, lastLogLineTime) => {
      for (const bar of this.emulatedTimerBars) this.updateBar(bar, currentLogTime);
      const toRemove = this.emulatedTimerBars.filter(bar => bar.forceRemoveAt <= currentLogTime);
      for (const bar of toRemove) bar.$progress.remove();
      this.emulatedTimerBars = this.emulatedTimerBars.filter(bar => {
        return bar.forceRemoveAt > currentLogTime;
      });
      this.timeline && this.timeline.timebase && this.timeline._OnUpdateTimer(lastLogLineTime);
    });
    emulator.on('play', () => {
      this.emulatedStatus = 'play';
      if (this.timeline instanceof RaidEmulatorTimeline && emulator.currentLogTime !== undefined) this.timeline.emulatedSync(emulator.currentLogTime);
    });
    emulator.on('pause', () => {
      this.emulatedStatus = 'pause';
    });
    emulator.on('preSeek', _time => {
      this.timeline && this.timeline.Stop();
      for (const bar of this.emulatedTimerBars) bar.$progress.remove();
      this.emulatedTimerBars = [];
    });
    emulator.on('postSeek', currentLogTime => {
      if (this.timeline instanceof RaidEmulatorTimeline) this.timeline.emulatedSync(currentLogTime);
      for (const bar of this.emulatedTimerBars) this.updateBar(bar, currentLogTime);
    });
    emulator.on('currentEncounterChanged', this.stop.bind(this));
  }
  stop() {
    this.timeline && this.timeline.Stop();
    for (const bar of this.emulatedTimerBars) bar.$progress.remove();
    this.emulatedTimerBars = [];
  }
  updateBar(bar, currentLogTime) {
    const barElapsed = currentLogTime - bar.start;
    let barProg = Math.min(barElapsed / bar.duration * 100, 100);
    if (bar.style === 'empty') barProg = 100 - barProg;
    let rightText = ((bar.duration - barElapsed) / 1000).toFixed(1);
    if (barProg >= 100) rightText = '';
    bar.$leftLabel.textContent = bar.event.text;
    bar.$rightLabel.textContent = rightText;
    bar.$bar.style.width = `${barProg}%`;
  }
  Init() {
    // This space intentionally left blank
  }
  AddDebugInstructions() {
    // This space intentionally left blank
  }

  // Override
  OnAddTimer(fightNow, e, channeling) {
    if (!this.timeline) throw new not_reached/* UnreachableCode */.$();
    const end = this.timeline.timebase + e.time * 1000;
    const start = end - this.options.ShowTimerBarsAtSeconds * 1000;
    const $progress = this.$progressTemplate.cloneNode(true);
    if (!($progress instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    const $progBar = $progress.querySelector('.progress-bar');
    const $progLeft = $progress.querySelector('.timer-bar-left-label');
    const $progRight = $progress.querySelector('.timer-bar-right-label');
    if (!($progBar instanceof HTMLDivElement && $progLeft instanceof HTMLElement && $progRight instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    const bar = {
      $progress: $progress,
      $bar: $progBar,
      $leftLabel: $progLeft,
      $rightLabel: $progRight,
      start: start,
      style: !channeling ? 'fill' : 'empty',
      duration: (channeling ? e.time - fightNow : this.options.ShowTimerBarsAtSeconds) * 1000,
      event: e,
      forceRemoveAt: 0
    };
    bar.forceRemoveAt = bar.start + bar.duration;
    if (this.options.KeepExpiredTimerBarsForSeconds) bar.forceRemoveAt += this.options.KeepExpiredTimerBarsForSeconds * 1000;
    this.emulatedTimerBars.push(bar);
    this.$barContainer.append(bar.$progress);
    this.updateBar(bar, bar.start);
  }

  // Override
  OnRemoveTimer(e, expired) {
    const bars = this.emulatedTimerBars.filter(bar => bar.event.id === e.id);
    bars.forEach(bar => {
      if (!this.timeline) throw new not_reached/* UnreachableCode */.$();
      bar.forceRemoveAt = this.timeline.timebase;
      if (expired && this.options.KeepExpiredTimerBarsForSeconds) bar.forceRemoveAt += this.options.KeepExpiredTimerBarsForSeconds * 1000;
    });
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorAnalysisTimelineUI.ts

class RaidEmulatorAnalysisTimelineUI extends RaidEmulatorTimelineUI {
  constructor(options) {
    super(options);
    // Use orphaned child div to prevent DOM updates
    this.$barContainer = document.createElement('div');
  }
  updateBar(_bar, _currentLogTime) {
    // Stubbed out for performance
  }
  OnAddTimer(_fightNow, _e, _channeling) {
    // Stubbed out for performance
  }
  OnRemoveTimer(_e, _expired) {
    // Stubbed out for performance
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorTimelineController.ts



class RaidEmulatorTimelineController extends TimelineController {
  activeTimeline = null;
  bindTo(emulator) {
    this.emulator = emulator;
    if (this.activeTimeline) this.activeTimeline.bindTo(emulator);
  }

  // Override
  SetActiveTimeline(timelineFiles, timelines, replacements, triggers, styles, zoneId) {
    this.activeTimeline = null;
    let text = '';

    // Get the text from each file in |timelineFiles|.
    for (const timelineFile of timelineFiles) {
      const name = this.timelines[timelineFile];
      if (name !== undefined) text = `${text}\n${name}`;else console.log(`Timeline file not found: ${timelineFile}`);
    }
    // Append text from each block in |timelines|.
    for (const timeline of timelines) text = `${text}\n${timeline}`;
    if (text) {
      this.activeTimeline = new RaidEmulatorTimeline(text, replacements, triggers, styles, this.options, zoneId);
      if (this.emulator) this.activeTimeline.bindTo(this.emulator);
    }
    this.ui.SetTimeline(this.activeTimeline);
  }

  // Override
  OnLogEvent(_e) {
    throw new not_reached/* UnreachableCode */.$();
  }
  onEmulatorLogEvent(logs) {
    if (!this.activeTimeline) return;
    for (const line of logs) {
      this.activeTimeline.OnLogLine(line.convertedLine, line.timestamp);
      // Only call _OnUpdateTimer if we have a timebase from the previous call to OnLogLine
      // This avoids spamming the console with a ton of messages
      if (this.activeTimeline.timebase) this.activeTimeline._OnUpdateTimer(line.timestamp);
    }
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/StubbedPopupText.ts

class StubbedPopupText extends PopupText {
  constructor(options, timelineLoader, raidbossFileData) {
    super(options, timelineLoader, raidbossFileData);
  }
  HookOverlays() {
    // Stubbed, we don't want overlay hooks
  }
  getData() {
    return this.data;
  }
  getPartyTracker() {
    return this.partyTracker;
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/PopupTextAnalysis.ts



class Resolver {
  promiseResolved = false;
  constructor(status) {
    this.status = status;
  }
  async isResolved(log) {
    if (this.delayUntil) {
      if (this.delayUntil < log.timestamp) {
        delete this.delayUntil;
        if (this.delayResolver) this.delayResolver();
        await this.delayPromise;
      } else {
        return false;
      }
    }
    if (this.promise && !this.promiseResolved) return false;
    if (this.run) this.run();
    if (this.final) this.final();
    return true;
  }
  setDelay(delayUntil) {
    this.delayUntil = delayUntil;
    return this.delayPromise = new Promise(res => {
      this.delayResolver = res;
    });
  }
  setPromise(promise) {
    this.promise = promise;
    void this.promise.then(() => {
      this.promiseResolved = true;
    });
  }
  setRun(run) {
    this.run = run;
  }
  setFinal(final) {
    this.final = final;
  }
  setHelper(triggerHelper) {
    this.triggerHelper = triggerHelper;
  }
}
class PopupTextAnalysis extends StubbedPopupText {
  triggerResolvers = [];
  constructor(options, timelineLoader, raidbossFileData) {
    super(options, timelineLoader, raidbossFileData);
    this.regexCache = new Map();
    this.ttsSay = _text => {
      return;
    };
  }

  // Override `OnTrigger` so we can use our own exception handler
  OnTrigger(trigger, matches, currentTime) {
    try {
      this.OnTriggerInternal(trigger, matches, currentTime);
    } catch (e) {
      console.log(trigger, e);
    }
  }
  OnLog(_e) {
    throw new not_reached/* UnreachableCode */.$();
  }
  async onEmulatorLog(logs, getCurrentLogLine) {
    for (const logObj of logs) {
      if (!this.regexCache.has(logObj)) this.regexCache.set(logObj, new Map());
      const lineCache = this.regexCache.get(logObj);
      if (!lineCache) continue;

      // Deliberately exclude the check for `cactbot wipe` since that'll never happen here

      for (const trigger of this.triggers) {
        const regex = trigger.localRegex;
        if (!regex) continue;
        let r = lineCache.get(trigger);
        if (r === undefined) {
          r = regex.exec(logObj.convertedLine) ?? false;
          lineCache.set(trigger, r);
        }
        if (r === false) continue;
        const resolver = this.currentResolver = new Resolver({
          initialData: EmulatorCommon.cloneData(this.data),
          suppressed: false,
          executed: false
        });
        this.OnTrigger(trigger, r, logObj.timestamp);
        resolver.setFinal(() => {
          const currentLine = getCurrentLogLine();
          resolver.status.finalData = EmulatorCommon.cloneData(this.data);
          delete resolver.triggerHelper?.resolver;
          if (this.callback) this.callback(currentLine, resolver.triggerHelper, resolver.status, this.data);
        });
        const isResolved = await resolver.isResolved(logObj);
        if (!isResolved) this.triggerResolvers.push(resolver);
      }
      for (const trigger of this.netTriggers) {
        const regex = trigger.localNetRegex;
        if (!regex) continue;
        let r = lineCache.get(trigger);
        if (r === undefined) {
          r = regex.exec(logObj.networkLine) ?? false;
          lineCache.set(trigger, r);
        }
        if (r !== false) {
          const resolver = this.currentResolver = new Resolver({
            initialData: EmulatorCommon.cloneData(this.data),
            suppressed: false,
            executed: false
          });
          const matches = r.groups ?? {};
          this._onTriggerInternalGetHelper(trigger, matches, logObj.timestamp);
          this.OnTrigger(trigger, r, logObj.timestamp);
          resolver.setFinal(() => {
            const currentLine = getCurrentLogLine();
            resolver.status.finalData = EmulatorCommon.cloneData(this.data);
            delete resolver.triggerHelper?.resolver;
            if (this.callback) this.callback(currentLine, resolver.triggerHelper, resolver.status, this.data);
          });
          const isResolved = await resolver.isResolved(logObj);
          if (!isResolved) this.triggerResolvers.push(resolver);
        }
      }
      await this.checkResolved(logObj);
    }
  }
  OnNetLog(_e) {
    throw new not_reached/* UnreachableCode */.$();
  }
  async checkResolved(logObj) {
    const unresolved = [];
    for (const res of this.triggerResolvers) {
      if (!(await res.isResolved(logObj))) unresolved.push(res);
    }
    this.triggerResolvers = unresolved;
  }
  _onTriggerInternalCondition(triggerHelper) {
    const ret = super._onTriggerInternalCondition(triggerHelper);
    if (triggerHelper.resolver) triggerHelper.resolver.status.condition = ret;
    return ret;
  }
  _onTriggerInternalDelaySeconds(triggerHelper) {
    // Can't inherit the default logic for delay since we don't
    // want to delay for mass processing of the timeline
    const delay = 'delaySeconds' in triggerHelper.trigger ? triggerHelper.valueOrFunction(triggerHelper.trigger.delaySeconds) : 0;
    if (typeof delay === 'number') {
      if (triggerHelper.resolver) triggerHelper.resolver.status.delay = delay;
      if (!delay || delay <= 0) return;
      return triggerHelper.resolver?.setDelay(triggerHelper.now + delay * 1000);
    }
  }
  _onTriggerInternalPromise(triggerHelper) {
    const ret = super._onTriggerInternalPromise(triggerHelper);
    if (triggerHelper.resolver) triggerHelper.resolver.status.promise = ret;
    if (!ret) return ret;
    if (triggerHelper.resolver) triggerHelper.resolver.setPromise(ret);
    return ret;
  }
  _onTriggerInternalTTS(triggerHelper) {
    super._onTriggerInternalTTS(triggerHelper);
    if (triggerHelper.ttsText !== undefined && triggerHelper.resolver && triggerHelper.resolver.status.responseType === undefined) {
      triggerHelper.resolver.status.responseType = 'tts';
      triggerHelper.resolver.status.responseLabel = triggerHelper.ttsText;
    }
  }
  _onTriggerInternalRun(triggerHelper) {
    triggerHelper.resolver?.setRun(() => {
      if (triggerHelper.resolver) triggerHelper.resolver.status.executed = true;
      super._onTriggerInternalRun(triggerHelper);
    });
  }
  _makeTextElement(triggerHelper, text, _className) {
    if (triggerHelper.resolver) triggerHelper.resolver.status.result ??= text;
    return document.createElement('div');
  }
  _createTextFor(triggerHelper, text, textType, _lowerTextKey, _duration) {
    // No-op for functionality, but store off this info for feedback
    if (triggerHelper.resolver) {
      triggerHelper.resolver.status.responseType = textType;
      triggerHelper.resolver.status.responseLabel = text;
    }
  }
  _playAudioFile(triggerHelper, url, _volume) {
    // No-op for functionality, but store off this info for feedback

    if (triggerHelper.resolver) {
      // If we already have text and this is a default alert sound, don't override that info
      if (triggerHelper.resolver.status.responseType !== undefined) {
        if (['info', 'alert', 'alarm'].includes(triggerHelper.resolver.status.responseType) && [this.options.InfoSound, this.options.AlertSound, this.options.AlarmSound].includes(url)) return;
      }
      triggerHelper.resolver.status.responseType = 'audiofile';
      triggerHelper.resolver.status.responseLabel = url;
    }
  }
  _onTriggerInternalGetHelper(trigger, matches, now) {
    const ret = {
      ...super._onTriggerInternalGetHelper(trigger, matches, now)
    };
    ret.resolver = this.currentResolver;
    ret.resolver?.setHelper(ret);
    return ret;
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/AnalyzedEncounter.ts










class AnalyzedEncounter extends EventBus {
  perspectives = {};
  constructor(options, encounter, emulator, watchCombatantsOverride) {
    super();
    this.options = options;
    this.encounter = encounter;
    this.emulator = emulator;
    this.watchCombatantsOverride = watchCombatantsOverride;
  }
  selectPerspective(id, popupText) {
    if (this.encounter.combatantTracker) {
      const selectedPartyMember = this.encounter.combatantTracker.combatants[id];
      if (!selectedPartyMember) return;
      popupText?.getPartyTracker().onPartyChanged({
        party: this.encounter.combatantTracker.partyMembers.map(id => {
          const partyMember = this.encounter?.combatantTracker?.combatants[id];
          if (!partyMember) throw new not_reached/* UnreachableCode */.$();
          const initState = partyMember.nextState(0);
          return {
            id: id,
            worldId: 0,
            name: initState.Name ?? '',
            job: initState.Job ?? 0,
            inParty: true
          };
        })
      });
      this.updateState(selectedPartyMember, this.encounter.startTimestamp, popupText);
      popupText?.OnChangeZone({
        type: 'ChangeZone',
        zoneName: this.encounter.encounterZoneName,
        zoneID: parseInt(this.encounter.encounterZoneId, 16)
      });
    }
  }
  updateState(combatant, timestamp, popupText) {
    const state = combatant.getState(timestamp);
    const job = state.Job;
    if (!job) throw new not_reached/* UnreachableCode */.$();
    popupText?.OnPlayerChange({
      detail: {
        id: state.ID ?? 0,
        name: state.Name ?? '',
        job: util/* default.jobEnumToJob */.Z.jobEnumToJob(job),
        level: state.Level ?? 0,
        currentHP: state.CurrentHP,
        maxHP: state.MaxHP,
        currentMP: state.CurrentMP,
        maxMP: state.MaxMP,
        currentCP: 0,
        maxCP: 0,
        currentGP: 0,
        maxGP: 0,
        currentShield: 0,
        jobDetail: null,
        pos: {
          x: state.PosX,
          y: state.PosY,
          z: state.PosZ
        },
        rotation: state.Heading,
        bait: 0,
        debugJob: ''
      }
    });
  }
  async analyze() {
    // @TODO: Make this run in parallel sometime in the future, since it could be really slow?
    if (this.encounter.combatantTracker) {
      for (const id of this.encounter.combatantTracker.partyMembers) await this.analyzeFor(id);
    }

    // Free up this memory
    delete this.regexCache;
    return this.dispatch('analyzed');
  }
  async analyzeFor(id) {
    if (!this.encounter.combatantTracker) return;
    let currentLogIndex = 0;
    const partyMember = this.encounter.combatantTracker.combatants[id];
    const getCurLogLine = () => {
      const line = this.encounter.logLines[currentLogIndex];
      if (!line) throw new not_reached/* UnreachableCode */.$();
      return line;
    };
    if (!partyMember) return;
    const initState = partyMember?.nextState(0);
    if (initState.Job === 0) {
      this.perspectives[id] = {
        initialData: {},
        triggers: []
      };
      return;
    }
    const timelineUI = new RaidEmulatorAnalysisTimelineUI(this.options);
    const timelineController = new RaidEmulatorTimelineController(this.options, timelineUI, raidboss_manifest/* default */.Z);
    timelineController.bindTo(this.emulator);
    const popupText = new PopupTextAnalysis(this.options, new TimelineLoader(timelineController), raidboss_manifest/* default */.Z);
    if (this.regexCache) popupText.regexCache = this.regexCache;
    const generator = new PopupTextGenerator(popupText);
    timelineUI.SetPopupTextInterface(generator);
    timelineController.SetPopupTextInterface(generator);
    this.selectPerspective(id, popupText);
    if (timelineController.activeTimeline?.ui) {
      timelineController.activeTimeline.ui.OnTrigger = (trigger, matches) => {
        const currentLine = this.encounter.logLines[currentLogIndex];
        if (!currentLine) throw new not_reached/* UnreachableCode */.$();
        const resolver = popupText.currentResolver = new Resolver({
          initialData: EmulatorCommon.cloneData(popupText.getData()),
          suppressed: false,
          executed: false
        });
        resolver.triggerHelper = popupText._onTriggerInternalGetHelper(trigger, matches?.groups ?? {}, currentLine?.timestamp);
        popupText.triggerResolvers.push(resolver);
        popupText.OnTrigger(trigger, matches, currentLine.timestamp);
        resolver.setFinal(() => {
          // Get the current log line when the callback is executed instead of the line
          // when the trigger initially fires
          const resolvedLine = getCurLogLine();
          resolver.status.finalData = EmulatorCommon.cloneData(popupText.getData());
          delete resolver.triggerHelper?.resolver;
          if (popupText.callback) {
            popupText.callback(resolvedLine, resolver.triggerHelper, resolver.status, popupText.getData());
          }
        });
      };
    }
    popupText.callback = (log, triggerHelper, currentTriggerStatus) => {
      const perspective = this.perspectives[id];
      if (!perspective || !triggerHelper) throw new not_reached/* UnreachableCode */.$();
      perspective.triggers.push({
        triggerHelper: triggerHelper,
        status: currentTriggerStatus,
        logLine: log,
        resolvedOffset: log.timestamp - this.encounter.startTimestamp
      });
    };
    popupText.triggerResolvers = [];
    this.perspectives[id] = {
      initialData: EmulatorCommon.cloneData(popupText.getData(), []),
      triggers: [],
      finalData: popupText.getData()
    };
    for (; currentLogIndex < this.encounter.logLines.length; ++currentLogIndex) {
      const log = this.encounter.logLines[currentLogIndex];
      if (!log) throw new not_reached/* UnreachableCode */.$();
      await this.dispatch('analyzeLine', log);
      const combatant = this.encounter?.combatantTracker?.combatants[id];
      if (combatant && combatant.hasState(log.timestamp)) this.updateState(combatant, log.timestamp, popupText);
      this.watchCombatantsOverride.tick(log.timestamp);
      await popupText.onEmulatorLog([log], getCurLogLine);
      timelineController.onEmulatorLogEvent([log]);
    }
    this.watchCombatantsOverride.clear();
    timelineUI.stop();
    this.regexCache = popupText.regexCache;
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/RaidEmulator.ts



class RaidEmulator extends EventBus {
  static playbackSpeed = 10;
  encounters = [];
  constructor(options) {
    super();
    this.options = options;
    this.options = options;
    this.encounters = [];
  }
  addEncounter(encounter) {
    this.encounters.push(encounter);
  }
  setCurrent(enc, watchCombatantsOverride) {
    // If language was autodetected from the encounter, set the current ParserLanguage
    // appropriately
    if (enc.language) this.options.ParserLanguage = enc.language;
    this.currentEncounter = new AnalyzedEncounter(this.options, enc, this, watchCombatantsOverride);
    void this.dispatch('preCurrentEncounterChanged', this.currentEncounter);
    void this.currentEncounter.analyze().then(() => {
      void this.dispatch('currentEncounterChanged', this.currentEncounter);
    });
  }
  setCurrentByID(id, watchCombatantsOverride) {
    const enc = this.encounters.find(v => v.id === id);
    if (!enc) return false;
    this.setCurrent(enc, watchCombatantsOverride);
    return true;
  }
  selectPerspective(id) {
    if (!this.currentEncounter || !this.popupText) throw new not_reached/* UnreachableCode */.$();
    this.currentEncounter.selectPerspective(id, this.popupText);
    if (this.currentLogTime !== undefined) void this.seekTo(this.currentLogTime);
  }
  play() {
    if (!this.currentEncounter) return false;
    const firstIndex = this.currentEncounter.encounter.firstLineIndex;
    this.currentLogTime = this.currentLogTime ?? this.currentEncounter.encounter.logLines[firstIndex]?.timestamp;
    this.currentLogLineIndex = this.currentLogLineIndex || firstIndex - 1;
    this.lastTickTime = Date.now();
    // Need to use a local function make eslint happy, or ignore the eslint rule here?
    const handler = () => {
      void this.tick();
    };
    this.playingInterval = window.setInterval(handler, RaidEmulator.playbackSpeed);
    void this.dispatch('play');
    return true;
  }
  pause() {
    window.clearInterval(this.playingInterval);
    this.lastTickTime = undefined;
    this.playingInterval = undefined;
    void this.dispatch('pause');
    return true;
  }
  async seek(timeOffset) {
    if (!this.currentEncounter) throw new not_reached/* UnreachableCode */.$();
    const seekTimestamp = this.currentEncounter.encounter.startTimestamp + timeOffset;
    await this.seekTo(seekTimestamp);
  }
  async seekTo(seekTimestamp) {
    if (!this.currentEncounter) throw new not_reached/* UnreachableCode */.$();
    await this.dispatch('preSeek', seekTimestamp);
    this.currentLogLineIndex = -1;
    let logs = [];
    const playing = this.playingInterval !== undefined;
    if (playing) this.pause();
    for (let i = this.currentLogLineIndex + 1; i < this.currentEncounter.encounter.logLines.length; ++i) {
      const line = this.currentEncounter.encounter.logLines[i];
      if (!line) throw new not_reached/* UnreachableCode */.$();
      if (line.timestamp <= seekTimestamp) {
        logs.push(line);
        // Bunch emitted lines for performance reasons
        if (logs.length > 100) {
          await this.dispatch('emitLogs', {
            logs: logs
          });
          logs = [];
        }
        this.currentLogTime = this.lastLogLineTime = line.timestamp;
        ++this.currentLogLineIndex;
        await this.dispatch('midSeek', line);
        continue;
      }
      break;
    }

    // Emit any remaining lines if needed
    if (logs.length) {
      await this.dispatch('emitLogs', {
        logs: logs
      });
      await this.dispatch('midSeek', logs.pop());
    }
    await this.dispatch('postSeek', seekTimestamp);
    await this.dispatch('tick', this.currentLogTime, this.lastLogLineTime);
    if (playing) this.play();
  }
  async tick() {
    if (this.currentLogLineIndex === undefined || !this.currentEncounter || this.lastTickTime === undefined || this.currentLogTime === undefined) throw new not_reached/* UnreachableCode */.$();
    if (this.currentLogLineIndex + 1 >= this.currentEncounter.encounter.logLines.length) {
      this.pause();
      return;
    }
    if (this.playingInterval === undefined) return;
    const logs = [];
    const timeDiff = Date.now() - this.lastTickTime;
    const lastTimestamp = this.currentLogTime + timeDiff;
    for (let i = this.currentLogLineIndex + 1; i < this.currentEncounter.encounter.logLines.length; ++i) {
      const line = this.currentEncounter.encounter.logLines[i];
      if (!line) throw new not_reached/* UnreachableCode */.$();
      if (line.timestamp <= lastTimestamp) {
        logs.push(this.currentEncounter.encounter.logLines[i]);
        this.lastLogLineTime = line.timestamp;
        ++this.currentLogLineIndex;
        continue;
      }
      break;
    }
    this.currentLogTime += timeDiff;
    this.lastTickTime += timeDiff;
    if (logs.length) await this.dispatch('emitLogs', {
      logs: logs
    });
    await this.dispatch('tick', this.currentLogTime, this.lastLogLineTime);
  }
  setPopupText(popupText) {
    this.popupText = popupText;
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorOverlayApiHook.ts

class RaidEmulatorOverlayApiHook {
  currentLogTime = 0;
  connected = false;
  constructor(emulator) {
    this.emulator = emulator;
    (0,overlay_plugin_api/* setOverlayHandlerOverride */.cB)('getCombatants', this._getCombatantsOverride.bind(this));
    emulator.on('tick', currentLogTime => {
      this.currentLogTime = currentLogTime;
    });
    emulator.on('preSeek', () => {
      this.currentLogTime = 0;
    });
    emulator.on('preCurrentEncounterChanged', encounter => {
      this.currentLogTime = 0;
      encounter.on('analyzeLine', log => {
        this.currentLogTime = log.timestamp;
      });
    });
  }
  _getCombatantsOverride(msg) {
    return new Promise(res => {
      const curEnc = this.emulator.currentEncounter;
      const tracker = curEnc?.encounter.combatantTracker;
      if (!curEnc || !tracker) {
        res({
          combatants: []
        });
        return;
      }
      const timestamp = this.currentLogTime;
      const combatants = [];
      const ids = msg.ids ?? [];
      const names = msg.names ?? [];
      const hasIds = ids.length > 0;
      const hasNames = names.length > 0;
      for (const [id, combatant] of Object.entries(tracker.combatants)) {
        // If this combatant didn't exist at this point, skip them
        const firstStateStamp = combatant.firstStateTimestamp;
        const lastStateStamp = combatant.lastStateTimestamp;
        if (!firstStateStamp || !lastStateStamp) continue;
        if (firstStateStamp > timestamp || lastStateStamp < timestamp) continue;
        const idNum = parseInt(id, 16);
        // nextSignificantState is a bit inefficient but given that this isn't run every tick
        // we can afford to be a bit inefficient for readability's sake
        const combatantState = combatant.nextState(timestamp).fullClone();
        if (!hasIds && !hasNames) combatants.push(combatantState);else if (hasIds && ids.includes(idNum)) combatants.push(combatantState);else if (hasNames && names.includes(combatantState.Name ?? 'never')) combatants.push(combatantState);
      }
      res({
        combatants: combatants
      });
    });
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorPopupText.ts


class RaidEmulatorPopupText extends StubbedPopupText {
  constructor(options, timelineLoader, raidbossFileData) {
    super(options, timelineLoader, raidbossFileData);
    const popupElem = document.querySelector('.popup-text-container-outer');
    if (!(popupElem instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    this.$popupTextContainerWrapper = popupElem;
    this.emulatedOffset = 0;
    this.displayedText = [];
    this.scheduledTriggers = [];
    this.seeking = false;
    const templateElement = document.querySelector('template.textElement');
    if (!(templateElement instanceof HTMLTemplateElement)) throw new not_reached/* UnreachableCode */.$();
    const textElement = templateElement.content.firstElementChild;
    if (!(textElement instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    this.$textElementTemplate = textElement;
    this.audioDebugTextDuration = 2000;
    const parentTtsSay = this.ttsSay;
    this.ttsSay = ttsText => {
      if (this.seeking) return;
      const div = this._makeTextElement(undefined, ttsText, 'tts-text');
      this.addDisplayText(div, this.emulatedOffset + this.audioDebugTextDuration);
      parentTtsSay(ttsText);
    };
  }
  async doUpdate(currentLogTime) {
    this.emulatedOffset = currentLogTime;
    for (const t of this.scheduledTriggers) {
      const remaining = t.expires - currentLogTime;
      if (remaining <= 0) {
        t.resolver();
        await t.promise;
      }
    }
    this.scheduledTriggers = this.scheduledTriggers.filter(t => {
      return t.expires - currentLogTime > 0;
    });
    this.displayedText = this.displayedText.filter(t => {
      const remaining = t.expires - currentLogTime;
      if (remaining > 0) {
        const elem = t.element.querySelector('.popup-text-remaining');
        if (!elem) throw new not_reached/* UnreachableCode */.$();
        elem.textContent = `(${(remaining / 1000).toFixed(1)})`;
        return true;
      }
      t.element.remove();
      return false;
    });
  }
  OnLog(_e) {
    throw new not_reached/* UnreachableCode */.$();
  }
  onEmulatorLog(logs) {
    for (const l of logs) {
      const currentTime = l.timestamp;
      if (l.convertedLine.includes('00:0038:cactbot wipe')) this.SetInCombat(false);
      for (const trigger of this.triggers) {
        const r = trigger.localRegex?.exec(l.convertedLine);
        if (r) this.OnTrigger(trigger, r, currentTime);
      }
      for (const trigger of this.netTriggers) {
        const r = trigger.localNetRegex?.exec(l.networkLine);
        if (r) this.OnTrigger(trigger, r, currentTime);
      }
    }
  }
  OnNetLog(_e) {
    throw new not_reached/* UnreachableCode */.$();
  }
  bindTo(emulator) {
    this.emulator = emulator;
    emulator.on('emitLogs', event => {
      this.onEmulatorLog(event.logs);
    });
    emulator.on('tick', async currentLogTime => {
      await this.doUpdate(currentLogTime);
    });
    emulator.on('midSeek', async line => {
      await this.doUpdate(line.timestamp);
    });
    emulator.on('preSeek', seekTimestamp => {
      this.seeking = true;
      this._emulatorReset();
      if (seekTimestamp < this.emulatedOffset) this.ReloadTimelines();
    });
    emulator.on('postSeek', () => {
      // This is a hacky fix for audio still playing during seek
      window.setTimeout(() => {
        this.seeking = false;
      }, 5);
    });
    emulator.on('currentEncounterChanged', () => {
      const currentEnc = emulator.currentEncounter;
      if (!currentEnc) return;
      const enc = currentEnc.encounter;
      if (!enc.encounterZoneName || enc.encounterZoneId === undefined) return;
      this._emulatorReset();
      this.OnChangeZone({
        type: 'ChangeZone',
        zoneName: enc.encounterZoneName,
        zoneID: parseInt(enc.encounterZoneId, 16)
      });

      // Always reset when changing encounters
      this.Reset();
    });
  }
  _emulatorReset() {
    for (const i of this.scheduledTriggers) i.rejecter();
    this.scheduledTriggers = [];
    this.displayedText = this.displayedText.filter(t => {
      t.element.remove();
      return false;
    });
    this.triggerSuppress = {};
  }
  _createTextFor(triggerHelper, text, textType, _lowerTextKey, duration) {
    const textElementClass = `${textType}-text`;
    const e = this._makeTextElement(triggerHelper, text, textElementClass);
    this.addDisplayText(e, this.emulatedOffset + duration * 1000);
  }
  _onTriggerInternalDelaySeconds(triggerHelper) {
    const delay = 'delaySeconds' in triggerHelper.trigger ? triggerHelper.valueOrFunction(triggerHelper.trigger.delaySeconds) : 0;
    if (delay === undefined || delay === null || delay <= 0 || typeof delay !== 'number') return;
    let ret;

    // Disable prefer-const due to needing `ret` defined before using it in promise
    // eslint-disable-next-line prefer-const
    ret = new Promise((res, rej) => {
      this.scheduledTriggers.push({
        expires: this.emulatedOffset + delay * 1000,
        promise: ret,
        resolver: res,
        rejecter: rej
      });
    });
    return ret;
  }
  _playAudioFile(triggerHelper, url, volume) {
    if (![this.options.InfoSound, this.options.AlertSound, this.options.AlarmSound].includes(url)) {
      const div = this._makeTextElement(triggerHelper, url, 'audio-file');
      this.addDisplayText(div, this.emulatedOffset + this.audioDebugTextDuration);
    }
    if (this.seeking) return;
    super._playAudioFile(triggerHelper, url, volume);
  }
  _makeTextElement(_triggerHelper, text, className) {
    const $ret = this.$textElementTemplate.cloneNode(true);
    if (!($ret instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    $ret.classList.add(className);
    const container = $ret.querySelector('.popup-text');
    if (!(container instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    container.textContent = text;
    return $ret;
  }
  addDisplayText($e, endTimestamp) {
    const remaining = (endTimestamp - this.emulatedOffset) / 1000;
    const container = $e.querySelector('.popup-text-remaining');
    if (!(container instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    container.textContent = `(${remaining.toFixed(1)})`;
    this.$popupTextContainerWrapper.append($e);
    this.displayedText.push({
      element: $e,
      expires: endTimestamp
    });
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorWatchCombatantsOverride.ts

class RaidEmulatorWatchCombatantsOverride {
  watches = [];
  constructor(emulator, overlayHook) {
    this.emulator = emulator;
    this.overlayHook = overlayHook;
    const func = (params, callback) => {
      const promise = new Promise((res, rej) => {
        const watch = {
          lastCheck: 0,
          params: params,
          cancel: false,
          start: 0,
          func: callback,
          msg: {
            call: 'getCombatants',
            ...params
          },
          res: res,
          rej: rej
        };
        this.watches.push(watch);
      });
      return promise;
    };
    util/* default.setWatchCombatantOverride */.Z.setWatchCombatantOverride(func, this.clear.bind(this));
    this.emulator.on('tick', () => {
      const timestamp = this.emulator.currentLogTime;
      if (timestamp === undefined) return;
      this.tick(timestamp);
    });
  }
  tick(timestamp) {
    for (const watch of this.watches) {
      if (watch.cancel) continue;
      if (watch.lastCheck + (watch.params.delay ?? 1000) > timestamp) continue;
      watch.lastCheck = timestamp;
      void this.overlayHook._getCombatantsOverride(watch.msg).then(e => {
        if (watch.func(e)) {
          watch.res();
          watch.cancel = true;
        }
      });
    }
    this.watches = this.watches.filter(w => !w.cancel);
  }
  clear() {
    for (const watch of this.watches) {
      watch.rej();
      watch.cancel = true;
    }
    this.watches = [];
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/translations.ts
const translate = (lang, obj) => {
  return obj[lang] ?? obj['en'];
};
const emulatorButtons = {
  '.yesButton': {
    en: 'Yes',
    de: 'Ja',
    fr: 'Oui',
    ja: 'はい',
    cn: '是'
  },
  '.noButton': {
    en: 'No',
    de: 'Nein',
    fr: 'Non',
    ja: 'いいえ',
    cn: '否'
  },
  '.closeButton': {
    en: 'Close',
    de: 'Schließen',
    fr: 'Fermer',
    ja: '閉じる',
    cn: '关闭'
  },
  '.doneButton': {
    en: 'Done<span class="done-btn-timeout"></span>',
    de: 'Fertig<span class="done-btn-timeout"></span>',
    fr: 'Terminé<span class="done-btn-timeout"></span>',
    ja: '完了<span class="done-btn-timeout"></span>',
    cn: '完成<span class="done-btn-timeout"></span>'
  },
  '.loadNetworkLogButton': {
    en: 'Load Network Log',
    de: 'Lade Network Log',
    fr: 'Charger le Network Log',
    ja: 'ネットワークログを読み込む',
    cn: '加载网络日志'
  },
  '.exportDBButton': {
    en: 'Export DB',
    de: 'DB exportieren',
    fr: 'Exporter DB',
    ja: 'DBをエクスポート',
    cn: '导出数据库'
  },
  '.importDBButton': {
    en: 'Import DB',
    de: 'DB importieren',
    fr: 'Importer DB',
    ja: 'DBをインポート',
    cn: '导入数据库'
  },
  '.clearDBButton': {
    en: 'Clear DB',
    de: 'DB leeren',
    fr: 'Nettoyer DB',
    ja: 'DBをクリア',
    cn: '清除数据库'
  }
};
const emulatorTitle = {
  '.title': {
    en: 'Cactbot Raid Emulator',
    de: 'Cactbot Raid Emulator',
    fr: 'Cactbot Raid Emulator',
    ja: 'Cactbot・レイド・エミュレーター',
    cn: 'Cactbot Raid 模拟器'
  }
};
const emulatorImportModal = {
  '.import-progress-modal .modal-title': {
    en: 'Log File Import Progress',
    de: 'Fortschritt des Logdatei Imports',
    fr: 'Progression de l\'importation du fichier journal',
    ja: 'ログファイルのインポート進捗',
    cn: '日志文件导入进度'
  },
  '.import-progress-modal .modal-body-contents': {
    en: `<h3>Latest encounter:</h3>
    Zone: <span class="zone"></span><br />
    Encounter: <span class="encounter"></span><br />
    Start: <span class="start"></span><br />
    End: <span class="end"></span><br />
    Duration: <span class="durMins"></span>m<span class="durSecs"></span>s<br />
    Pull Duration: <span class="pullMins"></span>m<span class="pullSecs"></span>s<br />
    Started By: <span class="startedBy"></span><br />
    End Status: <span class="endStatus"></span><br />
    Line Count: <span class="lineCount"></span><br />`,
    de: `<h3>Letzter Kampf:</h3>
    Zone: <span class="zone"></span><br />
    Kampf: <span class="encounter"></span><br />
    Start: <span class="start"></span><br />
    Ende: <span class="end"></span><br />
    Dauer: <span class="durMins"></span>m<span class="durSecs"></span>s<br />
    Dauer des Versuchs: <span class="pullMins"></span>m<span class="pullSecs"></span>s<br />
    Gestartet von: <span class="startedBy"></span><br />
    Endstatus: <span class="endStatus"></span><br />
    Zeilenanzahl: <span class="lineCount"></span><br />`,
    fr: `<h3>Dernier Combat :</h3>
    Zone : <span class="zone"></span><br />
    Combatant : <span class="encounter"></span><br />
    Début : <span class="start"></span><br />
    Fin : <span class="end"></span><br />
    Durée : <span class="durMins"></span>m<span class="durSecs"></span>s<br />
    Durée du pull : <span class="pullMins"></span>m<span class="pullSecs"></span>s<br />
    Démarré par : <span class="startedBy"></span><br />
    Status de fin : <span class="endStatus"></span><br />
    Nombre de lignes : <span class="lineCount"></span><br />`,
    ja: `<h3>最新エンカウント:</h3>
    ゾーン: <span class="zone"></span><br />
    エンカウント: <span class="encounter"></span><br />
    開始: <span class="start"></span><br />
    終了: <span class="end"></span><br />
    間隔: <span class="durMins"></span>m<span class="durSecs"></span>s<br />
    プルの間隔: <span class="pullMins"></span>m<span class="pullSecs"></span>s<br />
    開始者: <span class="startedBy"></span><br />
    終了ステータス: <span class="endStatus"></span><br />
    行数: <span class="lineCount"></span><br />`,
    cn: `<h3>最新的战斗: </h3>
    区域: <span class="zone"></span><br />
    战斗: <span class="encounter"></span><br />
    开始: <span class="start"></span><br />
    结束: <span class="end"></span><br />
    持续时间: <span class="durMins"></span>m<span class="durSecs"></span>s<br />
    尝试时间: <span class="pullMins"></span>m<span class="pullSecs"></span>s<br />
    开始于: <span class="startedBy"></span><br />
    结束状态: <span class="endStatus"></span><br />
    行数: <span class="lineCount"></span><br />`
  }
};
const emulatorDeleteModal = {
  '.deleteDBModal .modal-title': {
    en: 'Delete Encounter Database',
    de: 'Lösche Kampfdatenbank',
    fr: 'Effacer la base de données du combat',
    ja: 'エンカウントDBを削除',
    cn: '删除战斗数据库'
  },
  '.deleteDBModal .modal-body': {
    en: '<p>You are about to delete the encounter database. Are you sure?</p>',
    de: '<p>Du bist kurz davor die Kampfdatenbank zu löschen. Bist du sicher?</p>',
    fr: '<p>Vous êtes sur le point de supprimer la base de données du combat. Êtes-vous sûr ?</p>',
    ja: '<p>エンカウントDBを削除します。よろしいですか？</p>',
    cn: '<p>即将删除战斗数据库。确定删除吗？</p>'
  }
};
const emulatorIntroModal = {
  '.introModal .modal-title': {
    en: 'Introduction',
    de: 'Einführung',
    fr: 'Introduction',
    ja: 'はじめに',
    cn: '简介'
  },
  '.introModal .modal-body': {
    en: `<p>Welcome to the Raid Emulator.</p>
    <p>This tool replays encounters and shows what triggers were fired when, and allows you to view the encounter from any player's perspective.</p>
    <p>This tool optionally accepts an <strong>OVERLAY_WS</strong> parameter to connect to an ACT web socket with both ngld's OverlayPlugin and the Cactbot plugin loaded.</p>
    <p>If connected to a web socket, this tool will load and respect user configuration files for cactbot/raidboss.</p>
    <p>No overlays need to be created.</p>
    <p>Current WebSocket status: <span class="d-none websocketConnected text-success">Connected</span><span class="websocketDisconnected text-warning">Disconnected</span>.</p>
    <p>To get started, you need to import an encounter via one of the following options:</p>
    <p>
      <ul>
        <li>Drag and drop a network log file from <code>%APPDATA%/Advanced Combat Tracker/FFXIVLogs/</code> on to the page</li>
        <li>Click the <code>Load Network Log</code> button in the bottom drawer and select a network log file from <code>%APPDATA%/Advanced Combat Tracker/FFXIVLogs/</code></li>
      </ul>
    </p>
    <p>Then, select an encounter via the bottom drawer.</p>
    <p>Once you have loaded an encounter, you can:</p>
    <p>
      <ul>
        <li>Change the current perspective by selecting a party member on the right</li>
        <li>Seek to any point in the encounter by clicking the bar at the top</li>
        <li>Hover over trigger indicators in the top bar to see their names</li>
        <li>See detailed information about triggers fired by clicking their button</li>
      </ul>
    </p>`,
    de: `<p>Willkommen zum Raid Emulator.</p>
    <p>Dieses Tool gibt Kämpfe wieder und zeigt, welche Trigger wann ausgeführt wurden, und ermöglicht es, die Kämpfe aus der Perspektive eines beliebigen Spielers zu betrachten.</p>
    <p>Dieses Tool akzeptiert optional einen <strong>OVERLAY_WS</strong>-Parameter, um sich mit einem ACT-Websocket zu verbinden, in dem sowohl das OverlayPlugin von ngld als auch das Cactbot-Plugin geladen sind.</p>
    <p>Wenn eine Verbindung zu einem Websocket besteht, lädt dieses Tool die Konfigurationsdateien für cactbot/raidboss und benutzt diese.</p>
    <p>Es müssen keine Overlays erstellt werden.</p>
    <p>Aktueller WebSocket-Status: <span class="d-none websocketConnected text-success">Verbunden</span><span class="websocketDisconnected text-warning">Trennt die Verbindung</span>.</p>
    <p>Um loszulegen, muss ein Kampf über eine der folgenden Optionen importiert werden:</p>
    <p>
      <ul>
        <li>Ziehe eine Network-Logdatei aus <code>%APPDATA%/Advanced Combat Tracker/FFXIVLogs/</code> auf die Seite</li>
        <li>Klicke auf die Schaltfläche <code>Lade Network Log</code> in dem unteren Bereich und wähle ein Network Log aus <code>%APPDATA%/Advanced Combat Tracker/FFXIVLogs/</code></li>
      </ul>
    </p>
    <p>Dann wähle über den unteren Bereich einen Kampf aus.</p>
    <p>Sobald ein Kampf geladen wurde, können folgende Aktionen ausgeführt werden:</p>
    <p>
      <ul>
        <li>Wechseln der aktuelle Perspektive, indem ein Gruppenmitglied auf der rechten Seite ausgewählt wird</li>
        <li>Mit einem Klick auf die Leiste am oberen Rand, um zu einem beliebigen Punkt in dem Kampf zu springen</li>
        <li>Fahre mit dem Mauszeiger über Trigger-Indikatoren in der oberen Leiste, um deren Namen zu sehen</li>
        <li>Detaillierte Informationen über aktivierten Trigger anzeigen lassen, indem auf die entsprechende Schaltfläche geklickt wird</li>
      </ul>
    </p>`,
    fr: `<p>Bienvenue dans l'émulateur de raid.</p>
    <p>Cet outil rejoue les rencontres et montre quels triggers ont été déclenchés à quel moment, et vous permet de voir la rencontre du point de vue de n'importe quel joueur.</p>
    <p>Cet outil accepte éventuellement le paramètre <strong>OVERLAY_WS</strong> pour se connecter à un Web socket ACT avec à la fois OverlayPlugin de ngld et le plugin Cactbot chargés.</p>
    <p>S'il est connecté à un Web socket, cet outil chargera et respectera les fichiers de configuration utilisateur pour cactbot/raidboss.</p>
    <p>Aucun overlay n'a besoin d'être créée.</p>
    <p>État actuel de WebSocket : <span class="d-none websocketConnected text-success">Connecté</span><span class="websocketDisconnected text-warning">Déconnecté</span>.</p>
    <p>Pour commencer, vous devez importer une rencontre via l'une des options suivantes :</p>
    <p>
      <ul>
        <li>Faites glisser et déposez un fichier log depuis <code>%APPDATA%/Advanced Combat Tracker/FFXIVLogs/</code> sur la page</li>
        <li>Cliquez sur le bouton <code>Charger Network Log</code> dans le tiroir du bas et sélectionnez un fichier log dans <code>%APPDATA%/Advanced Combat Tracker/FFXIVLogs/</code></li>
      </ul>
    </p>
    <p>Ensuite, sélectionnez une rencontre via le tiroir du bas.</p>
    <p>Une fois que vous avez chargé une rencontre, vous pouvez :</p>
    <p>
      <ul>
        <li>Modifiez la perspective actuelle en sélectionnant un membre du groupe sur la droite</li>
        <li>Recherchez n'importe quel point de la rencontre en cliquant sur la barre en haut</li>
        <li>Passez la souris sur les indicateurs des triggers dans la barre supérieure pour voir leurs noms</li>
        <li>Voir des informations détaillées sur les triggers déclenchés en cliquant sur leur bouton</li>
      </ul>
    </p>`,
    ja: `<p>レイド・エミュレーターへようこそ。</p>
    <p>このツールはバトルを再生し、トリガーが何時に発動されたかを表示し、任意プレイヤーの視点からバトルを再生することができます。</p>
    <p>このツールは <strong>OVERLAY_WS</strong> というオプションを受け入れることができます。これにより、ngld様のOverlayPluginとcactbotのプラグインを搭載したACTのWebSocketに接続することができます。</p>
    <p>WebSocketに接続されている場合、このツールはcactbot/raidbossの設定ファイルを読み込み、それらを使用します。</p>
    <p>オーバーレイは作成する必要はありません。</p>
    <p>現在のWebSocketの状態: <span class="d-none websocketConnected text-success">接続済</span><span class="websocketDisconnected text-warning">切断中</span>。</p>
    <p>まず、以下のいずれかの方法でバトルをインポートしてください:</p>
    <p>
      <ul>
        <li><code>%APPDATA%/Advanced Combat Tracker/FFXIVLogs/</code>からネットワークログをドラッグ＆ドロップして、ページにドロップしてください</li>
        <li>下の<code>ネットワークログを読み込む</code>ボタンをクリックして、<code>%APPDATA%/Advanced Combat Tracker/FFXIVLogs/</code>にあるネットワークログを選択してください</li>
      </ul>
    </p>
    <p>次に、バトルを選択してください。</p>
    <p>バトルを選択したら、以下のように行動できます:</p>
    <p>
      <ul>
        <li>バトル内の視点を変更するには、右側のパーティーメンバー名を選択します</li>
        <li>上部バーのトリガーインジケーターをクリックするとトリガー名を確認できます</li>
        <li>トリガーをマウスオーバーして、トリガー名を確認できます</li>
        <li>トリガーが有効になっている場合、トリガーの詳細情報を表示するにはトリガーをクリックします</li>
      </ul>
    </p>`,
    cn: `<p>欢迎来到Raid模拟器。</p>
    <p>此工具可以回放战斗，显示各个触发器的触发时机，你还可以从任意小队成员的角度查看战斗。</p>
    <p>你可以向此工具传送<strong>OVERLAY_WS</strong>参数，以连接到同时加载了ngld的OverlayPlugin和Cactbot插件的ACT Websocket接口。</p>
    <p>若连接成功，此工具将加载并遵循cactbot/raidboss的用户配置文件。</p>
    <p>你不需要创建悬浮窗。</p>
    <p>当前WebSocket连接状态: <span class="d-none websocketConnected text-success">已连接</span><span class="websocketDisconnected text-warning">已断开</span>.</p>
    <p>首先，你需要通过以下方法之一导入一场战斗: </p>
    <p>
      <ul>
        <li>从<code>%APPDATA%/Advanced Combat Tracker/FFXIVLogs/</code>中选取一个网络日志文件拖放到页面上。</li>
        <li>点击下方的<code>加载网络日志</code>按钮，从<code>%APPDATA%/Advanced Combat Tracker/FFXIVLogs/</code>中选取一个网络日志文件。</li>
      </ul>
    </p>
    <p>然后，在窗口底部选择一场战斗。</p>
    <p>一旦你加载了一场战斗，你可以: </p>
    <p>
      <ul>
        <li>通过在右边选择一名队员来改变当前视角</li>
        <li>通过点击顶部的条状图来寻找战斗中的任何一个时间点</li>
        <li>悬停在顶栏的触发器指示器上，可以看到它们的名称</li>
        <li>点击触发器的按钮，可以看到关于它们的详细信息</li>
      </ul>
    </p>`
  }
};
const emulatorDisconnectedModal = {
  '.disconnectedModal .modal-title': {
    en: 'Currently Disconnected',
    de: 'Momentan nicht vebunden',
    fr: 'Actuellement déconnecté',
    ja: '切断されています',
    cn: '已断开连接'
  },
  '.disconnectedModal .modal-body': {
    en: `<p>Raid Emulator is currently disconnected from ACT.</p>
    <p>Raid Emulator will use the default settings for raidboss. These are:</p>
    <ul>
      <li>Display language: <span class="discLangDisplay"></span></li>
      <li>Default alert output: Text and Sound</li>
      <li>Alerts language: <span class="discLangAlerts"></span></li>
      <li>Timeline language: <span class="discLangTimeline"></span></li>
    </ul>`,
    de: `<p>Raid Emulator ist momentan nicht mit ACT verbunden.</p>
    <p>Raid Emulator wird die Standardeinstellungen für Raidboss benutzen. Diese snd:</p>
    <ul>
      <li>Anzeigesprache: <span class="discLangDisplay"></span></li>
      <li>Standard Alarm Ausgabe: Text und Ton</li>
      <li>Alarmsprache: <span class="discLangAlerts"></span></li>
      <li>Timeline Sprache: <span class="discLangTimeline"></span></li>
    </ul>`,
    fr: `<p>Raid Emulator est actuellement déconnecté d'ACT.</p>
    <p>Raid Emulator utilise les paramètres par défaut pour raidboss :</p>
    <ul>
      <li>Langue d'affichage : <span class="discLangDisplay"></span></li>
      <li>Alerte par défaut : Texte et Son</li>
      <li>Langue des alertes : <span class="discLangAlerts"></span></li>
      <li>Langue des timelines : <span class="discLangTimeline"></span></li>
    </ul>`,
    ja: `<p>現在、レイド・エミュレーターはACTとの接続が切断されています。</p>
    <p>レイド・エミュレーターはraidbossモジュールの既定値を使用します。これらは次のとおりです:</p>
    <ul>
      <li>表示言語: <span class="discLangDisplay"></span></li>
      <li>警告情報出力既定値: テキストと音</li>
      <li>警告情報言語: <span class="discLangAlerts"></span></li>
      <li>タイムライン言語: <span class="discLangTimeline"></span></li>
    </ul>`,
    cn: `<p>Raid模拟器目前与ACT断开了连接。</p>
    <p>Raid模拟器将使用raidboss的默认设置。这些设置是:</p>
    <ul>
      <li>显示语言: <span class="discLangDisplay"></span></li>
      <li>默认警报提示信息输出方式: 文字显示与提示音</li>
      <li>警报提示文字的语言: <span class="discLangAlerts"></span></li>
      <li>时间轴文本的语言: <span class="discLangTimeline"></span></li>
    </ul>`
  }
};
const emulatorLabels = {
  ' label[for=hideSkipped]': {
    en: 'Hide Skipped',
    de: 'Verstecke Übersprungene Einträge',
    fr: 'Masquer les entrées sautées',
    ja: 'スキップした項目を隠す',
    cn: '隐藏已跳过项目'
  },
  ' label[for=hideCollector]': {
    en: 'Hide Collectors',
    de: 'Verstecke "Sammel" Einträge',
    fr: 'Masquer les entrées collectées',
    ja: '無出力トリガーを隠す',
    cn: '隐藏收集器'
  }
};
const emulatorTooltips = {
  '.triggerHideSkipped': {
    en: 'Hide triggers that were not executed',
    de: 'Verstecke Trigger, die nicht ausgeführt wurden',
    fr: 'Masquer les triggers non-executés',
    ja: '実行されなかったトリガーを隠す',
    cn: '隐藏未执行的触发器'
  },
  '.triggerHideCollector': {
    en: 'Hide triggers that had no output',
    de: 'Verstecke Trigger, die keine Ausgabe hatten',
    fr: 'Masquer les triggers sans sortie',
    ja: '出力がないトリガーを隠す',
    cn: '隐藏没有输出的触发器'
  },
  '.connectedIndicator': {
    en: 'Connected to websocket',
    de: 'Mit Websocket verbunden',
    fr: 'Connecté au Websocket',
    ja: 'WebSocketに接続済み',
    cn: '连接到websocket'
  },
  '.disconnectedIndicator': {
    en: 'Disconnected from websocket',
    de: 'Keine Verbindung zum Websocket',
    fr: 'Déconnecté du Websocket',
    ja: 'WebSocketに接続していません',
    cn: '与websocket断开连接'
  }
};
const emulatorEncounterInfo = {
  '.encounterLoad': {
    en: 'Load Encounter',
    de: 'Lade Kampf',
    fr: 'Charger combat',
    ja: 'エンカウントを読み込む',
    cn: '加载战斗'
  },
  '.encounterParse': {
    en: 'Reparse Encounter',
    de: 'Kampf erneut analysieren',
    fr: 'Reparser le combat',
    ja: 'エンカウントを再解析',
    cn: '重新解析战斗'
  },
  '.encounterPrune': {
    en: 'Prune Encounter',
    de: 'Kampf leeren',
    fr: 'Combat vide',
    ja: 'エンカウントをカット',
    cn: '裁剪战斗'
  },
  '.encounterDelete': {
    en: 'Delete Encounter',
    de: 'Kampf löschen',
    fr: 'Effacer combat',
    ja: 'エンカウントを削除',
    cn: '删除战斗'
  },
  '.encounterZone': {
    en: 'Zone: <span class="label"></span>',
    de: 'Zone: <span class="label"></span>',
    fr: 'Zone : <span class="label"></span>',
    ja: 'ゾーン: <span class="label"></span>',
    cn: '区域: <span class="label"></span>'
  },
  '.encounterStart': {
    en: 'Start: <span class="label"></span>',
    de: 'Start: <span class="label"></span>',
    fr: 'Début : <span class="label"></span>',
    ja: '開始: <span class="label"></span>',
    cn: '开始: <span class="label"></span>'
  },
  '.encounterDuration': {
    en: 'Duration: <span class="label"></span>',
    de: 'Dauer: <span class="label"></span>',
    fr: 'Durée : <span class="label"></span>',
    ja: '持続時間: <span class="label"></span>',
    cn: '持续时间: <span class="label"></span>'
  },
  '.encounterName': {
    en: 'Name: <span class="label"></span>',
    de: 'Name: <span class="label"></span>',
    fr: 'Nom : <span class="label"></span>',
    ja: '名前: <span class="label"></span>',
    cn: '名称: <span class="label"></span>'
  },
  '.encounterStartStatus': {
    en: 'Start Status: <span class="label"></span>',
    de: 'Start Status: <span class="label"></span>',
    fr: 'État du démarrage : <span class="label"></span>',
    ja: '開始状態: <span class="label"></span>',
    cn: '开始状态: <span class="label"></span>'
  },
  '.encounterEndStatus': {
    en: 'End Status: <span class="label"></span>',
    de: 'Endstatus: <span class="label"></span>',
    fr: 'État de fin : <span class="label"></span>',
    ja: '終了状態: <span class="label"></span>',
    cn: '结束状态: <span class="label"></span>'
  }
};

// These elements get their innerHTML set to the translated value
const emulatorTranslations = {
  ...emulatorButtons,
  ...emulatorTitle,
  ...emulatorImportModal,
  ...emulatorDeleteModal,
  ...emulatorIntroModal,
  ...emulatorDisconnectedModal,
  ...emulatorLabels
};

// These elements get their title set to the translated value
const emulatorTooltipTranslations = {
  ...emulatorTooltips
};

// Template elements need special handling, any templates that have translatable elements
// should be listed here
const emulatorTemplateTranslations = {
  'template.encounter-info': emulatorEncounterInfo
};
const emulatorStartStatuses = {
  unknown: {
    en: 'Unknown',
    de: 'Unbekannt',
    fr: 'Inconnu',
    ja: '不明',
    cn: '未知'
  },
  countdown: {
    en: 'Countdown',
    de: 'Countdown',
    fr: 'Compte à rebours',
    ja: 'カウントダウン',
    cn: '倒计时'
  },
  seal: {
    en: 'Seal',
    de: 'Versiegeln',
    fr: 'Fermeture',
    ja: '封鎖',
    cn: '封锁'
  },
  engage: {
    en: 'Engage',
    de: 'Start',
    fr: 'À l\'attaque',
    ja: '戦闘開始',
    cn: '战斗中'
  }
};
const emulatorEndStatuses = {
  unknown: {
    en: 'Unknown',
    de: 'Unbekannt',
    fr: 'Inconnu',
    ja: '不明',
    cn: '未知'
  },
  win: {
    en: 'Win',
    de: 'Gewonnen',
    fr: 'Gagné',
    ja: '勝利',
    cn: '胜利'
  },
  wipe: {
    en: 'Wipe',
    de: 'Wipe',
    fr: 'Wipe',
    ja: 'ワイプ',
    cn: '团灭'
  },
  cactbotWipe: {
    en: 'Cactbot Wipe',
    de: 'Cactbot Wipe',
    fr: 'Cactbot Wipe',
    ja: 'Cactbotによるワイプ',
    cn: 'Cactbot团灭'
  },
  unseal: {
    en: 'Unseal',
    de: 'Entsiegeln',
    fr: 'Ouverture',
    ja: '解除',
    cn: '解封'
  }
};

// @TODO: Change encounter to store keys for statuses instead of english values as a
// comma-separated string.
const lookupStartStatuses = (lang, statusesStr) => {
  const engStatuses = statusesStr.split(', ');
  const transStatuses = [];
  for (const status of engStatuses) {
    for (const map of Object.values(emulatorStartStatuses)) {
      if (map.en === status) {
        transStatuses.push(translate(lang, map));
        break;
      }
    }
  }
  return transStatuses.join(', ');
};
const lookupEndStatus = (lang, status) => {
  for (const map of Object.values(emulatorEndStatuses)) {
    if (map.en === status) return translate(lang, map);
  }
  return status;
};
;// CONCATENATED MODULE: ./ui/raidboss/emulator/ui/Tooltip.ts

const hideEvents = ['mouseleave', 'blur'];
const validDirections = (/* unused pure expression or super */ null && (['top', 'right', 'bottom', 'left']));
const showEvents = ['mouseenter', 'focus'];
const toPx = px => `${px}px`;
class Tooltip {
  offset = {
    x: 0,
    y: 0
  };
  static templates = {
    top: Tooltip.getTemplate('top'),
    right: Tooltip.getTemplate('right'),
    bottom: Tooltip.getTemplate('bottom'),
    left: Tooltip.getTemplate('left')
  };
  constructor(target, direction, text, autoShow = true, autoHide = true) {
    this.target = target;
    this.direction = direction;
    if (!(target instanceof HTMLElement)) {
      const msg = 'Invalid element passed to Tooltip';
      console.error(msg);
      throw new Error(msg);
    }
    this.tooltip = Tooltip.cloneTemplate(direction);
    const innerElem = this.tooltip.querySelector('.tooltip-inner');
    if (!(innerElem instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    this.inner = innerElem;
    const arrowElem = this.tooltip.querySelector('.arrow');
    if (!(arrowElem instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    this.arrow = arrowElem;
    this.setText(text);
    document.body.append(this.tooltip);
    if (autoShow) {
      showEvents.forEach(e => {
        this.target.addEventListener(e, () => {
          this.show();
        });
      });
    }
    if (autoHide) {
      hideEvents.forEach(e => {
        this.target.addEventListener(e, () => {
          this.hide();
        });
      });
    }
  }
  setText(text) {
    this.inner.textContent = text;
  }
  show() {
    const targetRect = this.target.getBoundingClientRect();
    const targetMiddle = {
      x: targetRect.x + targetRect.width / 2,
      y: targetRect.y + targetRect.height / 2
    };
    const tooltipRect = this.tooltip.getBoundingClientRect();
    // Middle of tooltip - half of arrow height
    const lrArrowHeight = tooltipRect.height / 2 - this.arrow.getBoundingClientRect().height / 2;
    switch (this.direction) {
      case 'top':
        this.tooltip.style.left = toPx(targetMiddle.x - tooltipRect.width / 2 + this.offset.x);
        this.tooltip.style.bottom = toPx(targetRect.y - tooltipRect.height + this.offset.y);
        break;
      case 'right':
        this.tooltip.style.left = toPx(targetRect.right + this.offset.x);
        this.tooltip.style.top = toPx(targetMiddle.y - tooltipRect.height / 2 + this.offset.y);
        this.arrow.style.top = toPx(lrArrowHeight);
        break;
      case 'bottom':
        this.tooltip.style.left = toPx(targetMiddle.x - tooltipRect.width / 2 + this.offset.x);
        this.tooltip.style.top = toPx(targetRect.bottom + this.offset.y);
        break;
      case 'left':
        this.tooltip.style.left = toPx(targetRect.left - tooltipRect.width + this.offset.x);
        this.tooltip.style.top = toPx(targetMiddle.y - tooltipRect.height / 2 + this.offset.y);
        this.arrow.style.top = toPx(lrArrowHeight);
        break;
    }
    this.tooltip.classList.add('show');
    this.tooltip.setAttribute('data-show', '');
  }
  hide() {
    this.tooltip.classList.remove('show');
    this.tooltip.removeAttribute('data-show');
  }
  delete() {
    this.tooltip.remove();
  }
  static getTemplate(dir) {
    const elemName = `${dir}TooltipTemplate`;
    const ret = document.getElementById(elemName);
    if (ret instanceof HTMLElement) return ret;
    throw new not_reached/* UnreachableCode */.$();
  }
  static cloneTemplate(direction) {
    const template = Tooltip.templates[direction];
    const node = template.content.querySelector('.tooltip')?.cloneNode(true);
    if (node instanceof HTMLElement) return node;
    throw new not_reached/* UnreachableCode */.$();
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/ui/EmulatedPartyInfo.ts







const jobOrder = ['PLD', 'WAR', 'DRK', 'GNB', 'WHM', 'SCH', 'AST', 'SGE', 'MNK', 'DRG', 'NIN', 'SAM', 'RPR', 'BRD', 'MCH', 'DNC', 'BLM', 'SMN', 'RDM', 'BLU'];
const isJobOrder = job => {
  return jobOrder.includes(job);
};
class EmulatedPartyInfo extends EventBus {
  tooltips = [];
  triggerBars = [];
  displayedParty = {};
  constructor(emulator) {
    super();
    this.emulator = emulator;
    this.$partyInfo = querySelectorSafe(document, '.party-info-column .party');
    this.$triggerInfo = querySelectorSafe(document, '.trigger-info-column');
    const skipped = querySelectorSafe(document, '.triggerHideSkipped');
    if (!(skipped instanceof HTMLInputElement)) throw new not_reached/* UnreachableCode */.$();
    this.$triggerHideSkippedCheckbox = skipped;
    const collector = querySelectorSafe(document, '.triggerHideCollector');
    if (!(collector instanceof HTMLInputElement)) throw new not_reached/* UnreachableCode */.$();
    this.$triggerHideCollectCheckbox = collector;
    this.$triggerBar = querySelectorSafe(document, '.player-triggers');
    this.latestDisplayedState = 0;
    for (let i = 0; i < 8; ++i) this.triggerBars[i] = querySelectorSafe(this.$triggerBar, `.player${i.toString()}`);
    emulator.on('tick', (_currentLogTime, lastLogLineTime) => {
      if (lastLogLineTime) {
        this.updatePartyInfo(emulator, lastLogLineTime);
        this.latestDisplayedState = Math.max(this.latestDisplayedState, lastLogLineTime);
      }
    });
    emulator.on('currentEncounterChanged', encounter => {
      this.resetPartyInfo(encounter);
    });
    emulator.on('preSeek', () => {
      this.latestDisplayedState = 0;
    });
    emulator.on('postSeek', time => {
      this.updatePartyInfo(emulator, time);
      this.latestDisplayedState = Math.max(this.latestDisplayedState, time);
    });
    this.updateTriggerState = () => {
      if (this.$triggerHideSkippedCheckbox.checked) this.hideNonExecutedTriggers();else this.showNonExecutedTriggers();
      if (this.$triggerHideCollectCheckbox.checked) this.hideCollectorTriggers();else this.showCollectorTriggers();
    };
    this.$triggerHideSkippedCheckbox.addEventListener('change', this.updateTriggerState);
    this.$triggerHideCollectCheckbox.addEventListener('change', this.updateTriggerState);
    this.$triggerItemTemplate = getTemplateChild(document, 'template.trigger-item');
    this.$playerInfoRowTemplate = getTemplateChild(document, 'template.player-info-row');
    this.$playerTriggerInfoTemplate = getTemplateChild(document, 'template.playerTriggerInfo');
    this.$jsonViewerTemplate = getTemplateChild(document, 'template.jsonViewer');
    this.$wrapCollapseTemplate = getTemplateChild(document, 'template.wrapCollapse');
  }
  hideNonExecutedTriggers() {
    this.$triggerInfo.querySelectorAll('.trigger-not-executed').forEach(n => {
      n.classList.add('d-none');
    });
  }
  showNonExecutedTriggers() {
    this.$triggerInfo.querySelectorAll('.trigger-not-executed').forEach(n => {
      n.classList.remove('d-none');
    });
  }
  hideCollectorTriggers() {
    this.$triggerInfo.querySelectorAll('.trigger-no-output').forEach(n => {
      n.classList.add('d-none');
    });
  }
  showCollectorTriggers() {
    this.$triggerInfo.querySelectorAll('.trigger-no-output').forEach(n => {
      n.classList.remove('d-none');
    });
  }
  updatePartyInfo(emulator, timestamp) {
    const enc = emulator.currentEncounter;
    if (!enc) throw new not_reached/* UnreachableCode */.$();
    for (const id in this.displayedParty) this.updateCombatantInfo(enc, id, timestamp);
  }
  resetPartyInfo(encounter) {
    const enc = encounter.encounter;
    const tracker = enc.combatantTracker;
    if (!tracker) throw new not_reached/* UnreachableCode */.$();
    this.tooltips.map(tt => {
      tt.delete();
      return null;
    });
    this.tooltips = [];
    this.currentPerspective = undefined;
    this.displayedParty = {};
    this.latestDisplayedState = 0;
    this.$partyInfo.innerHTML = '';
    this.$triggerBar.querySelectorAll('.trigger-item').forEach(n => {
      n.remove();
    });
    const membersToDisplay = tracker.partyMembers.sort((l, r) => {
      const a = enc.combatantTracker?.combatants[l];
      const b = enc.combatantTracker?.combatants[r];
      if (!a || !b) return 0;
      const aJob = util/* default.jobEnumToJob */.Z.jobEnumToJob(a.nextState(0).Job ?? 0);
      const bJob = util/* default.jobEnumToJob */.Z.jobEnumToJob(b.nextState(0).Job ?? 0);
      if (!isJobOrder(aJob) || !isJobOrder(bJob)) return 0;
      return EmulatedPartyInfo.jobOrder.indexOf(aJob) - EmulatedPartyInfo.jobOrder.indexOf(bJob);
    }).slice(0, 8);
    document.querySelectorAll('.playerTriggerInfo').forEach(n => {
      n.remove();
    });
    for (const [i, id] of membersToDisplay.entries()) {
      const obj = this.getPartyInfoObjectFor(encounter, id);
      const bar = this.triggerBars[i];
      const combatant = tracker.combatants[id];
      const perspective = encounter.perspectives[id];
      if (!bar || !combatant || !perspective) throw new not_reached/* UnreachableCode */.$();
      const firstState = combatant.nextState(0);
      this.displayedParty[id] = obj;
      this.$partyInfo.append(obj.$rootElem);
      this.$triggerInfo.append(obj.$triggerElem);
      bar.classList.remove('tank');
      bar.classList.remove('healer');
      bar.classList.remove('dps');
      if (firstState.Job) {
        bar.classList.add(util/* default.jobToRole */.Z.jobToRole(util/* default.jobEnumToJob */.Z.jobEnumToJob(firstState.Job)));
      }
      const trimmedDuration = encounter.encounter.duration - encounter.encounter.initialOffset;
      for (const trigger of perspective.triggers) {
        if (!trigger.status.executed || trigger.resolvedOffset > encounter.encounter.duration || trigger.resolvedOffset < encounter.encounter.initialOffset) continue;
        const $e = cloneSafe(this.$triggerItemTemplate);
        const adjustedOffset = trigger.resolvedOffset - encounter.encounter.initialOffset;
        $e.style.left = `${(adjustedOffset / trimmedDuration * 100).toString()}%`;
        const triggerId = trigger.triggerHelper.trigger.id ?? 'Unknown Trigger';
        this.tooltips.push(new Tooltip($e, 'bottom', triggerId));
        bar.append($e);
      }
    }
    this.updateTriggerState();
    const toDisplay = membersToDisplay[0];
    if (toDisplay === undefined) throw new not_reached/* UnreachableCode */.$();
    this.selectPerspective(toDisplay);
  }
  selectPerspective(id) {
    if (id === this.currentPerspective) return;
    const combatant = this.emulator.currentEncounter?.encounter.combatantTracker?.combatants[id];
    if (!combatant?.nextState(0).Job) return;
    const display = this.displayedParty[id];
    if (!display) throw new not_reached/* UnreachableCode */.$();
    this.currentPerspective = id;
    this.$triggerInfo.querySelectorAll('.playerTriggerInfo').forEach(r => r.classList.add('d-none'));
    display.$triggerElem.classList.remove('d-none');
    this.$partyInfo.querySelectorAll('.player-info-row').forEach(r => {
      r.classList.remove('border');
      r.classList.remove('border-success');
    });
    display.$rootElem.classList.add('border');
    display.$rootElem.classList.add('border-success');
    void this.dispatch('selectPerspective', id);
  }
  updateCombatantInfo(encounter, id, stateID) {
    if (!stateID || stateID <= this.latestDisplayedState) return;
    const combatant = encounter.encounter.combatantTracker?.combatants[id];
    if (!combatant) throw new not_reached/* UnreachableCode */.$();
    const state = combatant.getState(stateID);
    if (state === undefined) throw new not_reached/* UnreachableCode */.$();
    const display = this.displayedParty[id];
    if (!display) throw new not_reached/* UnreachableCode */.$();
    const hpProg = state.CurrentHP / state.MaxHP * 100;
    let hpLabel = `${state.CurrentHP}/${state.MaxHP}`;
    hpLabel = stringhandlers.leftExtendStr(hpLabel, state.MaxHP.toString().length * 2 + 1, ' ');
    display.$hpProgElem.style.width = `${hpProg}%`;
    display.$hpLabelElem.textContent = hpLabel;
    const mpProg = state.CurrentMP / state.MaxMP * 100;
    let mpLabel = `${state.CurrentMP}/${state.MaxMP}`;
    mpLabel = stringhandlers.leftExtendStr(mpLabel, state.MaxMP.toString().length * 2 + 1, ' ');
    display.$mpProgElem.style.width = `${mpProg}%`;
    display.$mpLabelElem.textContent = mpLabel;
  }
  getPartyInfoObjectFor(encounter, id) {
    const $e = cloneSafe(this.$playerInfoRowTemplate);
    const $hp = querySelectorSafe($e, '.hp');
    const $mp = querySelectorSafe($e, '.mp');
    const $name = querySelectorSafe($e, '.player-name');
    const ret = {
      $rootElem: $e,
      $iconElem: querySelectorSafe($e, '.jobicon'),
      $hpElem: $hp,
      $hpLabelElem: querySelectorSafe($hp, '.label'),
      $hpProgElem: querySelectorSafe($hp, '.progress-bar'),
      $mpElem: $mp,
      $mpLabelElem: querySelectorSafe($mp, '.label'),
      $mpProgElem: querySelectorSafe($mp, '.progress-bar'),
      $nameElem: $name,
      id: id,
      $triggerElem: this.getTriggerInfoObjectFor(encounter, id)
    };
    const combatant = encounter.encounter.combatantTracker?.combatants[id];
    if (!combatant) throw new not_reached/* UnreachableCode */.$();
    const firstState = combatant.nextState(0);
    ret.$rootElem.classList.add((util/* default.jobEnumToJob */.Z.jobEnumToJob(firstState.Job ?? 0) || '').toLowerCase());
    this.tooltips.push(new Tooltip(ret.$rootElem, 'left', firstState.Name ?? ''));
    $name.innerHTML = firstState.Name ?? '';
    ret.$rootElem.addEventListener('click', () => {
      this.selectPerspective(id);
    });
    ret.$triggerElem.setAttribute('data-id', id);
    return ret;
  }
  getTriggerInfoObjectFor(encounter, id) {
    const $ret = cloneSafe(this.$playerTriggerInfoTemplate);
    const $container = querySelectorSafe($ret, '.d-flex.flex-column');
    const per = encounter.perspectives[id];
    if (!per) throw new not_reached/* UnreachableCode */.$();
    const $initDataViewer = cloneSafe(this.$jsonViewerTemplate);
    $initDataViewer.textContent = JSON.stringify(per.initialData, null, 2);
    $container.append(this._wrapCollapse({
      time: '00:00',
      name: 'Initial Data',
      classes: ['data'],
      $obj: $initDataViewer
    }));
    const $triggerContainer = querySelectorSafe($container, '.d-flex.flex-column');
    for (const trigger of per.triggers.sort((l, r) => l.resolvedOffset - r.resolvedOffset)) {
      const $triggerDataViewer = cloneSafe(this.$jsonViewerTemplate);
      $triggerDataViewer.textContent = JSON.stringify(trigger, null, 2);
      const triggerText = trigger.status.responseLabel;
      const type = trigger.status.responseType;
      const $trigger = this._wrapCollapse({
        time: this.getTriggerResolvedLabelTime(trigger),
        name: trigger.triggerHelper.trigger.id,
        icon: this.getTriggerLabelIcon(trigger),
        text: triggerText,
        classes: type !== undefined ? [type] : [],
        $obj: $triggerDataViewer
      });
      if (trigger.status.executed) $trigger.classList.add('trigger-executed');else $trigger.classList.add('trigger-not-executed');
      if (triggerText === undefined) $trigger.classList.add('trigger-no-output');else $trigger.classList.add('trigger-output');
      $triggerContainer.append($trigger);
    }
    $container.append($triggerContainer);
    const $finalDataViewer = cloneSafe(this.$jsonViewerTemplate);
    $finalDataViewer.textContent = JSON.stringify(per.finalData, null, 2);
    $container.append(this._wrapCollapse({
      time: DateTimeFuncs.timeToString(encounter.encounter.duration - encounter.encounter.initialOffset, false),
      name: 'Final Data',
      classes: ['data'],
      $obj: $finalDataViewer
    }));
    return $ret;
  }
  getTriggerLabelIcon(trigger) {
    const type = trigger.status.responseType;
    switch (type) {
      case 'info':
        return 'info';
      case 'alert':
        return 'bell';
      case 'alarm':
        return 'exclamation';
      case 'tts':
        return 'bullhorn';
      case 'audiofile':
        return 'volume-up';
    }
    return undefined;
  }
  getTriggerFiredLabelTime(trigger) {
    return DateTimeFuncs.timeToString(trigger.logLine.offset - (this.emulator.currentEncounter?.encounter.initialOffset ?? 0), false);
  }
  getTriggerResolvedLabelTime(trigger) {
    return DateTimeFuncs.timeToString(trigger.resolvedOffset - (this.emulator.currentEncounter?.encounter.initialOffset ?? 0), false);
  }
  _wrapCollapse(params) {
    const $ret = cloneSafe(this.$wrapCollapseTemplate);
    const $button = querySelectorSafe($ret, '.btn');
    const $time = querySelectorSafe($ret, '.trigger-label-time');
    const $name = querySelectorSafe($ret, '.trigger-label-name');
    const $icon = querySelectorSafe($ret, '.trigger-label-icon');
    const $text = querySelectorSafe($ret, '.trigger-label-text');
    if (params.name === undefined) $name.parentNode?.removeChild($name);else $name.textContent = params.name;
    if (params.time === undefined) $time.parentNode?.removeChild($time);else $time.textContent = params.time;
    if (params.text === undefined) $text.parentNode?.removeChild($text);else $text.textContent = params.text;
    if (params.icon === undefined) $icon.parentNode?.removeChild($icon);else $icon.innerHTML = `<i class="fa fa-${params.icon}" aria-hidden="true"></i>`;
    if (Array.isArray(params.classes)) params.classes.forEach(c => $button.classList.add(`triggertype-${c}`));
    const $wrapper = querySelectorSafe($ret, '.wrap-collapse-wrapper');
    $button.addEventListener('click', () => {
      if ($wrapper.classList.contains('d-none')) $wrapper.classList.remove('d-none');else $wrapper.classList.add('d-none');
      typeof params.onclick === 'function' && params.onclick();
    });
    $wrapper.append(params.$obj);
    return $ret;
  }
  static jobOrder = jobOrder;
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/ui/EncounterTab.ts




class EncounterTab extends EventBus {
  encounters = {};
  constructor(persistor) {
    super();
    this.persistor = persistor;
    this.$zoneColumn = querySelectorSafe(document, '#encounters-tab .zoneList');
    this.$dateColumn = querySelectorSafe(document, '#encounters-tab .dateList');
    this.$encounterColumn = querySelectorSafe(document, '#encounters-tab .encounterList');
    this.$infoColumn = querySelectorSafe(document, '#encounters-tab .encounter-info');
    this.$encounterTabRowTemplate = getTemplateChild(document, 'template.encounterTabRow');
    this.$encounterTabEncounterRowTemplate = getTemplateChild(document, 'template.encounterTabEncounterRow');
    this.$encounterInfoTemplate = getTemplateChild(document, 'template.encounter-info');
  }
  refresh() {
    this.encounters = {};
    void this.persistor.encounterSummaries.toArray().then(encounters => {
      for (const enc of encounters) {
        const zone = enc.zoneName;
        // ?? operator here to account for old encounters that don't have the property
        const encDate = DateTimeFuncs.timeStringToDateString(enc.start, enc.tzOffsetMillis ?? 0);
        const encTime = DateTimeFuncs.timeToTimeString(enc.start + enc.offset, enc.tzOffsetMillis ?? 0);
        const encDuration = DateTimeFuncs.msToDuration(enc.duration - enc.offset);
        const zoneObj = this.encounters[zone] = this.encounters[zone] || {};
        const dateObj = zoneObj[encDate] = zoneObj[encDate] || [];
        dateObj.push({
          start: encTime,
          name: enc.name,
          duration: encDuration,
          encounter: enc
        });
      }
      this.refreshUI();
    });
  }
  refreshUI() {
    this.refreshZones();
    this.refreshDates();
    this.refreshEncounters();
    this.refreshInfo();
  }
  refreshZones() {
    this.$zoneColumn.innerHTML = '';
    let clear = true;
    const zones = new Set(Object.keys(this.encounters));
    for (const zone of [...zones].sort()) {
      const $row = this.$encounterTabRowTemplate.cloneNode(true);
      if (!($row instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
      $row.innerText = zone;
      if (zone === this.currentZone) {
        clear = false;
        $row.classList.add('selected');
      }
      $row.addEventListener('click', ev => {
        const t = ev.currentTarget;
        if (!(t instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
        const parent = t.parentElement;
        if (!parent) throw new not_reached/* UnreachableCode */.$();
        querySelectorAllSafe(parent, '.selector-row.selected').forEach(n => {
          n.classList.remove('selected');
        });
        t.classList.add('selected');
        this.currentZone = t.textContent ?? undefined;
        this.refreshUI();
      });
      this.$zoneColumn.append($row);
    }
    if (clear) this.currentZone = undefined;
  }
  refreshDates() {
    this.$dateColumn.innerHTML = '';
    let clear = true;
    if (this.currentZone !== undefined) {
      const zoneMap = this.encounters[this.currentZone];
      if (!zoneMap) return;
      const dates = new Set(Object.keys(zoneMap));
      for (const date of [...dates].sort()) {
        const $row = this.$encounterTabRowTemplate.cloneNode(true);
        if (!($row instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
        $row.innerText = date;
        if (date === this.currentDate) {
          clear = false;
          $row.classList.add('selected');
        }
        $row.addEventListener('click', ev => {
          const t = ev.currentTarget;
          if (!(t instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
          const parent = t.parentElement;
          if (!parent) throw new not_reached/* UnreachableCode */.$();
          querySelectorAllSafe(parent, '.selector-row.selected').forEach(n => {
            n.classList.remove('selected');
          });
          t.classList.add('selected');
          this.currentDate = t.textContent ?? undefined;
          this.refreshUI();
        });
        this.$dateColumn.append($row);
      }
    }
    if (clear) this.currentDate = undefined;
  }
  refreshEncounters() {
    this.$encounterColumn.innerHTML = '';
    let clear = true;
    if (this.currentZone === undefined || this.currentDate === undefined) return;
    const zoneMap = this.encounters[this.currentZone];
    if (!zoneMap) return;
    const dateMap = zoneMap[this.currentDate];
    if (!dateMap) return;
    const sortedEncounters = dateMap.sort((l, r) => {
      return l.start.localeCompare(r.start);
    });
    for (const [i, enc] of sortedEncounters.entries()) {
      const $row = this.$encounterTabEncounterRowTemplate.cloneNode(true);
      if (!($row instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
      $row.setAttribute('data-index', i.toString());
      if (i === this.currentEncounter) {
        clear = false;
        $row.classList.add('selected');
      }
      querySelectorSafe($row, '.encounterStart').innerText = `[${enc.start}]`;
      querySelectorSafe($row, '.encounterName').innerText = enc.name;
      querySelectorSafe($row, '.encounterDuration').innerText = `(${enc.duration})`;
      $row.addEventListener('click', ev => {
        const t = ev.currentTarget;
        if (!(t instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
        const parent = t.parentElement;
        if (!parent) throw new not_reached/* UnreachableCode */.$();
        querySelectorAllSafe(parent, '.selector-row.selected').forEach(n => {
          n.classList.remove('selected');
        });
        t.classList.add('selected');
        const index = t.getAttribute('data-index');
        if (index !== null) this.currentEncounter = parseInt(index);
        this.refreshUI();
      });
      this.$encounterColumn.append($row);
    }
    if (clear) this.currentEncounter = undefined;
  }
  refreshInfo() {
    this.$infoColumn.innerHTML = '';
    const zoneMap = this.currentZone !== undefined ? this.encounters[this.currentZone] : undefined;
    if (!zoneMap) return;
    const dateMap = this.currentDate !== undefined ? zoneMap[this.currentDate] : undefined;
    if (!dateMap) return;
    const encMap = this.currentEncounter !== undefined ? dateMap[this.currentEncounter] : undefined;
    if (!encMap) return;
    const enc = encMap.encounter;
    const $info = this.$encounterInfoTemplate.cloneNode(true);
    if (!($info instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    querySelectorSafe($info, '.encounterLoad').addEventListener('click', () => {
      void this.dispatch('load', enc.id);
    });
    querySelectorSafe($info, '.encounterParse').addEventListener('click', () => {
      void this.dispatch('parse', enc.id);
    });
    querySelectorSafe($info, '.encounterPrune').addEventListener('click', () => {
      void this.dispatch('prune', enc.id);
    });
    querySelectorSafe($info, '.encounterDelete').addEventListener('click', () => {
      void this.dispatch('delete', enc.id);
    });
    querySelectorSafe($info, '.encounterZone .label').textContent = enc.zoneName;
    // ?? operator here to account for old encounters that don't have the property
    querySelectorSafe($info, '.encounterStart .label').textContent = DateTimeFuncs.dateTimeToString(enc.start + enc.offset, enc.tzOffsetMillis ?? 0);
    querySelectorSafe($info, '.encounterDuration .label').textContent = DateTimeFuncs.timeToString(enc.duration - enc.offset, false);
    querySelectorSafe($info, '.encounterName .label').textContent = enc.name;
    querySelectorSafe($info, '.encounterStartStatus .label').textContent = enc.startStatus;
    querySelectorSafe($info, '.encounterEndStatus .label').textContent = enc.endStatus;
    this.$infoColumn.append($info);
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/ui/ProgressBar.ts




class ProgressBar {
  constructor(emulator) {
    const progBarContainer = querySelectorSafe(document, '.encounterProgressBar');
    this.$progressBarTooltip = new Tooltip(progBarContainer, 'bottom', '', false);
    this.$progressBarCurrent = querySelectorSafe(document, '.current-timestamp');
    this.$progressBarDuration = querySelectorSafe(document, '.duration-timestamp');
    this.$progress = querySelectorSafe(document, '.encounterProgressBar');
    this.$progressBar = querySelectorSafe(document, '.encounterProgressBar .progress-bar');
    this.$progress.addEventListener('mousemove', e => {
      if (emulator.currentEncounter) {
        const target = e.currentTarget;
        if (!(target instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
        const percent = e.offsetX / target.offsetWidth;
        const trimmedDuration = emulator.currentEncounter.encounter.duration - emulator.currentEncounter.encounter.initialOffset;
        const time = Math.floor(trimmedDuration * percent);
        this.$progressBarTooltip.offset.x = e.offsetX - target.offsetWidth / 2;
        this.$progressBarTooltip.setText(DateTimeFuncs.timeToString(time));
        this.$progressBarTooltip.show();
      }
    });
    this.$progress.addEventListener('click', e => {
      if (emulator.currentEncounter) {
        const target = e.currentTarget;
        if (!(target instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
        const percent = e.offsetX / target.offsetWidth;
        const trimmedDuration = emulator.currentEncounter.encounter.duration - emulator.currentEncounter.encounter.initialOffset;
        const time = Math.floor(trimmedDuration * percent);
        void emulator.seek(emulator.currentEncounter.encounter.initialOffset + time);
      }
    });
    emulator.on('currentEncounterChanged', encounter => {
      const trimmedDuration = encounter.encounter.duration - encounter.encounter.initialOffset;
      this.$progressBarCurrent.textContent = DateTimeFuncs.timeToString(0, false);
      this.$progressBarDuration.textContent = DateTimeFuncs.timeToString(trimmedDuration, false);
      this.$progressBar.style.width = '0%';
      this.$progressBar.setAttribute('ariaValueMax', trimmedDuration.toString());
    });
    emulator.on('tick', currentLogTime => {
      const curEnc = emulator.currentEncounter;
      if (!curEnc) throw new not_reached/* UnreachableCode */.$();
      const currentOffset = currentLogTime - curEnc.encounter.initialTimestamp;
      const trimmedDuration = curEnc.encounter.duration - curEnc.encounter.initialOffset;
      const progPercent = currentOffset / trimmedDuration * 100;
      const progValue = currentLogTime - curEnc.encounter.initialTimestamp;
      this.$progressBarCurrent.textContent = DateTimeFuncs.timeToString(progValue, false);
      this.$progressBar.style.width = `${progPercent}%`;
    });
    const $play = querySelectorSafe(document, '.progress-bar-row button.play');
    const $pause = querySelectorSafe(document, '.progress-bar-row button.pause');
    $play.addEventListener('click', () => {
      if (emulator.play()) {
        $play.classList.add('d-none');
        $pause.classList.remove('d-none');
      }
    });
    $pause.addEventListener('click', () => {
      if (emulator.pause()) {
        $pause.classList.add('d-none');
        $play.classList.remove('d-none');
      }
    });
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/raidemulator.ts


























const showModal = selector => {
  const modal = querySelectorSafe(document, selector);
  const body = document.body;
  const backdrop = querySelectorSafe(document, '.modal-backdrop');
  body.classList.add('modal-open');
  backdrop.classList.add('show');
  backdrop.classList.remove('hide');
  modal.classList.add('show');
  modal.style.display = 'block';
  return modal;
};
const hideModal = (selector = '.modal.show') => {
  const modal = querySelectorSafe(document, selector);
  const body = document.body;
  const backdrop = querySelectorSafe(document, '.modal-backdrop');
  body.classList.remove('modal-open');
  backdrop.classList.remove('show');
  backdrop.classList.add('hide');
  modal.classList.remove('show');
  modal.style.display = '';
  return modal;
};
const applyTranslation = lang => {
  for (const [key, value] of Object.entries(emulatorTranslations)) {
    querySelectorAllSafe(document, `.translate${key}`).forEach(elem => {
      elem.innerHTML = translate(lang, value);
    });
  }
  for (const [key, value] of Object.entries(emulatorTooltipTranslations)) {
    querySelectorAllSafe(document, `.translate${key}`).forEach(elem => {
      elem.title = translate(lang, value);
    });
  }
  for (const [sel, trans] of Object.entries(emulatorTemplateTranslations)) {
    const template = getTemplateChild(document, sel);
    for (const [key, value] of Object.entries(trans)) {
      querySelectorAllSafe(template, `.translate${key}`).forEach(elem => {
        elem.innerHTML = translate(lang, value);
      });
    }
  }
};

// Default language to en until we know what language to use
applyTranslation('en');
const raidEmulatorOnLoad = async () => {
  const persistor = new Persistor();
  let websocketConnected = false;
  let options = {
    ...raidboss_options
  };

  // Wait for the DB to be ready before doing anything that might invoke the DB
  await persistor.open();
  if (window.location.href.indexOf('OVERLAY_WS') > 0) {
    // Give the websocket 500ms to connect, then abort.
    websocketConnected = await Promise.race([new Promise(res => {
      void (0,overlay_plugin_api/* callOverlayHandler */.ae)({
        call: 'cactbotRequestState'
      }).then(() => {
        res(true);
      });
    }), new Promise(res => {
      window.setTimeout(() => {
        res(false);
      }, 500);
    })]);
    if (websocketConnected) {
      await new Promise(res => {
        user_config/* default.getUserConfigLocation */.Z.getUserConfigLocation('raidboss', raidboss_options, () => {
          // Update options from anything changed via getUserConfigLocation.
          options = {
            ...raidboss_options
          };
          // If DisplayLanguage isn't English, switch to correct lang for emulator display
          if (options.DisplayLanguage !== 'en') applyTranslation(options.DisplayLanguage);
          querySelectorSafe(document, '.websocketConnected').classList.remove('d-none');
          querySelectorSafe(document, '.websocketDisconnected').classList.add('d-none');
          res();
        });
      });
    }
  }
  if (!websocketConnected) {
    // Find the most appropriate lang code to use based on browser language priority
    const browserLang = (0,languages/* browserLanguagesToLang */.lC)(navigator.languages);
    options.ParserLanguage = browserLang;
    options.DisplayLanguage = browserLang;
    // Default options
    options.IsRemoteRaidboss = true;
    options.TextAlertsEnabled = true;
    options.SoundAlertsEnabled = true;
    options.SpokenAlertsEnabled = false;
    options.GroupSpokenAlertsEnabled = false;
  }
  const emulator = new RaidEmulator(options);
  const progressBar = new ProgressBar(emulator);
  const encounterTab = new EncounterTab(persistor);
  const emulatedPartyInfo = new EmulatedPartyInfo(emulator);
  const emulatedWebSocket = new RaidEmulatorOverlayApiHook(emulator);
  emulatedWebSocket.connected = websocketConnected;
  const logConverterWorker = new Worker( /* webpackEntryOptions: { filename: "ui/raidboss/raidemulator.worker.js" } */
  new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(399), __webpack_require__.b));

  // Initialize the Raidboss components, bind them to the emulator for event listeners
  const timelineUI = new RaidEmulatorTimelineUI(options);
  timelineUI.bindTo(emulator);
  const timelineController = new RaidEmulatorTimelineController(options, timelineUI, raidboss_manifest/* default */.Z);
  timelineController.bindTo(emulator);
  const popupText = new RaidEmulatorPopupText(options, new TimelineLoader(timelineController), raidboss_manifest/* default */.Z);
  popupText.bindTo(emulator);
  timelineController.SetPopupTextInterface(new PopupTextGenerator(popupText));
  emulator.setPopupText(popupText);
  const emulatorWatchCombatantsOverride = new RaidEmulatorWatchCombatantsOverride(emulator, emulatedWebSocket);

  // Listen for the user to click a player in the party list on the right
  // and persist that over to the emulator
  emulatedPartyInfo.on('selectPerspective', id => {
    emulator.selectPerspective(id);
  });
  emulator.on('currentEncounterChanged', enc => {
    // Store our current loaded encounter to auto-load next time
    if (enc.encounter.id) window.localStorage.setItem('currentEncounter', enc.encounter.id.toString());
    // Once we've loaded the encounter, seek to the start of the encounter
    if (!isNaN(enc.encounter.initialOffset)) void emulator.seek(enc.encounter.initialOffset);
  });

  // Listen for the user to attempt to load an encounter from the encounters pane
  encounterTab.on('load', id => {
    // Attempt to set the current emulated encounter
    if (!emulator.setCurrentByID(id, emulatorWatchCombatantsOverride)) {
      // If that encounter isn't loaded, load it
      void persistor.loadEncounter(id).then(enc => {
        if (enc) {
          emulator.addEncounter(enc);
          emulator.setCurrentByID(id, emulatorWatchCombatantsOverride);
        }
      });
    }
  });

  // Listen for the user to select re-parse on the encounters tab, then refresh it in the DB
  encounterTab.on('parse', id => {
    void persistor.loadEncounter(id).then(async enc => {
      if (enc) {
        enc.initialize();
        await persistor.persistEncounter(enc);
        encounterTab.refresh();
      }
    });
  });

  // Listen for the user to select prune on the encounters tab
  encounterTab.on('prune', id => {
    void persistor.loadEncounter(id).then(async enc => {
      if (enc) {
        // Trim log lines
        enc.logLines = enc.logLines.slice(enc.firstLineIndex - 1);

        // Update precalculated offsets
        const firstTimestamp = enc.logLines[0]?.timestamp ?? 0;
        for (const line of enc.logLines) line.offset = line.timestamp - firstTimestamp;
        enc.firstLineIndex = 0;
        enc.initialize();
        await persistor.persistEncounter(enc);
        encounterTab.refresh();
      }
    });
  });

  // Listen for the user to select delete on the encounters tab, then do it.
  encounterTab.on('delete', id => {
    void persistor.deleteEncounter(id).then(() => {
      encounterTab.refresh();
    });
  });

  // Listen for the emulator to event log lines, then dispatch them to the timeline controller
  // @TODO: Probably a better place to listen for this?
  emulator.on('emitLogs', e => {
    timelineController.onEmulatorLogEvent(e.logs);
  });

  // Load the encounter metadata from the DB
  encounterTab.refresh();

  // If we don't have any encounters stored, show the intro modal
  void persistor.encounterSummaries.toArray().then(encounters => {
    if (encounters.length === 0) {
      showModal('.introModal');
    } else {
      let lastEncounter = window.localStorage.getItem('currentEncounter');
      if (lastEncounter !== null) {
        lastEncounter = parseInt(lastEncounter);
        const matchedEncounters = encounters.filter(e => e.id === lastEncounter);
        if (matchedEncounters.length) void encounterTab.dispatch('load', lastEncounter);
      }
      if (!websocketConnected) {
        const dispLang = languages/* langMap */.RT[options.ParserLanguage][options.ParserLanguage];
        const discModal = showModal('.disconnectedModal');
        const indicator = querySelectorSafe(document, '.connectionIndicator');
        querySelectorSafe(indicator, '.connectedIndicator').classList.add('d-none');
        querySelectorSafe(indicator, '.disconnectedIndicator').classList.remove('d-none');
        querySelectorSafe(discModal, '.discLangDisplay').innerText = dispLang;
        querySelectorSafe(discModal, '.discLangAlerts').innerText = dispLang;
        querySelectorSafe(discModal, '.discLangTimeline').innerText = dispLang;
      }
    }
  });
  const checkFile = file => {
    if (file.type === 'application/json') {
      // Import a DB file by passing it to Persistor
      void persistor.importDB(file).then(() => {
        encounterTab.refresh();
      });
    } else {
      // Assume it's a log file
      const importModal = showModal('.import-progress-modal');
      const bar = querySelectorSafe(importModal, '.progress-bar');
      bar.style.width = '0px';
      const label = querySelectorSafe(importModal, '.label');
      label.innerText = '';
      const encLabel = querySelectorSafe(importModal, '.modal-body-contents');
      encLabel.classList.add('d-none');
      const doneButton = querySelectorSafe(importModal, '.btn');
      if (!(doneButton instanceof HTMLButtonElement)) throw new not_reached/* UnreachableCode */.$();
      doneButton.disabled = true;
      const doneButtonTimeout = querySelectorSafe(doneButton, '.done-btn-timeout');
      let promise;
      logConverterWorker.onmessage = msg => {
        switch (msg.data.type) {
          case 'progress':
            {
              const percent = (msg.data.bytes / msg.data.totalBytes * 100).toFixed(2);
              bar.style.width = `${percent}%`;
              label.innerText = `${msg.data.bytes}/${msg.data.totalBytes} bytes, ${msg.data.lines} lines (${percent}%)`;
            }
            break;
          case 'encounter':
            {
              encLabel.classList.remove('d-none');
              const enc = msg.data.encounter;

              // Objects sent via message are raw objects, not typed. Apply prototype chain
              Object.setPrototypeOf(enc.combatantTracker, CombatantTracker.prototype);
              querySelectorSafe(encLabel, '.zone').innerText = enc.encounterZoneName;
              querySelectorSafe(encLabel, '.encounter').innerText = msg.data.name;
              querySelectorSafe(encLabel, '.start').innerText = new Date(enc.startTimestamp).toString();
              querySelectorSafe(encLabel, '.end').innerText = new Date(enc.endTimestamp).toString();
              const duration = DateTimeFuncs.timeToString(enc.endTimestamp - enc.startTimestamp, false).split(':');
              const durationMins = duration[0] ?? '0';
              const durationSecs = duration[1] ?? '00';
              const pullDuration = DateTimeFuncs.timeToString(enc.endTimestamp - enc.initialTimestamp, false).split(':');
              const pullDurationMins = pullDuration[0] ?? '0';
              const pullDurationSecs = pullDuration[1] ?? '00';
              querySelectorSafe(encLabel, '.durMins').innerText = durationMins;
              querySelectorSafe(encLabel, '.durSecs').innerText = durationSecs;
              querySelectorSafe(encLabel, '.pullMins').innerText = pullDurationMins;
              querySelectorSafe(encLabel, '.pullSecs').innerText = pullDurationSecs;
              querySelectorSafe(encLabel, '.startedBy').innerText = lookupStartStatuses(options.DisplayLanguage, enc.startStatus);
              querySelectorSafe(encLabel, '.endStatus').innerText = lookupEndStatus(options.DisplayLanguage, enc.endStatus);
              querySelectorSafe(encLabel, '.lineCount').innerText = enc.logLines.length.toString();
              if (promise) {
                void promise.then(() => {
                  promise = persistor.persistEncounter(enc);
                });
              } else {
                promise = persistor.persistEncounter(enc);
              }
            }
            break;
          case 'done':
            void Promise.all([promise]).then(() => {
              encounterTab.refresh();
              doneButton.disabled = false;
              let seconds = 5;
              doneButtonTimeout.innerText = ` (${seconds})`;
              const interval = window.setInterval(() => {
                --seconds;
                doneButtonTimeout.innerText = ` (${seconds})`;
                if (seconds === 0) {
                  window.clearInterval(interval);
                  hideModal('.import-progress-modal');
                }
              }, 1000);
            });
            break;
        }
      };
      void file.arrayBuffer().then(b => {
        logConverterWorker.postMessage(b, [b]);
      });
    }
  };
  const ignoreEvent = e => {
    e.preventDefault();
    e.stopPropagation();
  };

  // Handle drag+drop of files. Have to ignore dragenter/dragover for compatibility reasons.
  document.body.addEventListener('dragenter', ignoreEvent);
  document.body.addEventListener('dragover', ignoreEvent);
  const dropHandler = e => {
    e.preventDefault();
    e.stopPropagation();
    const dt = e.dataTransfer;
    if (dt) {
      const files = dt.files;
      for (const file of files) checkFile(file);
    }
  };
  document.body.addEventListener('drop', dropHandler);
  const $exportButton = querySelectorSafe(document, '.exportDBButton');
  new Tooltip($exportButton, 'bottom', 'Export the DB (slow).');

  // Auto initialize all collapse elements on the page
  document.querySelectorAll('[data-toggle="collapse"]').forEach(n => {
    const targetSel = n.getAttribute('data-target');
    if (targetSel === null) throw new not_reached/* UnreachableCode */.$();
    const target = querySelectorSafe(document, targetSel);
    n.addEventListener('click', () => {
      if (n.getAttribute('aria-expanded') === 'false') {
        n.setAttribute('aria-expanded', 'true');
        target.classList.add('show');
      } else {
        n.setAttribute('aria-expanded', 'false');
        target.classList.remove('show');
      }
    });
  });

  // Handle DB export
  $exportButton.addEventListener('click', () => {
    void persistor.exportDB().then(blob => {
      // Offer download to user
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.setAttribute('download', `RaidEmulator_DBExport_${Date.now()}.json`);
      a.click();
      URL.revokeObjectURL(a.href);
    });
  });
  const $fileInput = querySelectorSafe(document, '.loadFileInput');

  // Handle the `Load Network Log` button when user selects files
  $fileInput.addEventListener('change', e => {
    if (e.target) {
      const target = e.target;
      if (target instanceof HTMLInputElement && target.files) {
        for (const file of target.files) checkFile(file);
      }
    }
  });

  // Prompt user to select files if they click the `Load Network Log` button.
  document.querySelectorAll('.loadNetworkLogButton').forEach(n => {
    n.addEventListener('click', () => {
      $fileInput.click();
    });
  });

  // Handle all modal close buttons
  document.querySelectorAll('.modal button.close, [data-dismiss="modal"]').forEach(n => {
    n.addEventListener('click', e => {
      if (!(e instanceof MouseEvent)) return;
      if (!(e.currentTarget instanceof HTMLElement)) return;
      // Find the parent modal from the close button and close it
      let target = e.currentTarget;
      while (!target.classList.contains('modal') && target !== document.body) target = target.parentElement ?? target;
      if (target !== document.body) hideModal(`.${[...target.classList].join('.')}`);
    });
  });

  // Handle closing all modals if the user clicks outside the modal
  document.querySelectorAll('.modal').forEach(n => {
    n.addEventListener('click', e => {
      // Only close the modal if the user actually clicked outside it, not child clicks
      if (e.target === n) hideModal();
    });
  });

  // Ask the user if they're really sure they want to clear the DB
  querySelectorSafe(document, '.clearDBButton').addEventListener('click', () => {
    showModal('.deleteDBModal');
  });

  // Handle user saying they're really sure they want to clear the DB by wiping it then
  // refreshing the encounter tab
  querySelectorSafe(document, '.deleteDBModal .btn-primary').addEventListener('click', () => {
    void persistor.clearDB().then(() => {
      encounterTab.refresh();
      hideModal('.deleteDBModal');
    });
  });

  // Make the emulator state available for debugging
  window.raidEmulator = {
    emulator: emulator,
    progressBar: progressBar,
    timelineController: timelineController,
    popupText: popupText,
    persistor: persistor,
    encounterTab: encounterTab,
    emulatedPartyInfo: emulatedPartyInfo,
    emulatedWebSocket: emulatedWebSocket,
    timelineUI: timelineUI,
    emulatorWatchCombatantsOverride: emulatorWatchCombatantsOverride
  };
};
document.addEventListener('DOMContentLoaded', () => {
  void raidEmulatorOnLoad();
});

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "ui/raidboss/raidemulator.worker.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl + "../../";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			247: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkcactbot"] = self["webpackChunkcactbot"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, [890], () => (__webpack_require__(102)))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,